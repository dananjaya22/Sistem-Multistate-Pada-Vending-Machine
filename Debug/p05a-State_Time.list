
p05a-State_Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003024  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080031b4  080031b4  000131b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080031b8  080031b8  000131b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080031bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000bc  20000068  08003224  00020068  2**2
                  ALLOC
  6 ._user_heap_stack 00000404  20000124  080032e0  00020068  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  8 .debug_info   00010472  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000021f8  00000000  00000000  0003050a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a18  00000000  00000000  00032708  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000920  00000000  00000000  00033120  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027584  00000000  00000000  00033a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000df59  00000000  00000000  0005afc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e5ca5  00000000  00000000  00068f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  0014ebc2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002f70  00000000  00000000  0014ec40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800319c 	.word	0x0800319c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800319c 	.word	0x0800319c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <HAL_Init+0x34>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0a      	ldr	r2, [pc, #40]	; (80002a4 <HAL_Init+0x34>)
 800027a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <HAL_Init+0x34>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <HAL_Init+0x34>)
 8000286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800028c:	2003      	movs	r0, #3
 800028e:	f000 f90d 	bl	80004ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000292:	200f      	movs	r0, #15
 8000294:	f000 f808 	bl	80002a8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000298:	f000 fb51 	bl	800093e <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40023c00 	.word	0x40023c00

080002a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <HAL_InitTick+0x30>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <HAL_InitTick+0x34>)
 80002b6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ba:	099b      	lsrs	r3, r3, #6
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 f92a 	bl	8000516 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002c2:	2200      	movs	r2, #0
 80002c4:	6879      	ldr	r1, [r7, #4]
 80002c6:	f04f 30ff 	mov.w	r0, #4294967295
 80002ca:	f000 f8fa 	bl	80004c2 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 80002ce:	2300      	movs	r3, #0
}
 80002d0:	4618      	mov	r0, r3
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000000 	.word	0x20000000
 80002dc:	10624dd3 	.word	0x10624dd3

080002e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  uwTick++;
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <HAL_IncTick+0x18>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <HAL_IncTick+0x18>)
 80002ec:	6013      	str	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	2000009c 	.word	0x2000009c

080002fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <HAL_GetTick+0x14>)
 8000302:	681b      	ldr	r3, [r3, #0]
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	2000009c 	.word	0x2000009c

08000314 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f003 0307 	and.w	r3, r3, #7
 8000322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <NVIC_SetPriorityGrouping+0x44>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000330:	4013      	ands	r3, r2
 8000332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800033c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000346:	4a04      	ldr	r2, [pc, #16]	; (8000358 <NVIC_SetPriorityGrouping+0x44>)
 8000348:	68bb      	ldr	r3, [r7, #8]
 800034a:	60d3      	str	r3, [r2, #12]
}
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <NVIC_GetPriorityGrouping+0x18>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	0a1b      	lsrs	r3, r3, #8
 8000366:	f003 0307 	and.w	r3, r3, #7
}
 800036a:	4618      	mov	r0, r3
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f003 021f 	and.w	r2, r3, #31
 8000388:	4907      	ldr	r1, [pc, #28]	; (80003a8 <NVIC_EnableIRQ+0x30>)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	095b      	lsrs	r3, r3, #5
 8000390:	2001      	movs	r0, #1
 8000392:	fa00 f202 	lsl.w	r2, r0, r2
 8000396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000e100 	.word	0xe000e100

080003ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	6039      	str	r1, [r7, #0]
 80003b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80003b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	da0b      	bge.n	80003d8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	b2da      	uxtb	r2, r3
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <NVIC_SetPriority+0x4c>)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	f003 030f 	and.w	r3, r3, #15
 80003cc:	3b04      	subs	r3, #4
 80003ce:	0112      	lsls	r2, r2, #4
 80003d0:	b2d2      	uxtb	r2, r2
 80003d2:	440b      	add	r3, r1
 80003d4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003d6:	e009      	b.n	80003ec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	b2da      	uxtb	r2, r3
 80003dc:	4907      	ldr	r1, [pc, #28]	; (80003fc <NVIC_SetPriority+0x50>)
 80003de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e2:	0112      	lsls	r2, r2, #4
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	440b      	add	r3, r1
 80003e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	e000ed00 	.word	0xe000ed00
 80003fc:	e000e100 	.word	0xe000e100

08000400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000400:	b480      	push	{r7}
 8000402:	b089      	sub	sp, #36	; 0x24
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000414:	69fb      	ldr	r3, [r7, #28]
 8000416:	f1c3 0307 	rsb	r3, r3, #7
 800041a:	2b04      	cmp	r3, #4
 800041c:	bf28      	it	cs
 800041e:	2304      	movcs	r3, #4
 8000420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000422:	69fb      	ldr	r3, [r7, #28]
 8000424:	3304      	adds	r3, #4
 8000426:	2b06      	cmp	r3, #6
 8000428:	d902      	bls.n	8000430 <NVIC_EncodePriority+0x30>
 800042a:	69fb      	ldr	r3, [r7, #28]
 800042c:	3b03      	subs	r3, #3
 800042e:	e000      	b.n	8000432 <NVIC_EncodePriority+0x32>
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000434:	f04f 32ff 	mov.w	r2, #4294967295
 8000438:	69bb      	ldr	r3, [r7, #24]
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	43da      	mvns	r2, r3
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	401a      	ands	r2, r3
 8000444:	697b      	ldr	r3, [r7, #20]
 8000446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000448:	f04f 31ff 	mov.w	r1, #4294967295
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	43d9      	mvns	r1, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000458:	4313      	orrs	r3, r2
         );
}
 800045a:	4618      	mov	r0, r3
 800045c:	3724      	adds	r7, #36	; 0x24
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
	...

08000468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3b01      	subs	r3, #1
 8000474:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000478:	d301      	bcc.n	800047e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800047a:	2301      	movs	r3, #1
 800047c:	e00f      	b.n	800049e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800047e:	4a0a      	ldr	r2, [pc, #40]	; (80004a8 <SysTick_Config+0x40>)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	3b01      	subs	r3, #1
 8000484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000486:	210f      	movs	r1, #15
 8000488:	f04f 30ff 	mov.w	r0, #4294967295
 800048c:	f7ff ff8e 	bl	80003ac <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <SysTick_Config+0x40>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <SysTick_Config+0x40>)
 8000498:	2207      	movs	r2, #7
 800049a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	e000e010 	.word	0xe000e010

080004ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f7ff ff2d 	bl	8000314 <NVIC_SetPriorityGrouping>
}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b086      	sub	sp, #24
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	4603      	mov	r3, r0
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004d4:	f7ff ff42 	bl	800035c <NVIC_GetPriorityGrouping>
 80004d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	68b9      	ldr	r1, [r7, #8]
 80004de:	6978      	ldr	r0, [r7, #20]
 80004e0:	f7ff ff8e 	bl	8000400 <NVIC_EncodePriority>
 80004e4:	4602      	mov	r2, r0
 80004e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004ea:	4611      	mov	r1, r2
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ff5d 	bl	80003ac <NVIC_SetPriority>
}
 80004f2:	bf00      	nop
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	4603      	mov	r3, r0
 8000502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ff35 	bl	8000378 <NVIC_EnableIRQ>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	b082      	sub	sp, #8
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f7ff ffa2 	bl	8000468 <SysTick_Config>
 8000524:	4603      	mov	r3, r0
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b04      	cmp	r3, #4
 800053c:	d106      	bne.n	800054c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800053e:	4b09      	ldr	r3, [pc, #36]	; (8000564 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000544:	f043 0304 	orr.w	r3, r3, #4
 8000548:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800054a:	e005      	b.n	8000558 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a04      	ldr	r2, [pc, #16]	; (8000564 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000552:	f023 0304 	bic.w	r3, r3, #4
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000e010 	.word	0xe000e010

08000568 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800056c:	f000 f802 	bl	8000574 <HAL_SYSTICK_Callback>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000584:	b480      	push	{r7}
 8000586:	b089      	sub	sp, #36	; 0x24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000596:	2300      	movs	r3, #0
 8000598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	e16b      	b.n	8000878 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80005a0:	2201      	movs	r2, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	fa02 f303 	lsl.w	r3, r2, r3
 80005a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	4013      	ands	r3, r2
 80005b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80005b4:	693a      	ldr	r2, [r7, #16]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	f040 815a 	bne.w	8000872 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d003      	beq.n	80005ce <HAL_GPIO_Init+0x4a>
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	2b12      	cmp	r3, #18
 80005cc:	d123      	bne.n	8000616 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	08da      	lsrs	r2, r3, #3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	3208      	adds	r2, #8
 80005d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	f003 0307 	and.w	r3, r3, #7
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	220f      	movs	r2, #15
 80005e6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ea:	43db      	mvns	r3, r3
 80005ec:	69ba      	ldr	r2, [r7, #24]
 80005ee:	4013      	ands	r3, r2
 80005f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	691a      	ldr	r2, [r3, #16]
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	f003 0307 	and.w	r3, r3, #7
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	69ba      	ldr	r2, [r7, #24]
 8000604:	4313      	orrs	r3, r2
 8000606:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	08da      	lsrs	r2, r3, #3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	3208      	adds	r2, #8
 8000610:	69b9      	ldr	r1, [r7, #24]
 8000612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	2203      	movs	r2, #3
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	43db      	mvns	r3, r3
 8000628:	69ba      	ldr	r2, [r7, #24]
 800062a:	4013      	ands	r3, r2
 800062c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f003 0203 	and.w	r2, r3, #3
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	69ba      	ldr	r2, [r7, #24]
 8000640:	4313      	orrs	r3, r2
 8000642:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	69ba      	ldr	r2, [r7, #24]
 8000648:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d00b      	beq.n	800066a <HAL_GPIO_Init+0xe6>
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d007      	beq.n	800066a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800065e:	2b11      	cmp	r3, #17
 8000660:	d003      	beq.n	800066a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2b12      	cmp	r3, #18
 8000668:	d130      	bne.n	80006cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	2203      	movs	r2, #3
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	69ba      	ldr	r2, [r7, #24]
 800067e:	4013      	ands	r3, r2
 8000680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	4313      	orrs	r3, r2
 8000692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	69ba      	ldr	r2, [r7, #24]
 8000698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006a0:	2201      	movs	r2, #1
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	69ba      	ldr	r2, [r7, #24]
 80006ac:	4013      	ands	r3, r2
 80006ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	091b      	lsrs	r3, r3, #4
 80006b6:	f003 0201 	and.w	r2, r3, #1
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	69ba      	ldr	r2, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	69ba      	ldr	r2, [r7, #24]
 80006ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	2203      	movs	r2, #3
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	69ba      	ldr	r2, [r7, #24]
 80006e0:	4013      	ands	r3, r2
 80006e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	689a      	ldr	r2, [r3, #8]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	69ba      	ldr	r2, [r7, #24]
 80006fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	685b      	ldr	r3, [r3, #4]
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	2b00      	cmp	r3, #0
 8000706:	f000 80b4 	beq.w	8000872 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b5f      	ldr	r3, [pc, #380]	; (800088c <HAL_GPIO_Init+0x308>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a5e      	ldr	r2, [pc, #376]	; (800088c <HAL_GPIO_Init+0x308>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6453      	str	r3, [r2, #68]	; 0x44
 800071a:	4b5c      	ldr	r3, [pc, #368]	; (800088c <HAL_GPIO_Init+0x308>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000726:	4a5a      	ldr	r2, [pc, #360]	; (8000890 <HAL_GPIO_Init+0x30c>)
 8000728:	69fb      	ldr	r3, [r7, #28]
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	3302      	adds	r3, #2
 800072e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f003 0303 	and.w	r3, r3, #3
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	220f      	movs	r2, #15
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	43db      	mvns	r3, r3
 8000744:	69ba      	ldr	r2, [r7, #24]
 8000746:	4013      	ands	r3, r2
 8000748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a51      	ldr	r2, [pc, #324]	; (8000894 <HAL_GPIO_Init+0x310>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d02b      	beq.n	80007aa <HAL_GPIO_Init+0x226>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a50      	ldr	r2, [pc, #320]	; (8000898 <HAL_GPIO_Init+0x314>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d025      	beq.n	80007a6 <HAL_GPIO_Init+0x222>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a4f      	ldr	r2, [pc, #316]	; (800089c <HAL_GPIO_Init+0x318>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d01f      	beq.n	80007a2 <HAL_GPIO_Init+0x21e>
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a4e      	ldr	r2, [pc, #312]	; (80008a0 <HAL_GPIO_Init+0x31c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d019      	beq.n	800079e <HAL_GPIO_Init+0x21a>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <HAL_GPIO_Init+0x320>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d013      	beq.n	800079a <HAL_GPIO_Init+0x216>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <HAL_GPIO_Init+0x324>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d00d      	beq.n	8000796 <HAL_GPIO_Init+0x212>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a4b      	ldr	r2, [pc, #300]	; (80008ac <HAL_GPIO_Init+0x328>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d007      	beq.n	8000792 <HAL_GPIO_Init+0x20e>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a4a      	ldr	r2, [pc, #296]	; (80008b0 <HAL_GPIO_Init+0x32c>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_GPIO_Init+0x20a>
 800078a:	2307      	movs	r3, #7
 800078c:	e00e      	b.n	80007ac <HAL_GPIO_Init+0x228>
 800078e:	2308      	movs	r3, #8
 8000790:	e00c      	b.n	80007ac <HAL_GPIO_Init+0x228>
 8000792:	2306      	movs	r3, #6
 8000794:	e00a      	b.n	80007ac <HAL_GPIO_Init+0x228>
 8000796:	2305      	movs	r3, #5
 8000798:	e008      	b.n	80007ac <HAL_GPIO_Init+0x228>
 800079a:	2304      	movs	r3, #4
 800079c:	e006      	b.n	80007ac <HAL_GPIO_Init+0x228>
 800079e:	2303      	movs	r3, #3
 80007a0:	e004      	b.n	80007ac <HAL_GPIO_Init+0x228>
 80007a2:	2302      	movs	r3, #2
 80007a4:	e002      	b.n	80007ac <HAL_GPIO_Init+0x228>
 80007a6:	2301      	movs	r3, #1
 80007a8:	e000      	b.n	80007ac <HAL_GPIO_Init+0x228>
 80007aa:	2300      	movs	r3, #0
 80007ac:	69fa      	ldr	r2, [r7, #28]
 80007ae:	f002 0203 	and.w	r2, r2, #3
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	4093      	lsls	r3, r2
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007bc:	4934      	ldr	r1, [pc, #208]	; (8000890 <HAL_GPIO_Init+0x30c>)
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	3302      	adds	r3, #2
 80007c4:	69ba      	ldr	r2, [r7, #24]
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007ca:	4b3a      	ldr	r3, [pc, #232]	; (80008b4 <HAL_GPIO_Init+0x330>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	43db      	mvns	r3, r3
 80007d4:	69ba      	ldr	r2, [r7, #24]
 80007d6:	4013      	ands	r3, r2
 80007d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d003      	beq.n	80007ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80007ee:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <HAL_GPIO_Init+0x330>)
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <HAL_GPIO_Init+0x330>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	43db      	mvns	r3, r3
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	4013      	ands	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080c:	2b00      	cmp	r3, #0
 800080e:	d003      	beq.n	8000818 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000810:	69ba      	ldr	r2, [r7, #24]
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	4313      	orrs	r3, r2
 8000816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000818:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <HAL_GPIO_Init+0x330>)
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <HAL_GPIO_Init+0x330>)
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	43db      	mvns	r3, r3
 8000828:	69ba      	ldr	r2, [r7, #24]
 800082a:	4013      	ands	r3, r2
 800082c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	4313      	orrs	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <HAL_GPIO_Init+0x330>)
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000848:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <HAL_GPIO_Init+0x330>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	43db      	mvns	r3, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d003      	beq.n	800086c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <HAL_GPIO_Init+0x330>)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3301      	adds	r3, #1
 8000876:	61fb      	str	r3, [r7, #28]
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	2b0f      	cmp	r3, #15
 800087c:	f67f ae90 	bls.w	80005a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000880:	bf00      	nop
 8000882:	3724      	adds	r7, #36	; 0x24
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40023800 	.word	0x40023800
 8000890:	40013800 	.word	0x40013800
 8000894:	40020000 	.word	0x40020000
 8000898:	40020400 	.word	0x40020400
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40021400 	.word	0x40021400
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40021c00 	.word	0x40021c00
 80008b4:	40013c00 	.word	0x40013c00

080008b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	887b      	ldrh	r3, [r7, #2]
 80008ca:	4013      	ands	r3, r2
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80008d0:	2301      	movs	r3, #1
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e001      	b.n	80008da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3714      	adds	r7, #20
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	807b      	strh	r3, [r7, #2]
 80008f4:	4613      	mov	r3, r2
 80008f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008f8:	787b      	ldrb	r3, [r7, #1]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d003      	beq.n	8000906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008fe:	887a      	ldrh	r2, [r7, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000904:	e003      	b.n	800090e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000906:	887b      	ldrh	r3, [r7, #2]
 8000908:	041a      	lsls	r2, r3, #16
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	619a      	str	r2, [r3, #24]
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	460b      	mov	r3, r1
 8000924:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695a      	ldr	r2, [r3, #20]
 800092a:	887b      	ldrh	r3, [r7, #2]
 800092c:	405a      	eors	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	615a      	str	r2, [r3, #20]
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d075      	beq.n	8000a50 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000964:	4ba4      	ldr	r3, [pc, #656]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	f003 030c 	and.w	r3, r3, #12
 800096c:	2b04      	cmp	r3, #4
 800096e:	d00c      	beq.n	800098a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000970:	4ba1      	ldr	r3, [pc, #644]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000978:	2b08      	cmp	r3, #8
 800097a:	d112      	bne.n	80009a2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800097c:	4b9e      	ldr	r3, [pc, #632]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000988:	d10b      	bne.n	80009a2 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800098a:	4b9b      	ldr	r3, [pc, #620]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000992:	2b00      	cmp	r3, #0
 8000994:	d05b      	beq.n	8000a4e <HAL_RCC_OscConfig+0x102>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d157      	bne.n	8000a4e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e224      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009aa:	d106      	bne.n	80009ba <HAL_RCC_OscConfig+0x6e>
 80009ac:	4b92      	ldr	r3, [pc, #584]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a91      	ldr	r2, [pc, #580]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	e01d      	b.n	80009f6 <HAL_RCC_OscConfig+0xaa>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009c2:	d10c      	bne.n	80009de <HAL_RCC_OscConfig+0x92>
 80009c4:	4b8c      	ldr	r3, [pc, #560]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a8b      	ldr	r2, [pc, #556]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b89      	ldr	r3, [pc, #548]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a88      	ldr	r2, [pc, #544]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e00b      	b.n	80009f6 <HAL_RCC_OscConfig+0xaa>
 80009de:	4b86      	ldr	r3, [pc, #536]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a85      	ldr	r2, [pc, #532]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	4b83      	ldr	r3, [pc, #524]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a82      	ldr	r2, [pc, #520]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 80009f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d013      	beq.n	8000a26 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009fe:	f7ff fc7d 	bl	80002fc <HAL_GetTick>
 8000a02:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a04:	e008      	b.n	8000a18 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a06:	f7ff fc79 	bl	80002fc <HAL_GetTick>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	2b64      	cmp	r3, #100	; 0x64
 8000a12:	d901      	bls.n	8000a18 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8000a14:	2303      	movs	r3, #3
 8000a16:	e1e9      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a18:	4b77      	ldr	r3, [pc, #476]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f0      	beq.n	8000a06 <HAL_RCC_OscConfig+0xba>
 8000a24:	e014      	b.n	8000a50 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a26:	f7ff fc69 	bl	80002fc <HAL_GetTick>
 8000a2a:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a2c:	e008      	b.n	8000a40 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a2e:	f7ff fc65 	bl	80002fc <HAL_GetTick>
 8000a32:	4602      	mov	r2, r0
 8000a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	2b64      	cmp	r3, #100	; 0x64
 8000a3a:	d901      	bls.n	8000a40 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e1d5      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a40:	4b6d      	ldr	r3, [pc, #436]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1f0      	bne.n	8000a2e <HAL_RCC_OscConfig+0xe2>
 8000a4c:	e000      	b.n	8000a50 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d077      	beq.n	8000b4c <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a5c:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	f003 030c 	and.w	r3, r3, #12
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d00b      	beq.n	8000a80 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a68:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	d126      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a74:	4b60      	ldr	r3, [pc, #384]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d120      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a80:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <HAL_RCC_OscConfig+0x14c>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d001      	beq.n	8000a98 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	e1a9      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a98:	4b57      	ldr	r3, [pc, #348]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6919      	ldr	r1, [r3, #16]
 8000aa4:	23f8      	movs	r3, #248	; 0xf8
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aaa:	fa93 f3a3 	rbit	r3, r3
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	fab3 f383 	clz	r3, r3
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	494f      	ldr	r1, [pc, #316]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000abc:	4313      	orrs	r3, r2
 8000abe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ac0:	e044      	b.n	8000b4c <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d02a      	beq.n	8000b20 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000aca:	4b4c      	ldr	r3, [pc, #304]	; (8000bfc <HAL_RCC_OscConfig+0x2b0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fc14 	bl	80002fc <HAL_GetTick>
 8000ad4:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ad8:	f7ff fc10 	bl	80002fc <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e180      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f0      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6919      	ldr	r1, [r3, #16]
 8000b02:	23f8      	movs	r3, #248	; 0xf8
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b08:	fa93 f3a3 	rbit	r3, r3
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	fab3 f383 	clz	r3, r3
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	4937      	ldr	r1, [pc, #220]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]
 8000b1e:	e015      	b.n	8000b4c <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b20:	4b36      	ldr	r3, [pc, #216]	; (8000bfc <HAL_RCC_OscConfig+0x2b0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b26:	f7ff fbe9 	bl	80002fc <HAL_GetTick>
 8000b2a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b2c:	e008      	b.n	8000b40 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b2e:	f7ff fbe5 	bl	80002fc <HAL_GetTick>
 8000b32:	4602      	mov	r2, r0
 8000b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e155      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1f0      	bne.n	8000b2e <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d030      	beq.n	8000bba <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d016      	beq.n	8000b8e <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_RCC_OscConfig+0x2b4>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b66:	f7ff fbc9 	bl	80002fc <HAL_GetTick>
 8000b6a:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b6c:	e008      	b.n	8000b80 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fbc5 	bl	80002fc <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d901      	bls.n	8000b80 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e135      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b84:	f003 0302 	and.w	r3, r3, #2
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f0      	beq.n	8000b6e <HAL_RCC_OscConfig+0x222>
 8000b8c:	e015      	b.n	8000bba <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_RCC_OscConfig+0x2b4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b94:	f7ff fbb2 	bl	80002fc <HAL_GetTick>
 8000b98:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b9a:	e008      	b.n	8000bae <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b9c:	f7ff fbae 	bl	80002fc <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d901      	bls.n	8000bae <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 8000baa:	2303      	movs	r3, #3
 8000bac:	e11e      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f0      	bne.n	8000b9c <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8086 	beq.w	8000cd4 <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_RCC_OscConfig+0x2ac>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <HAL_RCC_OscConfig+0x2b8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <HAL_RCC_OscConfig+0x2b8>)
 8000bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bee:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8000bf0:	f7ff fb84 	bl	80002fc <HAL_GetTick>
 8000bf4:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000bf6:	e010      	b.n	8000c1a <HAL_RCC_OscConfig+0x2ce>
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	42470000 	.word	0x42470000
 8000c00:	42470e80 	.word	0x42470e80
 8000c04:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000c08:	f7ff fb78 	bl	80002fc <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e0e8      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c1a:	4b76      	ldr	r3, [pc, #472]	; (8000df4 <HAL_RCC_OscConfig+0x4a8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f0      	beq.n	8000c08 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d106      	bne.n	8000c3c <HAL_RCC_OscConfig+0x2f0>
 8000c2e:	4b72      	ldr	r3, [pc, #456]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c32:	4a71      	ldr	r2, [pc, #452]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6713      	str	r3, [r2, #112]	; 0x70
 8000c3a:	e01c      	b.n	8000c76 <HAL_RCC_OscConfig+0x32a>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d10c      	bne.n	8000c5e <HAL_RCC_OscConfig+0x312>
 8000c44:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c48:	4a6b      	ldr	r2, [pc, #428]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8000c50:	4b69      	ldr	r3, [pc, #420]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c54:	4a68      	ldr	r2, [pc, #416]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8000c5c:	e00b      	b.n	8000c76 <HAL_RCC_OscConfig+0x32a>
 8000c5e:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c62:	4a65      	ldr	r2, [pc, #404]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c64:	f023 0301 	bic.w	r3, r3, #1
 8000c68:	6713      	str	r3, [r2, #112]	; 0x70
 8000c6a:	4b63      	ldr	r3, [pc, #396]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c6e:	4a62      	ldr	r2, [pc, #392]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c70:	f023 0304 	bic.w	r3, r3, #4
 8000c74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d015      	beq.n	8000caa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c7e:	f7ff fb3d 	bl	80002fc <HAL_GetTick>
 8000c82:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c84:	e00a      	b.n	8000c9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c86:	f7ff fb39 	bl	80002fc <HAL_GetTick>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d901      	bls.n	8000c9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e0a7      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c9c:	4b56      	ldr	r3, [pc, #344]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0ee      	beq.n	8000c86 <HAL_RCC_OscConfig+0x33a>
 8000ca8:	e014      	b.n	8000cd4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000caa:	f7ff fb27 	bl	80002fc <HAL_GetTick>
 8000cae:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cb0:	e00a      	b.n	8000cc8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cb2:	f7ff fb23 	bl	80002fc <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d901      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e091      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cc8:	4b4b      	ldr	r3, [pc, #300]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1ee      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 8086 	beq.w	8000dea <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cde:	4b46      	ldr	r3, [pc, #280]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d07d      	beq.n	8000de6 <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d162      	bne.n	8000db8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cf2:	4b42      	ldr	r3, [pc, #264]	; (8000dfc <HAL_RCC_OscConfig+0x4b0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf8:	f7ff fb00 	bl	80002fc <HAL_GetTick>
 8000cfc:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cfe:	e008      	b.n	8000d12 <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d00:	f7ff fafc 	bl	80002fc <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d901      	bls.n	8000d12 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e06c      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d12:	4b39      	ldr	r3, [pc, #228]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1f0      	bne.n	8000d00 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69da      	ldr	r2, [r3, #28]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000d30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	fa93 f3a3 	rbit	r3, r3
 8000d38:	60fb      	str	r3, [r7, #12]
  return(result);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	fab3 f383 	clz	r3, r3
 8000d40:	fa01 f303 	lsl.w	r3, r1, r3
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	085b      	lsrs	r3, r3, #1
 8000d4c:	1e59      	subs	r1, r3, #1
 8000d4e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  return(result);
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d6c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8000d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d72:	6a3b      	ldr	r3, [r7, #32]
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	61fb      	str	r3, [r7, #28]
  return(result);
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fab3 f383 	clz	r3, r3
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	491c      	ldr	r1, [pc, #112]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <HAL_RCC_OscConfig+0x4b0>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d90:	f7ff fab4 	bl	80002fc <HAL_GetTick>
 8000d94:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d98:	f7ff fab0 	bl	80002fc <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e020      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <HAL_RCC_OscConfig+0x44c>
 8000db6:	e018      	b.n	8000dea <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000db8:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <HAL_RCC_OscConfig+0x4b0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fa9d 	bl	80002fc <HAL_GetTick>
 8000dc2:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc6:	f7ff fa99 	bl	80002fc <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e009      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_RCC_OscConfig+0x4ac>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f0      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x47a>
 8000de4:	e001      	b.n	8000dea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e000      	b.n	8000dec <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3738      	adds	r7, #56	; 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40007000 	.word	0x40007000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	42470060 	.word	0x42470060

08000e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000e0e:	4b81      	ldr	r3, [pc, #516]	; (8001014 <HAL_RCC_ClockConfig+0x214>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	683a      	ldr	r2, [r7, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d90c      	bls.n	8000e36 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e1c:	4b7d      	ldr	r3, [pc, #500]	; (8001014 <HAL_RCC_ClockConfig+0x214>)
 8000e1e:	683a      	ldr	r2, [r7, #0]
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e24:	4b7b      	ldr	r3, [pc, #492]	; (8001014 <HAL_RCC_ClockConfig+0x214>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d001      	beq.n	8000e36 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e0ea      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d008      	beq.n	8000e54 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e42:	4b75      	ldr	r3, [pc, #468]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	4972      	ldr	r1, [pc, #456]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 8086 	beq.w	8000f6e <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d107      	bne.n	8000e7a <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6a:	4b6b      	ldr	r3, [pc, #428]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d119      	bne.n	8000eaa <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e0c8      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d003      	beq.n	8000e8a <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d107      	bne.n	8000e9a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e8a:	4b63      	ldr	r3, [pc, #396]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d109      	bne.n	8000eaa <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e0b8      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9a:	4b5f      	ldr	r3, [pc, #380]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e0b0      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f023 0203 	bic.w	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4958      	ldr	r1, [pc, #352]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000ebc:	f7ff fa1e 	bl	80002fc <HAL_GetTick>
 8000ec0:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d112      	bne.n	8000ef0 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eca:	e00a      	b.n	8000ee2 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ecc:	f7ff fa16 	bl	80002fc <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e094      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee2:	4b4d      	ldr	r3, [pc, #308]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d1ee      	bne.n	8000ecc <HAL_RCC_ClockConfig+0xcc>
 8000eee:	e03e      	b.n	8000f6e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d112      	bne.n	8000f1e <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef8:	e00a      	b.n	8000f10 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000efa:	f7ff f9ff 	bl	80002fc <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e07d      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f10:	4b41      	ldr	r3, [pc, #260]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d1ee      	bne.n	8000efa <HAL_RCC_ClockConfig+0xfa>
 8000f1c:	e027      	b.n	8000f6e <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d11d      	bne.n	8000f62 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f26:	e00a      	b.n	8000f3e <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f28:	f7ff f9e8 	bl	80002fc <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e066      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000f3e:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b0c      	cmp	r3, #12
 8000f48:	d1ee      	bne.n	8000f28 <HAL_RCC_ClockConfig+0x128>
 8000f4a:	e010      	b.n	8000f6e <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f4c:	f7ff f9d6 	bl	80002fc <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e054      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1ee      	bne.n	8000f4c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f6e:	4b29      	ldr	r3, [pc, #164]	; (8001014 <HAL_RCC_ClockConfig+0x214>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d20c      	bcs.n	8000f96 <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <HAL_RCC_ClockConfig+0x214>)
 8000f7e:	683a      	ldr	r2, [r7, #0]
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f84:	4b23      	ldr	r3, [pc, #140]	; (8001014 <HAL_RCC_ClockConfig+0x214>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d001      	beq.n	8000f96 <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e03a      	b.n	800100c <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	491a      	ldr	r1, [pc, #104]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d009      	beq.n	8000fd4 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4912      	ldr	r1, [pc, #72]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000fd4:	f000 f826 	bl	8001024 <HAL_RCC_GetSysClockFreq>
 8000fd8:	4601      	mov	r1, r0
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_RCC_ClockConfig+0x218>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000fe2:	23f0      	movs	r3, #240	; 0xf0
 8000fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	60fb      	str	r3, [r7, #12]
  return(result);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	fab3 f383 	clz	r3, r3
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_RCC_ClockConfig+0x21c>)
 8000ffa:	5cd3      	ldrb	r3, [r2, r3]
 8000ffc:	fa21 f303 	lsr.w	r3, r1, r3
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_RCC_ClockConfig+0x220>)
 8001002:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001004:	200f      	movs	r0, #15
 8001006:	f7ff f94f 	bl	80002a8 <HAL_InitTick>
  
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023c00 	.word	0x40023c00
 8001018:	40023800 	.word	0x40023800
 800101c:	080030b0 	.word	0x080030b0
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	; 0x2c
 8001028:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <HAL_RCC_GetSysClockFreq+0xf0>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 030c 	and.w	r3, r3, #12
 8001042:	2b04      	cmp	r3, #4
 8001044:	d006      	beq.n	8001054 <HAL_RCC_GetSysClockFreq+0x30>
 8001046:	2b08      	cmp	r3, #8
 8001048:	d007      	beq.n	800105a <HAL_RCC_GetSysClockFreq+0x36>
 800104a:	2b00      	cmp	r3, #0
 800104c:	d158      	bne.n	8001100 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001050:	623b      	str	r3, [r7, #32]
       break;
 8001052:	e058      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001056:	623b      	str	r3, [r7, #32]
      break;
 8001058:	e055      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <HAL_RCC_GetSysClockFreq+0xf0>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001062:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d017      	beq.n	80010a0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001070:	4a2a      	ldr	r2, [pc, #168]	; (800111c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fbb2 f2f3 	udiv	r2, r2, r3
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <HAL_RCC_GetSysClockFreq+0xf0>)
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001080:	400b      	ands	r3, r1
 8001082:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001086:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001088:	6979      	ldr	r1, [r7, #20]
 800108a:	fa91 f1a1 	rbit	r1, r1
 800108e:	6139      	str	r1, [r7, #16]
  return(result);
 8001090:	6939      	ldr	r1, [r7, #16]
 8001092:	fab1 f181 	clz	r1, r1
 8001096:	40cb      	lsrs	r3, r1
 8001098:	fb03 f302 	mul.w	r3, r3, r2
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	e016      	b.n	80010ce <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_RCC_GetSysClockFreq+0xf4>)
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_RCC_GetSysClockFreq+0xf0>)
 80010aa:	6859      	ldr	r1, [r3, #4]
 80010ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010b0:	400b      	ands	r3, r1
 80010b2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80010b6:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	68f9      	ldr	r1, [r7, #12]
 80010ba:	fa91 f1a1 	rbit	r1, r1
 80010be:	60b9      	str	r1, [r7, #8]
  return(result);
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	fab1 f181 	clz	r1, r1
 80010c6:	40cb      	lsrs	r3, r1
 80010c8:	fb03 f302 	mul.w	r3, r3, r2
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_RCC_GetSysClockFreq+0xf0>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010d6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80010da:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	fa93 f3a3 	rbit	r3, r3
 80010e2:	603b      	str	r3, [r7, #0]
  return(result);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	fab3 f383 	clz	r3, r3
 80010ea:	fa22 f303 	lsr.w	r3, r2, r3
 80010ee:	3301      	adds	r3, #1
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 80010f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	623b      	str	r3, [r7, #32]
      break;
 80010fe:	e002      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001102:	623b      	str	r3, [r7, #32]
      break;
 8001104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001106:	6a3b      	ldr	r3, [r7, #32]
}
 8001108:	4618      	mov	r0, r3
 800110a:	372c      	adds	r7, #44	; 0x2c
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800
 8001118:	00f42400 	.word	0x00f42400
 800111c:	007a1200 	.word	0x007a1200

08001120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_RCC_GetHCLKFreq+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000000 	.word	0x20000000

08001138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800113e:	f7ff ffef 	bl	8001120 <HAL_RCC_GetHCLKFreq>
 8001142:	4601      	mov	r1, r0
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800114c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001150:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	603b      	str	r3, [r7, #0]
  return(result);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	fa21 f303 	lsr.w	r3, r1, r3
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	080030c0 	.word	0x080030c0

0800117c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001182:	f7ff ffcd 	bl	8001120 <HAL_RCC_GetHCLKFreq>
 8001186:	4601      	mov	r1, r0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 8001190:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001194:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	603b      	str	r3, [r7, #0]
  return(result);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	fab3 f383 	clz	r3, r3
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40023800 	.word	0x40023800
 80011bc:	080030c0 	.word	0x080030c0

080011c0 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e01d      	b.n	800120e <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f815 	bl	8001216 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2202      	movs	r2, #2
 80011f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3304      	adds	r3, #4
 80011fc:	4619      	mov	r1, r3
 80011fe:	4610      	mov	r0, r2
 8001200:	f000 f82e 	bl	8001260 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_TIM_Base_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a44      	ldr	r2, [pc, #272]	; (8001388 <TIM_Base_SetConfig+0x128>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d013      	beq.n	80012a4 <TIM_Base_SetConfig+0x44>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001282:	d00f      	beq.n	80012a4 <TIM_Base_SetConfig+0x44>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a41      	ldr	r2, [pc, #260]	; (800138c <TIM_Base_SetConfig+0x12c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00b      	beq.n	80012a4 <TIM_Base_SetConfig+0x44>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a40      	ldr	r2, [pc, #256]	; (8001390 <TIM_Base_SetConfig+0x130>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <TIM_Base_SetConfig+0x44>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3f      	ldr	r2, [pc, #252]	; (8001394 <TIM_Base_SetConfig+0x134>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d003      	beq.n	80012a4 <TIM_Base_SetConfig+0x44>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3e      	ldr	r2, [pc, #248]	; (8001398 <TIM_Base_SetConfig+0x138>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <TIM_Base_SetConfig+0x48>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <TIM_Base_SetConfig+0x4a>
 80012a8:	2300      	movs	r3, #0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d008      	beq.n	80012c0 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4313      	orrs	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a31      	ldr	r2, [pc, #196]	; (8001388 <TIM_Base_SetConfig+0x128>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d02b      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ce:	d027      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <TIM_Base_SetConfig+0x12c>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d023      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a2d      	ldr	r2, [pc, #180]	; (8001390 <TIM_Base_SetConfig+0x130>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d01f      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a2c      	ldr	r2, [pc, #176]	; (8001394 <TIM_Base_SetConfig+0x134>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d01b      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <TIM_Base_SetConfig+0x138>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d017      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a2a      	ldr	r2, [pc, #168]	; (800139c <TIM_Base_SetConfig+0x13c>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d013      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a29      	ldr	r2, [pc, #164]	; (80013a0 <TIM_Base_SetConfig+0x140>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d00f      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a28      	ldr	r2, [pc, #160]	; (80013a4 <TIM_Base_SetConfig+0x144>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d00b      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <TIM_Base_SetConfig+0x148>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d007      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a26      	ldr	r2, [pc, #152]	; (80013ac <TIM_Base_SetConfig+0x14c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d003      	beq.n	8001320 <TIM_Base_SetConfig+0xc0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a25      	ldr	r2, [pc, #148]	; (80013b0 <TIM_Base_SetConfig+0x150>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d101      	bne.n	8001324 <TIM_Base_SetConfig+0xc4>
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <TIM_Base_SetConfig+0xc6>
 8001324:	2300      	movs	r3, #0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4313      	orrs	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <TIM_Base_SetConfig+0x128>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d003      	beq.n	8001362 <TIM_Base_SetConfig+0x102>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <TIM_Base_SetConfig+0x138>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <TIM_Base_SetConfig+0x106>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <TIM_Base_SetConfig+0x108>
 8001366:	2300      	movs	r3, #0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	615a      	str	r2, [r3, #20]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40010000 	.word	0x40010000
 800138c:	40000400 	.word	0x40000400
 8001390:	40000800 	.word	0x40000800
 8001394:	40000c00 	.word	0x40000c00
 8001398:	40010400 	.word	0x40010400
 800139c:	40014000 	.word	0x40014000
 80013a0:	40014400 	.word	0x40014400
 80013a4:	40014800 	.word	0x40014800
 80013a8:	40001800 	.word	0x40001800
 80013ac:	40001c00 	.word	0x40001c00
 80013b0:	40002000 	.word	0x40002000

080013b4 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e03f      	b.n	8001446 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d106      	bne.n	80013e0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f837 	bl	800144e <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2224      	movs	r2, #36	; 0x24
 80013e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68da      	ldr	r2, [r3, #12]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013f6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f915 	bl	8001628 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800140c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800141c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800142c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2220      	movs	r2, #32
 8001438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2220      	movs	r2, #32
 8001440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b088      	sub	sp, #32
 8001466:	af02      	add	r7, sp, #8
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b20      	cmp	r3, #32
 8001480:	f040 8083 	bne.w	800158a <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_UART_Transmit+0x2e>
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e07b      	b.n	800158c <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_UART_Transmit+0x40>
 800149e:	2302      	movs	r3, #2
 80014a0:	e074      	b.n	800158c <HAL_UART_Transmit+0x12a>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2221      	movs	r2, #33	; 0x21
 80014b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80014b8:	f7fe ff20 	bl	80002fc <HAL_GetTick>
 80014bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80014ca:	e042      	b.n	8001552 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b01      	subs	r3, #1
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e2:	d122      	bne.n	800152a <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2200      	movs	r2, #0
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f850 	bl	8001594 <UART_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e046      	b.n	800158c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001510:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	3302      	adds	r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	e017      	b.n	8001552 <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	e013      	b.n	8001552 <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2200      	movs	r2, #0
 8001532:	2180      	movs	r1, #128	; 0x80
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 f82d 	bl	8001594 <UART_WaitOnFlagUntilTimeout>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e023      	b.n	800158c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001556:	b29b      	uxth	r3, r3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1b7      	bne.n	80014cc <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2200      	movs	r2, #0
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f814 	bl	8001594 <UART_WaitOnFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e00a      	b.n	800158c <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2220      	movs	r2, #32
 800157a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800158a:	2302      	movs	r3, #2
  }
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80015a4:	e02c      	b.n	8001600 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d028      	beq.n	8001600 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80015b4:	f7fe fea2 	bl	80002fc <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d21d      	bcs.n	8001600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68da      	ldr	r2, [r3, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80015d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695a      	ldr	r2, [r3, #20]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2220      	movs	r2, #32
 80015f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e00f      	b.n	8001620 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	4013      	ands	r3, r2
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	429a      	cmp	r2, r3
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	429a      	cmp	r2, r3
 800161c:	d0c3      	beq.n	80015a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001642:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001664:	f023 030c 	bic.w	r3, r3, #12
 8001668:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4313      	orrs	r3, r2
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800169c:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016b8:	f040 80e4 	bne.w	8001884 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4aab      	ldr	r2, [pc, #684]	; (8001970 <UART_SetConfig+0x348>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d004      	beq.n	80016d0 <UART_SetConfig+0xa8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4aaa      	ldr	r2, [pc, #680]	; (8001974 <UART_SetConfig+0x34c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d16c      	bne.n	80017aa <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80016d0:	f7ff fd54 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80016d4:	4602      	mov	r2, r0
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	009a      	lsls	r2, r3, #2
 80016de:	441a      	add	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4aa3      	ldr	r2, [pc, #652]	; (8001978 <UART_SetConfig+0x350>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	095b      	lsrs	r3, r3, #5
 80016f2:	011c      	lsls	r4, r3, #4
 80016f4:	f7ff fd42 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80016f8:	4602      	mov	r2, r0
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	009a      	lsls	r2, r3, #2
 8001702:	441a      	add	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fbb2 f5f3 	udiv	r5, r2, r3
 800170e:	f7ff fd35 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8001712:	4602      	mov	r2, r0
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	009a      	lsls	r2, r3, #2
 800171c:	441a      	add	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	4a93      	ldr	r2, [pc, #588]	; (8001978 <UART_SetConfig+0x350>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2264      	movs	r2, #100	; 0x64
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	1aeb      	subs	r3, r5, r3
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	3332      	adds	r3, #50	; 0x32
 800173c:	4a8e      	ldr	r2, [pc, #568]	; (8001978 <UART_SetConfig+0x350>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800174a:	441c      	add	r4, r3
 800174c:	f7ff fd16 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8001750:	4602      	mov	r2, r0
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	441a      	add	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fbb2 f5f3 	udiv	r5, r2, r3
 8001766:	f7ff fd09 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 800176a:	4602      	mov	r2, r0
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	009a      	lsls	r2, r3, #2
 8001774:	441a      	add	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	4a7d      	ldr	r2, [pc, #500]	; (8001978 <UART_SetConfig+0x350>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2264      	movs	r2, #100	; 0x64
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	1aeb      	subs	r3, r5, r3
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	3332      	adds	r3, #50	; 0x32
 8001794:	4a78      	ldr	r2, [pc, #480]	; (8001978 <UART_SetConfig+0x350>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	f003 0207 	and.w	r2, r3, #7
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4422      	add	r2, r4
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	e154      	b.n	8001a54 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017aa:	f7ff fcc5 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 80017ae:	4602      	mov	r2, r0
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009a      	lsls	r2, r3, #2
 80017b8:	441a      	add	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c4:	4a6c      	ldr	r2, [pc, #432]	; (8001978 <UART_SetConfig+0x350>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	011c      	lsls	r4, r3, #4
 80017ce:	f7ff fcb3 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009a      	lsls	r2, r3, #2
 80017dc:	441a      	add	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80017e8:	f7ff fca6 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	009a      	lsls	r2, r3, #2
 80017f6:	441a      	add	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4a5d      	ldr	r2, [pc, #372]	; (8001978 <UART_SetConfig+0x350>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	2264      	movs	r2, #100	; 0x64
 800180c:	fb02 f303 	mul.w	r3, r2, r3
 8001810:	1aeb      	subs	r3, r5, r3
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	3332      	adds	r3, #50	; 0x32
 8001816:	4a58      	ldr	r2, [pc, #352]	; (8001978 <UART_SetConfig+0x350>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	095b      	lsrs	r3, r3, #5
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001824:	441c      	add	r4, r3
 8001826:	f7ff fc87 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 800182a:	4602      	mov	r2, r0
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	009a      	lsls	r2, r3, #2
 8001834:	441a      	add	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001840:	f7ff fc7a 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 8001844:	4602      	mov	r2, r0
 8001846:	4613      	mov	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4413      	add	r3, r2
 800184c:	009a      	lsls	r2, r3, #2
 800184e:	441a      	add	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4a47      	ldr	r2, [pc, #284]	; (8001978 <UART_SetConfig+0x350>)
 800185c:	fba2 2303 	umull	r2, r3, r2, r3
 8001860:	095b      	lsrs	r3, r3, #5
 8001862:	2264      	movs	r2, #100	; 0x64
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	1aeb      	subs	r3, r5, r3
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	3332      	adds	r3, #50	; 0x32
 800186e:	4a42      	ldr	r2, [pc, #264]	; (8001978 <UART_SetConfig+0x350>)
 8001870:	fba2 2303 	umull	r2, r3, r2, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	f003 0207 	and.w	r2, r3, #7
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4422      	add	r2, r4
 8001880:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001882:	e0e7      	b.n	8001a54 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a39      	ldr	r2, [pc, #228]	; (8001970 <UART_SetConfig+0x348>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d004      	beq.n	8001898 <UART_SetConfig+0x270>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a38      	ldr	r2, [pc, #224]	; (8001974 <UART_SetConfig+0x34c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d171      	bne.n	800197c <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001898:	f7ff fc70 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 800189c:	4602      	mov	r2, r0
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	009a      	lsls	r2, r3, #2
 80018a6:	441a      	add	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <UART_SetConfig+0x350>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	095b      	lsrs	r3, r3, #5
 80018ba:	011c      	lsls	r4, r3, #4
 80018bc:	f7ff fc5e 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	009a      	lsls	r2, r3, #2
 80018ca:	441a      	add	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	fbb2 f5f3 	udiv	r5, r2, r3
 80018d6:	f7ff fc51 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 80018da:	4602      	mov	r2, r0
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	009a      	lsls	r2, r3, #2
 80018e4:	441a      	add	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	4a21      	ldr	r2, [pc, #132]	; (8001978 <UART_SetConfig+0x350>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2264      	movs	r2, #100	; 0x64
 80018fa:	fb02 f303 	mul.w	r3, r2, r3
 80018fe:	1aeb      	subs	r3, r5, r3
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	3332      	adds	r3, #50	; 0x32
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <UART_SetConfig+0x350>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001910:	441c      	add	r4, r3
 8001912:	f7ff fc33 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8001916:	4602      	mov	r2, r0
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	009a      	lsls	r2, r3, #2
 8001920:	441a      	add	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	fbb2 f5f3 	udiv	r5, r2, r3
 800192c:	f7ff fc26 	bl	800117c <HAL_RCC_GetPCLK2Freq>
 8001930:	4602      	mov	r2, r0
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	009a      	lsls	r2, r3, #2
 800193a:	441a      	add	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <UART_SetConfig+0x350>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	2264      	movs	r2, #100	; 0x64
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	1aeb      	subs	r3, r5, r3
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	3332      	adds	r3, #50	; 0x32
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <UART_SetConfig+0x350>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	095b      	lsrs	r3, r3, #5
 8001962:	f003 020f 	and.w	r2, r3, #15
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4422      	add	r2, r4
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	e071      	b.n	8001a54 <UART_SetConfig+0x42c>
 8001970:	40011000 	.word	0x40011000
 8001974:	40011400 	.word	0x40011400
 8001978:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800197c:	f7ff fbdc 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 8001980:	4602      	mov	r2, r0
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	009a      	lsls	r2, r3, #2
 800198a:	441a      	add	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <UART_SetConfig+0x434>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	011c      	lsls	r4, r3, #4
 80019a0:	f7ff fbca 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	009a      	lsls	r2, r3, #2
 80019ae:	441a      	add	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	fbb2 f5f3 	udiv	r5, r2, r3
 80019ba:	f7ff fbbd 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 80019be:	4602      	mov	r2, r0
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	009a      	lsls	r2, r3, #2
 80019c8:	441a      	add	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d4:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <UART_SetConfig+0x434>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2264      	movs	r2, #100	; 0x64
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	1aeb      	subs	r3, r5, r3
 80019e4:	011b      	lsls	r3, r3, #4
 80019e6:	3332      	adds	r3, #50	; 0x32
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <UART_SetConfig+0x434>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f4:	441c      	add	r4, r3
 80019f6:	f7ff fb9f 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009a      	lsls	r2, r3, #2
 8001a04:	441a      	add	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8001a10:	f7ff fb92 	bl	8001138 <HAL_RCC_GetPCLK1Freq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009a      	lsls	r2, r3, #2
 8001a1e:	441a      	add	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2a:	4a0c      	ldr	r2, [pc, #48]	; (8001a5c <UART_SetConfig+0x434>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	2264      	movs	r2, #100	; 0x64
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	1aeb      	subs	r3, r5, r3
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	3332      	adds	r3, #50	; 0x32
 8001a3e:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <UART_SetConfig+0x434>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	095b      	lsrs	r3, r3, #5
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4422      	add	r2, r4
 8001a50:	609a      	str	r2, [r3, #8]
}
 8001a52:	e7ff      	b.n	8001a54 <UART_SetConfig+0x42c>
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5c:	51eb851f 	.word	0x51eb851f

08001a60 <SystemClock_Config>:
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "hardwareinit.h"
#include "device.h"
void SystemClock_Config(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b094      	sub	sp, #80	; 0x50
 8001a64:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <SystemClock_Config+0xc0>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a2c      	ldr	r2, [pc, #176]	; (8001b20 <SystemClock_Config+0xc0>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <SystemClock_Config+0xc0>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	60bb      	str	r3, [r7, #8]
 8001a80:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <SystemClock_Config+0xc4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a26      	ldr	r2, [pc, #152]	; (8001b24 <SystemClock_Config+0xc4>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <SystemClock_Config+0xc4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ab6:	23a8      	movs	r3, #168	; 0xa8
 8001ab8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aba:	2302      	movs	r3, #2
 8001abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe ff40 	bl	800094c <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001acc:	230f      	movs	r3, #15
 8001ace:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ad8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001adc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae2:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	2105      	movs	r1, #5
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f988 	bl	8000e00 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001af0:	f7ff fb16 	bl	8001120 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <SystemClock_Config+0xc8>)
 8001af8:	fba3 2302 	umull	r2, r3, r3, r2
 8001afc:	099b      	lsrs	r3, r3, #6
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd09 	bl	8000516 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001b04:	2004      	movs	r0, #4
 8001b06:	f7fe fd13 	bl	8000530 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b12:	f7fe fcd6 	bl	80004c2 <HAL_NVIC_SetPriority>
}
 8001b16:	bf00      	nop
 8001b18:	3750      	adds	r7, #80	; 0x50
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000
 8001b28:	10624dd3 	.word	0x10624dd3

08001b2c <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	4b72      	ldr	r3, [pc, #456]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a71      	ldr	r2, [pc, #452]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b3c:	f043 0310 	orr.w	r3, r3, #16
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0310 	and.w	r3, r3, #16
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	4b6b      	ldr	r3, [pc, #428]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a6a      	ldr	r2, [pc, #424]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b64      	ldr	r3, [pc, #400]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b61      	ldr	r3, [pc, #388]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a5c      	ldr	r2, [pc, #368]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b5a      	ldr	r3, [pc, #360]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a55      	ldr	r2, [pc, #340]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b4c      	ldr	r3, [pc, #304]	; (8001d00 <MX_GPIO_Init+0x1d4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, bar3_Pin|bar5_Pin|bar4_Pin|bar7_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2174      	movs	r1, #116	; 0x74
 8001bde:	4849      	ldr	r0, [pc, #292]	; (8001d04 <MX_GPIO_Init+0x1d8>)
 8001be0:	f7fe fe82 	bl	80008e8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, bar6_Pin|bar9_Pin|bar8_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8001bea:	4847      	ldr	r0, [pc, #284]	; (8001d08 <MX_GPIO_Init+0x1dc>)
 8001bec:	f7fe fe7c 	bl	80008e8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, led0_Pin|led1_Pin|led2_Pin|led3_Pin
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f24f 0180 	movw	r1, #61568	; 0xf080
 8001bf6:	4845      	ldr	r0, [pc, #276]	; (8001d0c <MX_GPIO_Init+0x1e0>)
 8001bf8:	f7fe fe76 	bl	80008e8 <HAL_GPIO_WritePin>
	                          |bar0_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, bar2_Pin|bar1_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2130      	movs	r1, #48	; 0x30
 8001c00:	4843      	ldr	r0, [pc, #268]	; (8001d10 <MX_GPIO_Init+0x1e4>)
 8001c02:	f7fe fe71 	bl	80008e8 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : bar3_Pin bar5_Pin bar4_Pin bar7_Pin */
	  GPIO_InitStruct.Pin = bar3_Pin|bar5_Pin|bar4_Pin|bar7_Pin;
 8001c06:	2374      	movs	r3, #116	; 0x74
 8001c08:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4839      	ldr	r0, [pc, #228]	; (8001d04 <MX_GPIO_Init+0x1d8>)
 8001c1e:	f7fe fcb1 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pins : bar6_Pin bar9_Pin bar8_Pin buzzer_Pin */
	  GPIO_InitStruct.Pin = bar6_Pin|bar9_Pin|bar8_Pin|buzzer_Pin;
 8001c22:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 8001c26:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4833      	ldr	r0, [pc, #204]	; (8001d08 <MX_GPIO_Init+0x1dc>)
 8001c3c:	f7fe fca2 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pin : userButton_Pin */
	  GPIO_InitStruct.Pin = userButton_Pin;
 8001c40:	2301      	movs	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4830      	ldr	r0, [pc, #192]	; (8001d14 <MX_GPIO_Init+0x1e8>)
 8001c54:	f7fe fc96 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbUp_Pin pcRight_Pin */
	  GPIO_InitStruct.Pin = pbUp_Pin|pbRight_Pin;
 8001c58:	2330      	movs	r3, #48	; 0x30
 8001c5a:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4827      	ldr	r0, [pc, #156]	; (8001d08 <MX_GPIO_Init+0x1dc>)
 8001c6c:	f7fe fc8a 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbDown_Pin pbLeft_Pin dipSW3_Pin dipSW4_Pin */
	  GPIO_InitStruct.Pin = pbDown_Pin|pbLeft_Pin|dipSW3_Pin|dipSW4_Pin;
 8001c70:	f641 0303 	movw	r3, #6147	; 0x1803
 8001c74:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4822      	ldr	r0, [pc, #136]	; (8001d10 <MX_GPIO_Init+0x1e4>)
 8001c86:	f7fe fc7d 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbOk_Pin pbCancel_Pin */
	  GPIO_InitStruct.Pin = pbOk_Pin|pbCancel_Pin;
 8001c8a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001c8e:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c98:	f107 031c 	add.w	r3, r7, #28
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4819      	ldr	r0, [pc, #100]	; (8001d04 <MX_GPIO_Init+0x1d8>)
 8001ca0:	f7fe fc70 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pins : dipSW2_Pin dipSW1_Pin */
	  GPIO_InitStruct.Pin = dipSW2_Pin|dipSW1_Pin;
 8001ca4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ca8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4814      	ldr	r0, [pc, #80]	; (8001d0c <MX_GPIO_Init+0x1e0>)
 8001cba:	f7fe fc63 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pins : led0_Pin led1_Pin led2_Pin led3_Pin
	                           bar0_Pin */
	  GPIO_InitStruct.Pin = led0_Pin|led1_Pin|led2_Pin|led3_Pin
 8001cbe:	f24f 0380 	movw	r3, #61568	; 0xf080
 8001cc2:	61fb      	str	r3, [r7, #28]
	                          |bar0_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_GPIO_Init+0x1e0>)
 8001cd8:	f7fe fc54 	bl	8000584 <HAL_GPIO_Init>

	  /*Configure GPIO pins : bar2_Pin bar1_Pin */
	  GPIO_InitStruct.Pin = bar2_Pin|bar1_Pin;
 8001cdc:	2330      	movs	r3, #48	; 0x30
 8001cde:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4807      	ldr	r0, [pc, #28]	; (8001d10 <MX_GPIO_Init+0x1e4>)
 8001cf4:	f7fe fc46 	bl	8000584 <HAL_GPIO_Init>
}
 8001cf8:	bf00      	nop
 8001cfa:	3730      	adds	r7, #48	; 0x30
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020000 	.word	0x40020000

08001d18 <main>:
#include "hardwareinit.h"
#include "uart.h"
#include "seos.h"
			
int main(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	HAL_Init();
 8001d1c:	f7fe faa8 	bl	8000270 <HAL_Init>
	SystemClock_Config();
 8001d20:	f7ff fe9e 	bl	8001a60 <SystemClock_Config>
	MX_GPIO_Init();
 8001d24:	f7ff ff02 	bl	8001b2c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001d28:	f000 fa38 	bl	800219c <MX_USART2_UART_Init>
	SCH_init(1000);
 8001d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d30:	f000 f824 	bl	8001d7c <SCH_init>

	while(1){
 8001d34:	e7fe      	b.n	8001d34 <main+0x1c>
	...

08001d38 <TIM4_IRQHandler>:
#include "device.h"
#include "task.h"
TIM_HandleTypeDef TIM_Handle;

void TIM4_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_FLAG(&TIM_Handle, TIM_FLAG_UPDATE) != RESET)      //In case other interrupts are also running
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <TIM4_IRQHandler+0x3c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d112      	bne.n	8001d70 <TIM4_IRQHandler+0x38>
	{
		if (__HAL_TIM_GET_ITSTATUS(&TIM_Handle, TIM_IT_UPDATE) != RESET)
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <TIM4_IRQHandler+0x3c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d10b      	bne.n	8001d70 <TIM4_IRQHandler+0x38>
		{
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle, TIM_FLAG_UPDATE);
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <TIM4_IRQHandler+0x3c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0201 	mvn.w	r2, #1
 8001d60:	611a      	str	r2, [r3, #16]
			/*put your code here */
			HAL_GPIO_TogglePin(led0_GPIO_Port,led0_Pin);
 8001d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d66:	4804      	ldr	r0, [pc, #16]	; (8001d78 <TIM4_IRQHandler+0x40>)
 8001d68:	f7fe fdd7 	bl	800091a <HAL_GPIO_TogglePin>
			Task_Run();
 8001d6c:	f000 f918 	bl	8001fa0 <Task_Run>
		}
	}
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	200000a0 	.word	0x200000a0
 8001d78:	40020c00 	.word	0x40020c00

08001d7c <SCH_init>:

void SCH_init(uint32_t Periode){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	 *	then interval timer= periode*tick
	 *	Periode= IntervalTimer/Tick
	 *	Periode= 1ms/0.5ms
	 *	Periode=2
	 */
		__TIM4_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <SCH_init+0x68>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <SCH_init+0x68>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	6413      	str	r3, [r2, #64]	; 0x40
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <SCH_init+0x68>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
		TIM_Handle.Init.Prescaler = 42000-1;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <SCH_init+0x6c>)
 8001da2:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001da6:	605a      	str	r2, [r3, #4]
		TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <SCH_init+0x6c>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
		TIM_Handle.Init.Period = (Periode*2)-1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	3b01      	subs	r3, #1
 8001db4:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <SCH_init+0x6c>)
 8001db6:	60d3      	str	r3, [r2, #12]
		TIM_Handle.Instance = TIM4;   //Same timer whose clocks we enabled
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <SCH_init+0x6c>)
 8001dba:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <SCH_init+0x70>)
 8001dbc:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Init(&TIM_Handle);     // Init timer
 8001dbe:	480a      	ldr	r0, [pc, #40]	; (8001de8 <SCH_init+0x6c>)
 8001dc0:	f7ff f9fe 	bl	80011c0 <HAL_TIM_Base_Init>
		HAL_TIM_Base_Start_IT(&TIM_Handle); // start timer interrupts
 8001dc4:	4808      	ldr	r0, [pc, #32]	; (8001de8 <SCH_init+0x6c>)
 8001dc6:	f7ff fa30 	bl	800122a <HAL_TIM_Base_Start_IT>
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2100      	movs	r1, #0
 8001dce:	201e      	movs	r0, #30
 8001dd0:	f7fe fb77 	bl	80004c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dd4:	201e      	movs	r0, #30
 8001dd6:	f7fe fb90 	bl	80004fa <HAL_NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	200000a0 	.word	0x200000a0
 8001dec:	40000800 	.word	0x40000800

08001df0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001df4:	f7fe fa74 	bl	80002e0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8001df8:	f7fe fbb6 	bl	8000568 <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e12:	f3af 8000 	nop.w
 8001e16:	4601      	mov	r1, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <_read+0x12>
	}

return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_write>:

int _write(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e009      	b.n	8001e60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 f98f 	bl	8002178 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf1      	blt.n	8001e4c <_write+0x12>
	}
	return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <_sbrk+0x50>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <_sbrk+0x16>
		heap_end = &end;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_sbrk+0x50>)
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <_sbrk+0x54>)
 8001e88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <_sbrk+0x50>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <_sbrk+0x50>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	466a      	mov	r2, sp
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d907      	bls.n	8001eae <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001e9e:	f000 f9f1 	bl	8002284 <__errno>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eac:	e006      	b.n	8001ebc <_sbrk+0x48>
	}

	heap_end += incr;
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <_sbrk+0x50>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <_sbrk+0x50>)
 8001eb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000088 	.word	0x20000088
 8001ec8:	20000128 	.word	0x20000128

08001ecc <_close>:

int _close(int file)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef4:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <_isatty>:

int _isatty(int file)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f0c:	2301      	movs	r3, #1
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
	return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f38:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <SystemInit+0x60>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <SystemInit+0x60>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f48:	4b13      	ldr	r3, [pc, #76]	; (8001f98 <SystemInit+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <SystemInit+0x64>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <SystemInit+0x64>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <SystemInit+0x64>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a0e      	ldr	r2, [pc, #56]	; (8001f98 <SystemInit+0x64>)
 8001f60:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <SystemInit+0x64>)
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <SystemInit+0x68>)
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <SystemInit+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <SystemInit+0x64>)
 8001f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SystemInit+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SystemInit+0x60>)
 8001f84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f88:	609a      	str	r2, [r3, #8]
#endif
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	24003010 	.word	0x24003010

08001fa0 <Task_Run>:

void Task_Init(void){
	stateku=merah;
}

void Task_Run(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(pbLeft_GPIO_Port,pbLeft_Pin)==GPIO_PIN_RESET){
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	486b      	ldr	r0, [pc, #428]	; (8002154 <Task_Run+0x1b4>)
 8001fa8:	f7fe fc86 	bl	80008b8 <HAL_GPIO_ReadPin>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <Task_Run+0x18>
	 	BTN = 1;
 8001fb2:	4b69      	ldr	r3, [pc, #420]	; (8002158 <Task_Run+0x1b8>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
	}

	//	USARTPutStr("."); //current state
	switch(stateku)
 8001fb8:	4b68      	ldr	r3, [pc, #416]	; (800215c <Task_Run+0x1bc>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	f200 80c7 	bhi.w	8002150 <Task_Run+0x1b0>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <Task_Run+0x28>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	0800208f 	.word	0x0800208f
 8001fd0:	080020e9 	.word	0x080020e9
 8001fd4:	08002035 	.word	0x08002035
	{
	case merah:
	{

		MerahON;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	4860      	ldr	r0, [pc, #384]	; (8002160 <Task_Run+0x1c0>)
 8001fde:	f7fe fc83 	bl	80008e8 <HAL_GPIO_WritePin>
		KuningOFF;
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2120      	movs	r1, #32
 8001fe6:	485b      	ldr	r0, [pc, #364]	; (8002154 <Task_Run+0x1b4>)
 8001fe8:	f7fe fc7e 	bl	80008e8 <HAL_GPIO_WritePin>
		HijauOFF;
 8001fec:	2200      	movs	r2, #0
 8001fee:	2110      	movs	r1, #16
 8001ff0:	4858      	ldr	r0, [pc, #352]	; (8002154 <Task_Run+0x1b4>)
 8001ff2:	f7fe fc79 	bl	80008e8 <HAL_GPIO_WritePin>
		printf("Merah ON \n\r");
 8001ff6:	485b      	ldr	r0, [pc, #364]	; (8002164 <Task_Run+0x1c4>)
 8001ff8:	f000 f976 	bl	80022e8 <iprintf>
		if (++Time_in_state==LAMA_MERAH)
 8001ffc:	4b5a      	ldr	r3, [pc, #360]	; (8002168 <Task_Run+0x1c8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	4a59      	ldr	r2, [pc, #356]	; (8002168 <Task_Run+0x1c8>)
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b58      	ldr	r3, [pc, #352]	; (8002168 <Task_Run+0x1c8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b04      	cmp	r3, #4
 800200c:	f040 8099 	bne.w	8002142 <Task_Run+0x1a2>
		{
			if(BTN==0){
 8002010:	4b51      	ldr	r3, [pc, #324]	; (8002158 <Task_Run+0x1b8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <Task_Run+0x80>
				stateku=merah_kuning;
 8002018:	4b50      	ldr	r3, [pc, #320]	; (800215c <Task_Run+0x1bc>)
 800201a:	2203      	movs	r2, #3
 800201c:	701a      	strb	r2, [r3, #0]
 800201e:	e005      	b.n	800202c <Task_Run+0x8c>
			}
			else  {
				stateku=merah;
 8002020:	4b4e      	ldr	r3, [pc, #312]	; (800215c <Task_Run+0x1bc>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
				BTN=0;
 8002026:	4b4c      	ldr	r3, [pc, #304]	; (8002158 <Task_Run+0x1b8>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
			}
			Time_in_state=0;
 800202c:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <Task_Run+0x1c8>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
		}

		break;
 8002032:	e086      	b.n	8002142 <Task_Run+0x1a2>
	}

	case merah_kuning:
	{
		MerahON;
 8002034:	2201      	movs	r2, #1
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	4849      	ldr	r0, [pc, #292]	; (8002160 <Task_Run+0x1c0>)
 800203a:	f7fe fc55 	bl	80008e8 <HAL_GPIO_WritePin>
		KuningON;
 800203e:	2201      	movs	r2, #1
 8002040:	2120      	movs	r1, #32
 8002042:	4844      	ldr	r0, [pc, #272]	; (8002154 <Task_Run+0x1b4>)
 8002044:	f7fe fc50 	bl	80008e8 <HAL_GPIO_WritePin>
		HijauOFF;
 8002048:	2200      	movs	r2, #0
 800204a:	2110      	movs	r1, #16
 800204c:	4841      	ldr	r0, [pc, #260]	; (8002154 <Task_Run+0x1b4>)
 800204e:	f7fe fc4b 	bl	80008e8 <HAL_GPIO_WritePin>
		printf("Merah_kuning ON \n\r");
 8002052:	4846      	ldr	r0, [pc, #280]	; (800216c <Task_Run+0x1cc>)
 8002054:	f000 f948 	bl	80022e8 <iprintf>
		if (++Time_in_state==LAMA_MERAH_KUNING)
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <Task_Run+0x1c8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3301      	adds	r3, #1
 800205e:	4a42      	ldr	r2, [pc, #264]	; (8002168 <Task_Run+0x1c8>)
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <Task_Run+0x1c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d16d      	bne.n	8002146 <Task_Run+0x1a6>
		{
			if(BTN==0){
 800206a:	4b3b      	ldr	r3, [pc, #236]	; (8002158 <Task_Run+0x1b8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d103      	bne.n	800207a <Task_Run+0xda>
				stateku=hijau;
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <Task_Run+0x1bc>)
 8002074:	2202      	movs	r2, #2
 8002076:	701a      	strb	r2, [r3, #0]
 8002078:	e005      	b.n	8002086 <Task_Run+0xe6>
			}
			else {
				stateku=merah;
 800207a:	4b38      	ldr	r3, [pc, #224]	; (800215c <Task_Run+0x1bc>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
				BTN=0;
 8002080:	4b35      	ldr	r3, [pc, #212]	; (8002158 <Task_Run+0x1b8>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
			}
			Time_in_state=0;
 8002086:	4b38      	ldr	r3, [pc, #224]	; (8002168 <Task_Run+0x1c8>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

		}
		break;
 800208c:	e05b      	b.n	8002146 <Task_Run+0x1a6>
	}

	case kuning:
	{

		MerahOFF;
 800208e:	2200      	movs	r2, #0
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	4833      	ldr	r0, [pc, #204]	; (8002160 <Task_Run+0x1c0>)
 8002094:	f7fe fc28 	bl	80008e8 <HAL_GPIO_WritePin>
		KuningON;
 8002098:	2201      	movs	r2, #1
 800209a:	2120      	movs	r1, #32
 800209c:	482d      	ldr	r0, [pc, #180]	; (8002154 <Task_Run+0x1b4>)
 800209e:	f7fe fc23 	bl	80008e8 <HAL_GPIO_WritePin>
		HijauOFF;
 80020a2:	2200      	movs	r2, #0
 80020a4:	2110      	movs	r1, #16
 80020a6:	482b      	ldr	r0, [pc, #172]	; (8002154 <Task_Run+0x1b4>)
 80020a8:	f7fe fc1e 	bl	80008e8 <HAL_GPIO_WritePin>
		printf("Kuning ON \n\r");
 80020ac:	4830      	ldr	r0, [pc, #192]	; (8002170 <Task_Run+0x1d0>)
 80020ae:	f000 f91b 	bl	80022e8 <iprintf>
		if (++Time_in_state==LAMA_KUNING)
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <Task_Run+0x1c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	4a2b      	ldr	r2, [pc, #172]	; (8002168 <Task_Run+0x1c8>)
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <Task_Run+0x1c8>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d142      	bne.n	800214a <Task_Run+0x1aa>
		{
			if(BTN==0){
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <Task_Run+0x1b8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <Task_Run+0x134>


				stateku=merah;
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <Task_Run+0x1bc>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
 80020d2:	e005      	b.n	80020e0 <Task_Run+0x140>
			}
			else{
				stateku=merah;
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <Task_Run+0x1bc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
				BTN=0;
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <Task_Run+0x1b8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
			}
			Time_in_state=0;
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <Task_Run+0x1c8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
		}

		break;
 80020e6:	e030      	b.n	800214a <Task_Run+0x1aa>
	}

	case hijau:
	{
		MerahOFF;
 80020e8:	2200      	movs	r2, #0
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	481c      	ldr	r0, [pc, #112]	; (8002160 <Task_Run+0x1c0>)
 80020ee:	f7fe fbfb 	bl	80008e8 <HAL_GPIO_WritePin>
		KuningOFF;
 80020f2:	2200      	movs	r2, #0
 80020f4:	2120      	movs	r1, #32
 80020f6:	4817      	ldr	r0, [pc, #92]	; (8002154 <Task_Run+0x1b4>)
 80020f8:	f7fe fbf6 	bl	80008e8 <HAL_GPIO_WritePin>
		HijauON;
 80020fc:	2201      	movs	r2, #1
 80020fe:	2110      	movs	r1, #16
 8002100:	4814      	ldr	r0, [pc, #80]	; (8002154 <Task_Run+0x1b4>)
 8002102:	f7fe fbf1 	bl	80008e8 <HAL_GPIO_WritePin>
		printf("Hijau ON \n\r");
 8002106:	481b      	ldr	r0, [pc, #108]	; (8002174 <Task_Run+0x1d4>)
 8002108:	f000 f8ee 	bl	80022e8 <iprintf>
		if (++Time_in_state==LAMA_HIJAU)
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <Task_Run+0x1c8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3301      	adds	r3, #1
 8002112:	4a15      	ldr	r2, [pc, #84]	; (8002168 <Task_Run+0x1c8>)
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <Task_Run+0x1c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b06      	cmp	r3, #6
 800211c:	d117      	bne.n	800214e <Task_Run+0x1ae>
		{
			if(BTN==0){
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <Task_Run+0x1b8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <Task_Run+0x18e>
				stateku=kuning;
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <Task_Run+0x1bc>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e005      	b.n	800213a <Task_Run+0x19a>
			}
			else {
				stateku=merah;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <Task_Run+0x1bc>)
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
				BTN=0;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <Task_Run+0x1b8>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
			}
			Time_in_state=0;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <Task_Run+0x1c8>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
		}

		break;
 8002140:	e005      	b.n	800214e <Task_Run+0x1ae>
		break;
 8002142:	bf00      	nop
 8002144:	e004      	b.n	8002150 <Task_Run+0x1b0>
		break;
 8002146:	bf00      	nop
 8002148:	e002      	b.n	8002150 <Task_Run+0x1b0>
		break;
 800214a:	bf00      	nop
 800214c:	e000      	b.n	8002150 <Task_Run+0x1b0>
		break;
 800214e:	bf00      	nop
	}
	}

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40020400 	.word	0x40020400
 8002158:	20000090 	.word	0x20000090
 800215c:	200000dc 	.word	0x200000dc
 8002160:	40020c00 	.word	0x40020c00
 8002164:	080030c8 	.word	0x080030c8
 8002168:	2000008c 	.word	0x2000008c
 800216c:	080030d4 	.word	0x080030d4
 8002170:	080030e8 	.word	0x080030e8
 8002174:	080030f8 	.word	0x080030f8

08002178 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 8002180:	1d39      	adds	r1, r7, #4
 8002182:	2364      	movs	r3, #100	; 0x64
 8002184:	2201      	movs	r2, #1
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <__io_putchar+0x20>)
 8002188:	f7ff f96b 	bl	8001462 <HAL_UART_Transmit>
//    __HAL_UART_FLUSH_DRREGISTER(&huart2);
//    fflush(stdout); // This will flush any pending printf output
	return ch;
 800218c:	687b      	ldr	r3, [r7, #4]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200000e0 	.word	0x200000e0

0800219c <MX_USART2_UART_Init>:
/* USER CODE END PFP */

void MX_USART2_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_USART2_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <MX_USART2_UART_Init+0x84>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <MX_USART2_UART_Init+0x84>)
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <MX_USART2_UART_Init+0x84>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
	/**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021be:	230c      	movs	r3, #12
 80021c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ca:	2303      	movs	r3, #3
 80021cc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ce:	2307      	movs	r3, #7
 80021d0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4813      	ldr	r0, [pc, #76]	; (8002224 <MX_USART2_UART_Init+0x88>)
 80021d8:	f7fe f9d4 	bl	8000584 <HAL_GPIO_Init>
	huart2.Instance = USART2;
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <MX_USART2_UART_Init+0x90>)
 80021e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 80021e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 800220a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800220e:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 8002210:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_USART2_UART_Init+0x8c>)
 8002212:	f7ff f8cf 	bl	80013b4 <HAL_UART_Init>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	200000e0 	.word	0x200000e0
 800222c:	40004400 	.word	0x40004400

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002234:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002236:	e003      	b.n	8002240 <LoopCopyDataInit>

08002238 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800223a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800223c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800223e:	3104      	adds	r1, #4

08002240 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002244:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002246:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002248:	d3f6      	bcc.n	8002238 <CopyDataInit>
  ldr  r2, =_sbss
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800224c:	e002      	b.n	8002254 <LoopFillZerobss>

0800224e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800224e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002250:	f842 3b04 	str.w	r3, [r2], #4

08002254 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002256:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002258:	d3f9      	bcc.n	800224e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800225a:	f7ff fe6b 	bl	8001f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225e:	f000 f817 	bl	8002290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7ff fd59 	bl	8001d18 <main>
  bx  lr    
 8002266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002268:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800226c:	080031bc 	.word	0x080031bc
  ldr  r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002274:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8002278:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 800227c:	20000124 	.word	0x20000124

08002280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC_IRQHandler>
	...

08002284 <__errno>:
 8002284:	4b01      	ldr	r3, [pc, #4]	; (800228c <__errno+0x8>)
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000004 	.word	0x20000004

08002290 <__libc_init_array>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	4e0d      	ldr	r6, [pc, #52]	; (80022c8 <__libc_init_array+0x38>)
 8002294:	4c0d      	ldr	r4, [pc, #52]	; (80022cc <__libc_init_array+0x3c>)
 8002296:	1ba4      	subs	r4, r4, r6
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	2500      	movs	r5, #0
 800229c:	42a5      	cmp	r5, r4
 800229e:	d109      	bne.n	80022b4 <__libc_init_array+0x24>
 80022a0:	4e0b      	ldr	r6, [pc, #44]	; (80022d0 <__libc_init_array+0x40>)
 80022a2:	4c0c      	ldr	r4, [pc, #48]	; (80022d4 <__libc_init_array+0x44>)
 80022a4:	f000 ff7a 	bl	800319c <_init>
 80022a8:	1ba4      	subs	r4, r4, r6
 80022aa:	10a4      	asrs	r4, r4, #2
 80022ac:	2500      	movs	r5, #0
 80022ae:	42a5      	cmp	r5, r4
 80022b0:	d105      	bne.n	80022be <__libc_init_array+0x2e>
 80022b2:	bd70      	pop	{r4, r5, r6, pc}
 80022b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022b8:	4798      	blx	r3
 80022ba:	3501      	adds	r5, #1
 80022bc:	e7ee      	b.n	800229c <__libc_init_array+0xc>
 80022be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80022c2:	4798      	blx	r3
 80022c4:	3501      	adds	r5, #1
 80022c6:	e7f2      	b.n	80022ae <__libc_init_array+0x1e>
 80022c8:	080031b4 	.word	0x080031b4
 80022cc:	080031b4 	.word	0x080031b4
 80022d0:	080031b4 	.word	0x080031b4
 80022d4:	080031b8 	.word	0x080031b8

080022d8 <memset>:
 80022d8:	4402      	add	r2, r0
 80022da:	4603      	mov	r3, r0
 80022dc:	4293      	cmp	r3, r2
 80022de:	d100      	bne.n	80022e2 <memset+0xa>
 80022e0:	4770      	bx	lr
 80022e2:	f803 1b01 	strb.w	r1, [r3], #1
 80022e6:	e7f9      	b.n	80022dc <memset+0x4>

080022e8 <iprintf>:
 80022e8:	b40f      	push	{r0, r1, r2, r3}
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <iprintf+0x2c>)
 80022ec:	b513      	push	{r0, r1, r4, lr}
 80022ee:	681c      	ldr	r4, [r3, #0]
 80022f0:	b124      	cbz	r4, 80022fc <iprintf+0x14>
 80022f2:	69a3      	ldr	r3, [r4, #24]
 80022f4:	b913      	cbnz	r3, 80022fc <iprintf+0x14>
 80022f6:	4620      	mov	r0, r4
 80022f8:	f000 f84e 	bl	8002398 <__sinit>
 80022fc:	ab05      	add	r3, sp, #20
 80022fe:	9a04      	ldr	r2, [sp, #16]
 8002300:	68a1      	ldr	r1, [r4, #8]
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	4620      	mov	r0, r4
 8002306:	f000 f955 	bl	80025b4 <_vfiprintf_r>
 800230a:	b002      	add	sp, #8
 800230c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002310:	b004      	add	sp, #16
 8002312:	4770      	bx	lr
 8002314:	20000004 	.word	0x20000004

08002318 <std>:
 8002318:	2300      	movs	r3, #0
 800231a:	b510      	push	{r4, lr}
 800231c:	4604      	mov	r4, r0
 800231e:	e9c0 3300 	strd	r3, r3, [r0]
 8002322:	6083      	str	r3, [r0, #8]
 8002324:	8181      	strh	r1, [r0, #12]
 8002326:	6643      	str	r3, [r0, #100]	; 0x64
 8002328:	81c2      	strh	r2, [r0, #14]
 800232a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800232e:	6183      	str	r3, [r0, #24]
 8002330:	4619      	mov	r1, r3
 8002332:	2208      	movs	r2, #8
 8002334:	305c      	adds	r0, #92	; 0x5c
 8002336:	f7ff ffcf 	bl	80022d8 <memset>
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <std+0x38>)
 800233c:	6263      	str	r3, [r4, #36]	; 0x24
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <std+0x3c>)
 8002340:	62a3      	str	r3, [r4, #40]	; 0x28
 8002342:	4b05      	ldr	r3, [pc, #20]	; (8002358 <std+0x40>)
 8002344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <std+0x44>)
 8002348:	6224      	str	r4, [r4, #32]
 800234a:	6323      	str	r3, [r4, #48]	; 0x30
 800234c:	bd10      	pop	{r4, pc}
 800234e:	bf00      	nop
 8002350:	08002b11 	.word	0x08002b11
 8002354:	08002b33 	.word	0x08002b33
 8002358:	08002b6b 	.word	0x08002b6b
 800235c:	08002b8f 	.word	0x08002b8f

08002360 <_cleanup_r>:
 8002360:	4901      	ldr	r1, [pc, #4]	; (8002368 <_cleanup_r+0x8>)
 8002362:	f000 b885 	b.w	8002470 <_fwalk_reent>
 8002366:	bf00      	nop
 8002368:	08002e69 	.word	0x08002e69

0800236c <__sfmoreglue>:
 800236c:	b570      	push	{r4, r5, r6, lr}
 800236e:	1e4a      	subs	r2, r1, #1
 8002370:	2568      	movs	r5, #104	; 0x68
 8002372:	4355      	muls	r5, r2
 8002374:	460e      	mov	r6, r1
 8002376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800237a:	f000 f897 	bl	80024ac <_malloc_r>
 800237e:	4604      	mov	r4, r0
 8002380:	b140      	cbz	r0, 8002394 <__sfmoreglue+0x28>
 8002382:	2100      	movs	r1, #0
 8002384:	e9c0 1600 	strd	r1, r6, [r0]
 8002388:	300c      	adds	r0, #12
 800238a:	60a0      	str	r0, [r4, #8]
 800238c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002390:	f7ff ffa2 	bl	80022d8 <memset>
 8002394:	4620      	mov	r0, r4
 8002396:	bd70      	pop	{r4, r5, r6, pc}

08002398 <__sinit>:
 8002398:	6983      	ldr	r3, [r0, #24]
 800239a:	b510      	push	{r4, lr}
 800239c:	4604      	mov	r4, r0
 800239e:	bb33      	cbnz	r3, 80023ee <__sinit+0x56>
 80023a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80023a4:	6503      	str	r3, [r0, #80]	; 0x50
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <__sinit+0x58>)
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <__sinit+0x5c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6282      	str	r2, [r0, #40]	; 0x28
 80023ae:	4298      	cmp	r0, r3
 80023b0:	bf04      	itt	eq
 80023b2:	2301      	moveq	r3, #1
 80023b4:	6183      	streq	r3, [r0, #24]
 80023b6:	f000 f81f 	bl	80023f8 <__sfp>
 80023ba:	6060      	str	r0, [r4, #4]
 80023bc:	4620      	mov	r0, r4
 80023be:	f000 f81b 	bl	80023f8 <__sfp>
 80023c2:	60a0      	str	r0, [r4, #8]
 80023c4:	4620      	mov	r0, r4
 80023c6:	f000 f817 	bl	80023f8 <__sfp>
 80023ca:	2200      	movs	r2, #0
 80023cc:	60e0      	str	r0, [r4, #12]
 80023ce:	2104      	movs	r1, #4
 80023d0:	6860      	ldr	r0, [r4, #4]
 80023d2:	f7ff ffa1 	bl	8002318 <std>
 80023d6:	2201      	movs	r2, #1
 80023d8:	2109      	movs	r1, #9
 80023da:	68a0      	ldr	r0, [r4, #8]
 80023dc:	f7ff ff9c 	bl	8002318 <std>
 80023e0:	2202      	movs	r2, #2
 80023e2:	2112      	movs	r1, #18
 80023e4:	68e0      	ldr	r0, [r4, #12]
 80023e6:	f7ff ff97 	bl	8002318 <std>
 80023ea:	2301      	movs	r3, #1
 80023ec:	61a3      	str	r3, [r4, #24]
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	08003104 	.word	0x08003104
 80023f4:	08002361 	.word	0x08002361

080023f8 <__sfp>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <__sfp+0x70>)
 80023fc:	681e      	ldr	r6, [r3, #0]
 80023fe:	69b3      	ldr	r3, [r6, #24]
 8002400:	4607      	mov	r7, r0
 8002402:	b913      	cbnz	r3, 800240a <__sfp+0x12>
 8002404:	4630      	mov	r0, r6
 8002406:	f7ff ffc7 	bl	8002398 <__sinit>
 800240a:	3648      	adds	r6, #72	; 0x48
 800240c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002410:	3b01      	subs	r3, #1
 8002412:	d503      	bpl.n	800241c <__sfp+0x24>
 8002414:	6833      	ldr	r3, [r6, #0]
 8002416:	b133      	cbz	r3, 8002426 <__sfp+0x2e>
 8002418:	6836      	ldr	r6, [r6, #0]
 800241a:	e7f7      	b.n	800240c <__sfp+0x14>
 800241c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002420:	b16d      	cbz	r5, 800243e <__sfp+0x46>
 8002422:	3468      	adds	r4, #104	; 0x68
 8002424:	e7f4      	b.n	8002410 <__sfp+0x18>
 8002426:	2104      	movs	r1, #4
 8002428:	4638      	mov	r0, r7
 800242a:	f7ff ff9f 	bl	800236c <__sfmoreglue>
 800242e:	6030      	str	r0, [r6, #0]
 8002430:	2800      	cmp	r0, #0
 8002432:	d1f1      	bne.n	8002418 <__sfp+0x20>
 8002434:	230c      	movs	r3, #12
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	4604      	mov	r4, r0
 800243a:	4620      	mov	r0, r4
 800243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <__sfp+0x74>)
 8002440:	6665      	str	r5, [r4, #100]	; 0x64
 8002442:	e9c4 5500 	strd	r5, r5, [r4]
 8002446:	60a5      	str	r5, [r4, #8]
 8002448:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800244c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002450:	2208      	movs	r2, #8
 8002452:	4629      	mov	r1, r5
 8002454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002458:	f7ff ff3e 	bl	80022d8 <memset>
 800245c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002464:	e7e9      	b.n	800243a <__sfp+0x42>
 8002466:	bf00      	nop
 8002468:	08003104 	.word	0x08003104
 800246c:	ffff0001 	.word	0xffff0001

08002470 <_fwalk_reent>:
 8002470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002474:	4680      	mov	r8, r0
 8002476:	4689      	mov	r9, r1
 8002478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800247c:	2600      	movs	r6, #0
 800247e:	b914      	cbnz	r4, 8002486 <_fwalk_reent+0x16>
 8002480:	4630      	mov	r0, r6
 8002482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002486:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800248a:	3f01      	subs	r7, #1
 800248c:	d501      	bpl.n	8002492 <_fwalk_reent+0x22>
 800248e:	6824      	ldr	r4, [r4, #0]
 8002490:	e7f5      	b.n	800247e <_fwalk_reent+0xe>
 8002492:	89ab      	ldrh	r3, [r5, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d907      	bls.n	80024a8 <_fwalk_reent+0x38>
 8002498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800249c:	3301      	adds	r3, #1
 800249e:	d003      	beq.n	80024a8 <_fwalk_reent+0x38>
 80024a0:	4629      	mov	r1, r5
 80024a2:	4640      	mov	r0, r8
 80024a4:	47c8      	blx	r9
 80024a6:	4306      	orrs	r6, r0
 80024a8:	3568      	adds	r5, #104	; 0x68
 80024aa:	e7ee      	b.n	800248a <_fwalk_reent+0x1a>

080024ac <_malloc_r>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	1ccd      	adds	r5, r1, #3
 80024b0:	f025 0503 	bic.w	r5, r5, #3
 80024b4:	3508      	adds	r5, #8
 80024b6:	2d0c      	cmp	r5, #12
 80024b8:	bf38      	it	cc
 80024ba:	250c      	movcc	r5, #12
 80024bc:	2d00      	cmp	r5, #0
 80024be:	4606      	mov	r6, r0
 80024c0:	db01      	blt.n	80024c6 <_malloc_r+0x1a>
 80024c2:	42a9      	cmp	r1, r5
 80024c4:	d903      	bls.n	80024ce <_malloc_r+0x22>
 80024c6:	230c      	movs	r3, #12
 80024c8:	6033      	str	r3, [r6, #0]
 80024ca:	2000      	movs	r0, #0
 80024cc:	bd70      	pop	{r4, r5, r6, pc}
 80024ce:	f000 fd6b 	bl	8002fa8 <__malloc_lock>
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <_malloc_r+0xac>)
 80024d4:	6814      	ldr	r4, [r2, #0]
 80024d6:	4621      	mov	r1, r4
 80024d8:	b991      	cbnz	r1, 8002500 <_malloc_r+0x54>
 80024da:	4c20      	ldr	r4, [pc, #128]	; (800255c <_malloc_r+0xb0>)
 80024dc:	6823      	ldr	r3, [r4, #0]
 80024de:	b91b      	cbnz	r3, 80024e8 <_malloc_r+0x3c>
 80024e0:	4630      	mov	r0, r6
 80024e2:	f000 fb05 	bl	8002af0 <_sbrk_r>
 80024e6:	6020      	str	r0, [r4, #0]
 80024e8:	4629      	mov	r1, r5
 80024ea:	4630      	mov	r0, r6
 80024ec:	f000 fb00 	bl	8002af0 <_sbrk_r>
 80024f0:	1c43      	adds	r3, r0, #1
 80024f2:	d124      	bne.n	800253e <_malloc_r+0x92>
 80024f4:	230c      	movs	r3, #12
 80024f6:	6033      	str	r3, [r6, #0]
 80024f8:	4630      	mov	r0, r6
 80024fa:	f000 fd56 	bl	8002faa <__malloc_unlock>
 80024fe:	e7e4      	b.n	80024ca <_malloc_r+0x1e>
 8002500:	680b      	ldr	r3, [r1, #0]
 8002502:	1b5b      	subs	r3, r3, r5
 8002504:	d418      	bmi.n	8002538 <_malloc_r+0x8c>
 8002506:	2b0b      	cmp	r3, #11
 8002508:	d90f      	bls.n	800252a <_malloc_r+0x7e>
 800250a:	600b      	str	r3, [r1, #0]
 800250c:	50cd      	str	r5, [r1, r3]
 800250e:	18cc      	adds	r4, r1, r3
 8002510:	4630      	mov	r0, r6
 8002512:	f000 fd4a 	bl	8002faa <__malloc_unlock>
 8002516:	f104 000b 	add.w	r0, r4, #11
 800251a:	1d23      	adds	r3, r4, #4
 800251c:	f020 0007 	bic.w	r0, r0, #7
 8002520:	1ac3      	subs	r3, r0, r3
 8002522:	d0d3      	beq.n	80024cc <_malloc_r+0x20>
 8002524:	425a      	negs	r2, r3
 8002526:	50e2      	str	r2, [r4, r3]
 8002528:	e7d0      	b.n	80024cc <_malloc_r+0x20>
 800252a:	428c      	cmp	r4, r1
 800252c:	684b      	ldr	r3, [r1, #4]
 800252e:	bf16      	itet	ne
 8002530:	6063      	strne	r3, [r4, #4]
 8002532:	6013      	streq	r3, [r2, #0]
 8002534:	460c      	movne	r4, r1
 8002536:	e7eb      	b.n	8002510 <_malloc_r+0x64>
 8002538:	460c      	mov	r4, r1
 800253a:	6849      	ldr	r1, [r1, #4]
 800253c:	e7cc      	b.n	80024d8 <_malloc_r+0x2c>
 800253e:	1cc4      	adds	r4, r0, #3
 8002540:	f024 0403 	bic.w	r4, r4, #3
 8002544:	42a0      	cmp	r0, r4
 8002546:	d005      	beq.n	8002554 <_malloc_r+0xa8>
 8002548:	1a21      	subs	r1, r4, r0
 800254a:	4630      	mov	r0, r6
 800254c:	f000 fad0 	bl	8002af0 <_sbrk_r>
 8002550:	3001      	adds	r0, #1
 8002552:	d0cf      	beq.n	80024f4 <_malloc_r+0x48>
 8002554:	6025      	str	r5, [r4, #0]
 8002556:	e7db      	b.n	8002510 <_malloc_r+0x64>
 8002558:	20000094 	.word	0x20000094
 800255c:	20000098 	.word	0x20000098

08002560 <__sfputc_r>:
 8002560:	6893      	ldr	r3, [r2, #8]
 8002562:	3b01      	subs	r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	b410      	push	{r4}
 8002568:	6093      	str	r3, [r2, #8]
 800256a:	da08      	bge.n	800257e <__sfputc_r+0x1e>
 800256c:	6994      	ldr	r4, [r2, #24]
 800256e:	42a3      	cmp	r3, r4
 8002570:	db01      	blt.n	8002576 <__sfputc_r+0x16>
 8002572:	290a      	cmp	r1, #10
 8002574:	d103      	bne.n	800257e <__sfputc_r+0x1e>
 8002576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800257a:	f000 bb0d 	b.w	8002b98 <__swbuf_r>
 800257e:	6813      	ldr	r3, [r2, #0]
 8002580:	1c58      	adds	r0, r3, #1
 8002582:	6010      	str	r0, [r2, #0]
 8002584:	7019      	strb	r1, [r3, #0]
 8002586:	4608      	mov	r0, r1
 8002588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800258c:	4770      	bx	lr

0800258e <__sfputs_r>:
 800258e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002590:	4606      	mov	r6, r0
 8002592:	460f      	mov	r7, r1
 8002594:	4614      	mov	r4, r2
 8002596:	18d5      	adds	r5, r2, r3
 8002598:	42ac      	cmp	r4, r5
 800259a:	d101      	bne.n	80025a0 <__sfputs_r+0x12>
 800259c:	2000      	movs	r0, #0
 800259e:	e007      	b.n	80025b0 <__sfputs_r+0x22>
 80025a0:	463a      	mov	r2, r7
 80025a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025a6:	4630      	mov	r0, r6
 80025a8:	f7ff ffda 	bl	8002560 <__sfputc_r>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d1f3      	bne.n	8002598 <__sfputs_r+0xa>
 80025b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025b4 <_vfiprintf_r>:
 80025b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b8:	460c      	mov	r4, r1
 80025ba:	b09d      	sub	sp, #116	; 0x74
 80025bc:	4617      	mov	r7, r2
 80025be:	461d      	mov	r5, r3
 80025c0:	4606      	mov	r6, r0
 80025c2:	b118      	cbz	r0, 80025cc <_vfiprintf_r+0x18>
 80025c4:	6983      	ldr	r3, [r0, #24]
 80025c6:	b90b      	cbnz	r3, 80025cc <_vfiprintf_r+0x18>
 80025c8:	f7ff fee6 	bl	8002398 <__sinit>
 80025cc:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <_vfiprintf_r+0x20c>)
 80025ce:	429c      	cmp	r4, r3
 80025d0:	d158      	bne.n	8002684 <_vfiprintf_r+0xd0>
 80025d2:	6874      	ldr	r4, [r6, #4]
 80025d4:	89a3      	ldrh	r3, [r4, #12]
 80025d6:	0718      	lsls	r0, r3, #28
 80025d8:	d55e      	bpl.n	8002698 <_vfiprintf_r+0xe4>
 80025da:	6923      	ldr	r3, [r4, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d05b      	beq.n	8002698 <_vfiprintf_r+0xe4>
 80025e0:	2300      	movs	r3, #0
 80025e2:	9309      	str	r3, [sp, #36]	; 0x24
 80025e4:	2320      	movs	r3, #32
 80025e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025ea:	2330      	movs	r3, #48	; 0x30
 80025ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025f0:	9503      	str	r5, [sp, #12]
 80025f2:	f04f 0b01 	mov.w	fp, #1
 80025f6:	46b8      	mov	r8, r7
 80025f8:	4645      	mov	r5, r8
 80025fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80025fe:	b10b      	cbz	r3, 8002604 <_vfiprintf_r+0x50>
 8002600:	2b25      	cmp	r3, #37	; 0x25
 8002602:	d154      	bne.n	80026ae <_vfiprintf_r+0xfa>
 8002604:	ebb8 0a07 	subs.w	sl, r8, r7
 8002608:	d00b      	beq.n	8002622 <_vfiprintf_r+0x6e>
 800260a:	4653      	mov	r3, sl
 800260c:	463a      	mov	r2, r7
 800260e:	4621      	mov	r1, r4
 8002610:	4630      	mov	r0, r6
 8002612:	f7ff ffbc 	bl	800258e <__sfputs_r>
 8002616:	3001      	adds	r0, #1
 8002618:	f000 80c2 	beq.w	80027a0 <_vfiprintf_r+0x1ec>
 800261c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800261e:	4453      	add	r3, sl
 8002620:	9309      	str	r3, [sp, #36]	; 0x24
 8002622:	f898 3000 	ldrb.w	r3, [r8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80ba 	beq.w	80027a0 <_vfiprintf_r+0x1ec>
 800262c:	2300      	movs	r3, #0
 800262e:	f04f 32ff 	mov.w	r2, #4294967295
 8002632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002636:	9304      	str	r3, [sp, #16]
 8002638:	9307      	str	r3, [sp, #28]
 800263a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800263e:	931a      	str	r3, [sp, #104]	; 0x68
 8002640:	46a8      	mov	r8, r5
 8002642:	2205      	movs	r2, #5
 8002644:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002648:	485e      	ldr	r0, [pc, #376]	; (80027c4 <_vfiprintf_r+0x210>)
 800264a:	f7fd fdc1 	bl	80001d0 <memchr>
 800264e:	9b04      	ldr	r3, [sp, #16]
 8002650:	bb78      	cbnz	r0, 80026b2 <_vfiprintf_r+0xfe>
 8002652:	06d9      	lsls	r1, r3, #27
 8002654:	bf44      	itt	mi
 8002656:	2220      	movmi	r2, #32
 8002658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800265c:	071a      	lsls	r2, r3, #28
 800265e:	bf44      	itt	mi
 8002660:	222b      	movmi	r2, #43	; 0x2b
 8002662:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002666:	782a      	ldrb	r2, [r5, #0]
 8002668:	2a2a      	cmp	r2, #42	; 0x2a
 800266a:	d02a      	beq.n	80026c2 <_vfiprintf_r+0x10e>
 800266c:	9a07      	ldr	r2, [sp, #28]
 800266e:	46a8      	mov	r8, r5
 8002670:	2000      	movs	r0, #0
 8002672:	250a      	movs	r5, #10
 8002674:	4641      	mov	r1, r8
 8002676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800267a:	3b30      	subs	r3, #48	; 0x30
 800267c:	2b09      	cmp	r3, #9
 800267e:	d969      	bls.n	8002754 <_vfiprintf_r+0x1a0>
 8002680:	b360      	cbz	r0, 80026dc <_vfiprintf_r+0x128>
 8002682:	e024      	b.n	80026ce <_vfiprintf_r+0x11a>
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <_vfiprintf_r+0x214>)
 8002686:	429c      	cmp	r4, r3
 8002688:	d101      	bne.n	800268e <_vfiprintf_r+0xda>
 800268a:	68b4      	ldr	r4, [r6, #8]
 800268c:	e7a2      	b.n	80025d4 <_vfiprintf_r+0x20>
 800268e:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <_vfiprintf_r+0x218>)
 8002690:	429c      	cmp	r4, r3
 8002692:	bf08      	it	eq
 8002694:	68f4      	ldreq	r4, [r6, #12]
 8002696:	e79d      	b.n	80025d4 <_vfiprintf_r+0x20>
 8002698:	4621      	mov	r1, r4
 800269a:	4630      	mov	r0, r6
 800269c:	f000 fae0 	bl	8002c60 <__swsetup_r>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d09d      	beq.n	80025e0 <_vfiprintf_r+0x2c>
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	b01d      	add	sp, #116	; 0x74
 80026aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ae:	46a8      	mov	r8, r5
 80026b0:	e7a2      	b.n	80025f8 <_vfiprintf_r+0x44>
 80026b2:	4a44      	ldr	r2, [pc, #272]	; (80027c4 <_vfiprintf_r+0x210>)
 80026b4:	1a80      	subs	r0, r0, r2
 80026b6:	fa0b f000 	lsl.w	r0, fp, r0
 80026ba:	4318      	orrs	r0, r3
 80026bc:	9004      	str	r0, [sp, #16]
 80026be:	4645      	mov	r5, r8
 80026c0:	e7be      	b.n	8002640 <_vfiprintf_r+0x8c>
 80026c2:	9a03      	ldr	r2, [sp, #12]
 80026c4:	1d11      	adds	r1, r2, #4
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	9103      	str	r1, [sp, #12]
 80026ca:	2a00      	cmp	r2, #0
 80026cc:	db01      	blt.n	80026d2 <_vfiprintf_r+0x11e>
 80026ce:	9207      	str	r2, [sp, #28]
 80026d0:	e004      	b.n	80026dc <_vfiprintf_r+0x128>
 80026d2:	4252      	negs	r2, r2
 80026d4:	f043 0302 	orr.w	r3, r3, #2
 80026d8:	9207      	str	r2, [sp, #28]
 80026da:	9304      	str	r3, [sp, #16]
 80026dc:	f898 3000 	ldrb.w	r3, [r8]
 80026e0:	2b2e      	cmp	r3, #46	; 0x2e
 80026e2:	d10e      	bne.n	8002702 <_vfiprintf_r+0x14e>
 80026e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80026e8:	2b2a      	cmp	r3, #42	; 0x2a
 80026ea:	d138      	bne.n	800275e <_vfiprintf_r+0x1aa>
 80026ec:	9b03      	ldr	r3, [sp, #12]
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	9203      	str	r2, [sp, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bfb8      	it	lt
 80026f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80026fc:	f108 0802 	add.w	r8, r8, #2
 8002700:	9305      	str	r3, [sp, #20]
 8002702:	4d33      	ldr	r5, [pc, #204]	; (80027d0 <_vfiprintf_r+0x21c>)
 8002704:	f898 1000 	ldrb.w	r1, [r8]
 8002708:	2203      	movs	r2, #3
 800270a:	4628      	mov	r0, r5
 800270c:	f7fd fd60 	bl	80001d0 <memchr>
 8002710:	b140      	cbz	r0, 8002724 <_vfiprintf_r+0x170>
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	1b40      	subs	r0, r0, r5
 8002716:	fa03 f000 	lsl.w	r0, r3, r0
 800271a:	9b04      	ldr	r3, [sp, #16]
 800271c:	4303      	orrs	r3, r0
 800271e:	f108 0801 	add.w	r8, r8, #1
 8002722:	9304      	str	r3, [sp, #16]
 8002724:	f898 1000 	ldrb.w	r1, [r8]
 8002728:	482a      	ldr	r0, [pc, #168]	; (80027d4 <_vfiprintf_r+0x220>)
 800272a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800272e:	2206      	movs	r2, #6
 8002730:	f108 0701 	add.w	r7, r8, #1
 8002734:	f7fd fd4c 	bl	80001d0 <memchr>
 8002738:	2800      	cmp	r0, #0
 800273a:	d037      	beq.n	80027ac <_vfiprintf_r+0x1f8>
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <_vfiprintf_r+0x224>)
 800273e:	bb1b      	cbnz	r3, 8002788 <_vfiprintf_r+0x1d4>
 8002740:	9b03      	ldr	r3, [sp, #12]
 8002742:	3307      	adds	r3, #7
 8002744:	f023 0307 	bic.w	r3, r3, #7
 8002748:	3308      	adds	r3, #8
 800274a:	9303      	str	r3, [sp, #12]
 800274c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800274e:	444b      	add	r3, r9
 8002750:	9309      	str	r3, [sp, #36]	; 0x24
 8002752:	e750      	b.n	80025f6 <_vfiprintf_r+0x42>
 8002754:	fb05 3202 	mla	r2, r5, r2, r3
 8002758:	2001      	movs	r0, #1
 800275a:	4688      	mov	r8, r1
 800275c:	e78a      	b.n	8002674 <_vfiprintf_r+0xc0>
 800275e:	2300      	movs	r3, #0
 8002760:	f108 0801 	add.w	r8, r8, #1
 8002764:	9305      	str	r3, [sp, #20]
 8002766:	4619      	mov	r1, r3
 8002768:	250a      	movs	r5, #10
 800276a:	4640      	mov	r0, r8
 800276c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002770:	3a30      	subs	r2, #48	; 0x30
 8002772:	2a09      	cmp	r2, #9
 8002774:	d903      	bls.n	800277e <_vfiprintf_r+0x1ca>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0c3      	beq.n	8002702 <_vfiprintf_r+0x14e>
 800277a:	9105      	str	r1, [sp, #20]
 800277c:	e7c1      	b.n	8002702 <_vfiprintf_r+0x14e>
 800277e:	fb05 2101 	mla	r1, r5, r1, r2
 8002782:	2301      	movs	r3, #1
 8002784:	4680      	mov	r8, r0
 8002786:	e7f0      	b.n	800276a <_vfiprintf_r+0x1b6>
 8002788:	ab03      	add	r3, sp, #12
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4622      	mov	r2, r4
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <_vfiprintf_r+0x228>)
 8002790:	a904      	add	r1, sp, #16
 8002792:	4630      	mov	r0, r6
 8002794:	f3af 8000 	nop.w
 8002798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800279c:	4681      	mov	r9, r0
 800279e:	d1d5      	bne.n	800274c <_vfiprintf_r+0x198>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	065b      	lsls	r3, r3, #25
 80027a4:	f53f af7e 	bmi.w	80026a4 <_vfiprintf_r+0xf0>
 80027a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027aa:	e77d      	b.n	80026a8 <_vfiprintf_r+0xf4>
 80027ac:	ab03      	add	r3, sp, #12
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	4622      	mov	r2, r4
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <_vfiprintf_r+0x228>)
 80027b4:	a904      	add	r1, sp, #16
 80027b6:	4630      	mov	r0, r6
 80027b8:	f000 f888 	bl	80028cc <_printf_i>
 80027bc:	e7ec      	b.n	8002798 <_vfiprintf_r+0x1e4>
 80027be:	bf00      	nop
 80027c0:	08003128 	.word	0x08003128
 80027c4:	08003168 	.word	0x08003168
 80027c8:	08003148 	.word	0x08003148
 80027cc:	08003108 	.word	0x08003108
 80027d0:	0800316e 	.word	0x0800316e
 80027d4:	08003172 	.word	0x08003172
 80027d8:	00000000 	.word	0x00000000
 80027dc:	0800258f 	.word	0x0800258f

080027e0 <_printf_common>:
 80027e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	4691      	mov	r9, r2
 80027e6:	461f      	mov	r7, r3
 80027e8:	688a      	ldr	r2, [r1, #8]
 80027ea:	690b      	ldr	r3, [r1, #16]
 80027ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027f0:	4293      	cmp	r3, r2
 80027f2:	bfb8      	it	lt
 80027f4:	4613      	movlt	r3, r2
 80027f6:	f8c9 3000 	str.w	r3, [r9]
 80027fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027fe:	4606      	mov	r6, r0
 8002800:	460c      	mov	r4, r1
 8002802:	b112      	cbz	r2, 800280a <_printf_common+0x2a>
 8002804:	3301      	adds	r3, #1
 8002806:	f8c9 3000 	str.w	r3, [r9]
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	0699      	lsls	r1, r3, #26
 800280e:	bf42      	ittt	mi
 8002810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002814:	3302      	addmi	r3, #2
 8002816:	f8c9 3000 	strmi.w	r3, [r9]
 800281a:	6825      	ldr	r5, [r4, #0]
 800281c:	f015 0506 	ands.w	r5, r5, #6
 8002820:	d107      	bne.n	8002832 <_printf_common+0x52>
 8002822:	f104 0a19 	add.w	sl, r4, #25
 8002826:	68e3      	ldr	r3, [r4, #12]
 8002828:	f8d9 2000 	ldr.w	r2, [r9]
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	42ab      	cmp	r3, r5
 8002830:	dc28      	bgt.n	8002884 <_printf_common+0xa4>
 8002832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002836:	6822      	ldr	r2, [r4, #0]
 8002838:	3300      	adds	r3, #0
 800283a:	bf18      	it	ne
 800283c:	2301      	movne	r3, #1
 800283e:	0692      	lsls	r2, r2, #26
 8002840:	d42d      	bmi.n	800289e <_printf_common+0xbe>
 8002842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002846:	4639      	mov	r1, r7
 8002848:	4630      	mov	r0, r6
 800284a:	47c0      	blx	r8
 800284c:	3001      	adds	r0, #1
 800284e:	d020      	beq.n	8002892 <_printf_common+0xb2>
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	68e5      	ldr	r5, [r4, #12]
 8002854:	f8d9 2000 	ldr.w	r2, [r9]
 8002858:	f003 0306 	and.w	r3, r3, #6
 800285c:	2b04      	cmp	r3, #4
 800285e:	bf08      	it	eq
 8002860:	1aad      	subeq	r5, r5, r2
 8002862:	68a3      	ldr	r3, [r4, #8]
 8002864:	6922      	ldr	r2, [r4, #16]
 8002866:	bf0c      	ite	eq
 8002868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800286c:	2500      	movne	r5, #0
 800286e:	4293      	cmp	r3, r2
 8002870:	bfc4      	itt	gt
 8002872:	1a9b      	subgt	r3, r3, r2
 8002874:	18ed      	addgt	r5, r5, r3
 8002876:	f04f 0900 	mov.w	r9, #0
 800287a:	341a      	adds	r4, #26
 800287c:	454d      	cmp	r5, r9
 800287e:	d11a      	bne.n	80028b6 <_printf_common+0xd6>
 8002880:	2000      	movs	r0, #0
 8002882:	e008      	b.n	8002896 <_printf_common+0xb6>
 8002884:	2301      	movs	r3, #1
 8002886:	4652      	mov	r2, sl
 8002888:	4639      	mov	r1, r7
 800288a:	4630      	mov	r0, r6
 800288c:	47c0      	blx	r8
 800288e:	3001      	adds	r0, #1
 8002890:	d103      	bne.n	800289a <_printf_common+0xba>
 8002892:	f04f 30ff 	mov.w	r0, #4294967295
 8002896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289a:	3501      	adds	r5, #1
 800289c:	e7c3      	b.n	8002826 <_printf_common+0x46>
 800289e:	18e1      	adds	r1, r4, r3
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	2030      	movs	r0, #48	; 0x30
 80028a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a8:	4422      	add	r2, r4
 80028aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028b2:	3302      	adds	r3, #2
 80028b4:	e7c5      	b.n	8002842 <_printf_common+0x62>
 80028b6:	2301      	movs	r3, #1
 80028b8:	4622      	mov	r2, r4
 80028ba:	4639      	mov	r1, r7
 80028bc:	4630      	mov	r0, r6
 80028be:	47c0      	blx	r8
 80028c0:	3001      	adds	r0, #1
 80028c2:	d0e6      	beq.n	8002892 <_printf_common+0xb2>
 80028c4:	f109 0901 	add.w	r9, r9, #1
 80028c8:	e7d8      	b.n	800287c <_printf_common+0x9c>
	...

080028cc <_printf_i>:
 80028cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80028d4:	460c      	mov	r4, r1
 80028d6:	7e09      	ldrb	r1, [r1, #24]
 80028d8:	b085      	sub	sp, #20
 80028da:	296e      	cmp	r1, #110	; 0x6e
 80028dc:	4617      	mov	r7, r2
 80028de:	4606      	mov	r6, r0
 80028e0:	4698      	mov	r8, r3
 80028e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028e4:	f000 80b3 	beq.w	8002a4e <_printf_i+0x182>
 80028e8:	d822      	bhi.n	8002930 <_printf_i+0x64>
 80028ea:	2963      	cmp	r1, #99	; 0x63
 80028ec:	d036      	beq.n	800295c <_printf_i+0x90>
 80028ee:	d80a      	bhi.n	8002906 <_printf_i+0x3a>
 80028f0:	2900      	cmp	r1, #0
 80028f2:	f000 80b9 	beq.w	8002a68 <_printf_i+0x19c>
 80028f6:	2958      	cmp	r1, #88	; 0x58
 80028f8:	f000 8083 	beq.w	8002a02 <_printf_i+0x136>
 80028fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002900:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002904:	e032      	b.n	800296c <_printf_i+0xa0>
 8002906:	2964      	cmp	r1, #100	; 0x64
 8002908:	d001      	beq.n	800290e <_printf_i+0x42>
 800290a:	2969      	cmp	r1, #105	; 0x69
 800290c:	d1f6      	bne.n	80028fc <_printf_i+0x30>
 800290e:	6820      	ldr	r0, [r4, #0]
 8002910:	6813      	ldr	r3, [r2, #0]
 8002912:	0605      	lsls	r5, r0, #24
 8002914:	f103 0104 	add.w	r1, r3, #4
 8002918:	d52a      	bpl.n	8002970 <_printf_i+0xa4>
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6011      	str	r1, [r2, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	da03      	bge.n	800292a <_printf_i+0x5e>
 8002922:	222d      	movs	r2, #45	; 0x2d
 8002924:	425b      	negs	r3, r3
 8002926:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800292a:	486f      	ldr	r0, [pc, #444]	; (8002ae8 <_printf_i+0x21c>)
 800292c:	220a      	movs	r2, #10
 800292e:	e039      	b.n	80029a4 <_printf_i+0xd8>
 8002930:	2973      	cmp	r1, #115	; 0x73
 8002932:	f000 809d 	beq.w	8002a70 <_printf_i+0x1a4>
 8002936:	d808      	bhi.n	800294a <_printf_i+0x7e>
 8002938:	296f      	cmp	r1, #111	; 0x6f
 800293a:	d020      	beq.n	800297e <_printf_i+0xb2>
 800293c:	2970      	cmp	r1, #112	; 0x70
 800293e:	d1dd      	bne.n	80028fc <_printf_i+0x30>
 8002940:	6823      	ldr	r3, [r4, #0]
 8002942:	f043 0320 	orr.w	r3, r3, #32
 8002946:	6023      	str	r3, [r4, #0]
 8002948:	e003      	b.n	8002952 <_printf_i+0x86>
 800294a:	2975      	cmp	r1, #117	; 0x75
 800294c:	d017      	beq.n	800297e <_printf_i+0xb2>
 800294e:	2978      	cmp	r1, #120	; 0x78
 8002950:	d1d4      	bne.n	80028fc <_printf_i+0x30>
 8002952:	2378      	movs	r3, #120	; 0x78
 8002954:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002958:	4864      	ldr	r0, [pc, #400]	; (8002aec <_printf_i+0x220>)
 800295a:	e055      	b.n	8002a08 <_printf_i+0x13c>
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	1d19      	adds	r1, r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6011      	str	r1, [r2, #0]
 8002964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800296c:	2301      	movs	r3, #1
 800296e:	e08c      	b.n	8002a8a <_printf_i+0x1be>
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6011      	str	r1, [r2, #0]
 8002974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002978:	bf18      	it	ne
 800297a:	b21b      	sxthne	r3, r3
 800297c:	e7cf      	b.n	800291e <_printf_i+0x52>
 800297e:	6813      	ldr	r3, [r2, #0]
 8002980:	6825      	ldr	r5, [r4, #0]
 8002982:	1d18      	adds	r0, r3, #4
 8002984:	6010      	str	r0, [r2, #0]
 8002986:	0628      	lsls	r0, r5, #24
 8002988:	d501      	bpl.n	800298e <_printf_i+0xc2>
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	e002      	b.n	8002994 <_printf_i+0xc8>
 800298e:	0668      	lsls	r0, r5, #25
 8002990:	d5fb      	bpl.n	800298a <_printf_i+0xbe>
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	4854      	ldr	r0, [pc, #336]	; (8002ae8 <_printf_i+0x21c>)
 8002996:	296f      	cmp	r1, #111	; 0x6f
 8002998:	bf14      	ite	ne
 800299a:	220a      	movne	r2, #10
 800299c:	2208      	moveq	r2, #8
 800299e:	2100      	movs	r1, #0
 80029a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029a4:	6865      	ldr	r5, [r4, #4]
 80029a6:	60a5      	str	r5, [r4, #8]
 80029a8:	2d00      	cmp	r5, #0
 80029aa:	f2c0 8095 	blt.w	8002ad8 <_printf_i+0x20c>
 80029ae:	6821      	ldr	r1, [r4, #0]
 80029b0:	f021 0104 	bic.w	r1, r1, #4
 80029b4:	6021      	str	r1, [r4, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d13d      	bne.n	8002a36 <_printf_i+0x16a>
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	f040 808e 	bne.w	8002adc <_printf_i+0x210>
 80029c0:	4665      	mov	r5, ip
 80029c2:	2a08      	cmp	r2, #8
 80029c4:	d10b      	bne.n	80029de <_printf_i+0x112>
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	07db      	lsls	r3, r3, #31
 80029ca:	d508      	bpl.n	80029de <_printf_i+0x112>
 80029cc:	6923      	ldr	r3, [r4, #16]
 80029ce:	6862      	ldr	r2, [r4, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	bfde      	ittt	le
 80029d4:	2330      	movle	r3, #48	; 0x30
 80029d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029da:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029de:	ebac 0305 	sub.w	r3, ip, r5
 80029e2:	6123      	str	r3, [r4, #16]
 80029e4:	f8cd 8000 	str.w	r8, [sp]
 80029e8:	463b      	mov	r3, r7
 80029ea:	aa03      	add	r2, sp, #12
 80029ec:	4621      	mov	r1, r4
 80029ee:	4630      	mov	r0, r6
 80029f0:	f7ff fef6 	bl	80027e0 <_printf_common>
 80029f4:	3001      	adds	r0, #1
 80029f6:	d14d      	bne.n	8002a94 <_printf_i+0x1c8>
 80029f8:	f04f 30ff 	mov.w	r0, #4294967295
 80029fc:	b005      	add	sp, #20
 80029fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a02:	4839      	ldr	r0, [pc, #228]	; (8002ae8 <_printf_i+0x21c>)
 8002a04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002a08:	6813      	ldr	r3, [r2, #0]
 8002a0a:	6821      	ldr	r1, [r4, #0]
 8002a0c:	1d1d      	adds	r5, r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6015      	str	r5, [r2, #0]
 8002a12:	060a      	lsls	r2, r1, #24
 8002a14:	d50b      	bpl.n	8002a2e <_printf_i+0x162>
 8002a16:	07ca      	lsls	r2, r1, #31
 8002a18:	bf44      	itt	mi
 8002a1a:	f041 0120 	orrmi.w	r1, r1, #32
 8002a1e:	6021      	strmi	r1, [r4, #0]
 8002a20:	b91b      	cbnz	r3, 8002a2a <_printf_i+0x15e>
 8002a22:	6822      	ldr	r2, [r4, #0]
 8002a24:	f022 0220 	bic.w	r2, r2, #32
 8002a28:	6022      	str	r2, [r4, #0]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	e7b7      	b.n	800299e <_printf_i+0xd2>
 8002a2e:	064d      	lsls	r5, r1, #25
 8002a30:	bf48      	it	mi
 8002a32:	b29b      	uxthmi	r3, r3
 8002a34:	e7ef      	b.n	8002a16 <_printf_i+0x14a>
 8002a36:	4665      	mov	r5, ip
 8002a38:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a3c:	fb02 3311 	mls	r3, r2, r1, r3
 8002a40:	5cc3      	ldrb	r3, [r0, r3]
 8002a42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a46:	460b      	mov	r3, r1
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	d1f5      	bne.n	8002a38 <_printf_i+0x16c>
 8002a4c:	e7b9      	b.n	80029c2 <_printf_i+0xf6>
 8002a4e:	6813      	ldr	r3, [r2, #0]
 8002a50:	6825      	ldr	r5, [r4, #0]
 8002a52:	6961      	ldr	r1, [r4, #20]
 8002a54:	1d18      	adds	r0, r3, #4
 8002a56:	6010      	str	r0, [r2, #0]
 8002a58:	0628      	lsls	r0, r5, #24
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	d501      	bpl.n	8002a62 <_printf_i+0x196>
 8002a5e:	6019      	str	r1, [r3, #0]
 8002a60:	e002      	b.n	8002a68 <_printf_i+0x19c>
 8002a62:	066a      	lsls	r2, r5, #25
 8002a64:	d5fb      	bpl.n	8002a5e <_printf_i+0x192>
 8002a66:	8019      	strh	r1, [r3, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6123      	str	r3, [r4, #16]
 8002a6c:	4665      	mov	r5, ip
 8002a6e:	e7b9      	b.n	80029e4 <_printf_i+0x118>
 8002a70:	6813      	ldr	r3, [r2, #0]
 8002a72:	1d19      	adds	r1, r3, #4
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	681d      	ldr	r5, [r3, #0]
 8002a78:	6862      	ldr	r2, [r4, #4]
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f7fd fba7 	bl	80001d0 <memchr>
 8002a82:	b108      	cbz	r0, 8002a88 <_printf_i+0x1bc>
 8002a84:	1b40      	subs	r0, r0, r5
 8002a86:	6060      	str	r0, [r4, #4]
 8002a88:	6863      	ldr	r3, [r4, #4]
 8002a8a:	6123      	str	r3, [r4, #16]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a92:	e7a7      	b.n	80029e4 <_printf_i+0x118>
 8002a94:	6923      	ldr	r3, [r4, #16]
 8002a96:	462a      	mov	r2, r5
 8002a98:	4639      	mov	r1, r7
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	47c0      	blx	r8
 8002a9e:	3001      	adds	r0, #1
 8002aa0:	d0aa      	beq.n	80029f8 <_printf_i+0x12c>
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	079b      	lsls	r3, r3, #30
 8002aa6:	d413      	bmi.n	8002ad0 <_printf_i+0x204>
 8002aa8:	68e0      	ldr	r0, [r4, #12]
 8002aaa:	9b03      	ldr	r3, [sp, #12]
 8002aac:	4298      	cmp	r0, r3
 8002aae:	bfb8      	it	lt
 8002ab0:	4618      	movlt	r0, r3
 8002ab2:	e7a3      	b.n	80029fc <_printf_i+0x130>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	464a      	mov	r2, r9
 8002ab8:	4639      	mov	r1, r7
 8002aba:	4630      	mov	r0, r6
 8002abc:	47c0      	blx	r8
 8002abe:	3001      	adds	r0, #1
 8002ac0:	d09a      	beq.n	80029f8 <_printf_i+0x12c>
 8002ac2:	3501      	adds	r5, #1
 8002ac4:	68e3      	ldr	r3, [r4, #12]
 8002ac6:	9a03      	ldr	r2, [sp, #12]
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	42ab      	cmp	r3, r5
 8002acc:	dcf2      	bgt.n	8002ab4 <_printf_i+0x1e8>
 8002ace:	e7eb      	b.n	8002aa8 <_printf_i+0x1dc>
 8002ad0:	2500      	movs	r5, #0
 8002ad2:	f104 0919 	add.w	r9, r4, #25
 8002ad6:	e7f5      	b.n	8002ac4 <_printf_i+0x1f8>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ac      	bne.n	8002a36 <_printf_i+0x16a>
 8002adc:	7803      	ldrb	r3, [r0, #0]
 8002ade:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ae2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae6:	e76c      	b.n	80029c2 <_printf_i+0xf6>
 8002ae8:	08003179 	.word	0x08003179
 8002aec:	0800318a 	.word	0x0800318a

08002af0 <_sbrk_r>:
 8002af0:	b538      	push	{r3, r4, r5, lr}
 8002af2:	4c06      	ldr	r4, [pc, #24]	; (8002b0c <_sbrk_r+0x1c>)
 8002af4:	2300      	movs	r3, #0
 8002af6:	4605      	mov	r5, r0
 8002af8:	4608      	mov	r0, r1
 8002afa:	6023      	str	r3, [r4, #0]
 8002afc:	f7ff f9ba 	bl	8001e74 <_sbrk>
 8002b00:	1c43      	adds	r3, r0, #1
 8002b02:	d102      	bne.n	8002b0a <_sbrk_r+0x1a>
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	b103      	cbz	r3, 8002b0a <_sbrk_r+0x1a>
 8002b08:	602b      	str	r3, [r5, #0]
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
 8002b0c:	20000120 	.word	0x20000120

08002b10 <__sread>:
 8002b10:	b510      	push	{r4, lr}
 8002b12:	460c      	mov	r4, r1
 8002b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b18:	f000 fa96 	bl	8003048 <_read_r>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	bfab      	itete	ge
 8002b20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b22:	89a3      	ldrhlt	r3, [r4, #12]
 8002b24:	181b      	addge	r3, r3, r0
 8002b26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b2a:	bfac      	ite	ge
 8002b2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b2e:	81a3      	strhlt	r3, [r4, #12]
 8002b30:	bd10      	pop	{r4, pc}

08002b32 <__swrite>:
 8002b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b36:	461f      	mov	r7, r3
 8002b38:	898b      	ldrh	r3, [r1, #12]
 8002b3a:	05db      	lsls	r3, r3, #23
 8002b3c:	4605      	mov	r5, r0
 8002b3e:	460c      	mov	r4, r1
 8002b40:	4616      	mov	r6, r2
 8002b42:	d505      	bpl.n	8002b50 <__swrite+0x1e>
 8002b44:	2302      	movs	r3, #2
 8002b46:	2200      	movs	r2, #0
 8002b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b4c:	f000 f9b6 	bl	8002ebc <_lseek_r>
 8002b50:	89a3      	ldrh	r3, [r4, #12]
 8002b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b5a:	81a3      	strh	r3, [r4, #12]
 8002b5c:	4632      	mov	r2, r6
 8002b5e:	463b      	mov	r3, r7
 8002b60:	4628      	mov	r0, r5
 8002b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b66:	f000 b869 	b.w	8002c3c <_write_r>

08002b6a <__sseek>:
 8002b6a:	b510      	push	{r4, lr}
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b72:	f000 f9a3 	bl	8002ebc <_lseek_r>
 8002b76:	1c43      	adds	r3, r0, #1
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	bf15      	itete	ne
 8002b7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b86:	81a3      	strheq	r3, [r4, #12]
 8002b88:	bf18      	it	ne
 8002b8a:	81a3      	strhne	r3, [r4, #12]
 8002b8c:	bd10      	pop	{r4, pc}

08002b8e <__sclose>:
 8002b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b92:	f000 b8d3 	b.w	8002d3c <_close_r>
	...

08002b98 <__swbuf_r>:
 8002b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9a:	460e      	mov	r6, r1
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	b118      	cbz	r0, 8002baa <__swbuf_r+0x12>
 8002ba2:	6983      	ldr	r3, [r0, #24]
 8002ba4:	b90b      	cbnz	r3, 8002baa <__swbuf_r+0x12>
 8002ba6:	f7ff fbf7 	bl	8002398 <__sinit>
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <__swbuf_r+0x98>)
 8002bac:	429c      	cmp	r4, r3
 8002bae:	d12a      	bne.n	8002c06 <__swbuf_r+0x6e>
 8002bb0:	686c      	ldr	r4, [r5, #4]
 8002bb2:	69a3      	ldr	r3, [r4, #24]
 8002bb4:	60a3      	str	r3, [r4, #8]
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	071a      	lsls	r2, r3, #28
 8002bba:	d52e      	bpl.n	8002c1a <__swbuf_r+0x82>
 8002bbc:	6923      	ldr	r3, [r4, #16]
 8002bbe:	b363      	cbz	r3, 8002c1a <__swbuf_r+0x82>
 8002bc0:	6923      	ldr	r3, [r4, #16]
 8002bc2:	6820      	ldr	r0, [r4, #0]
 8002bc4:	1ac0      	subs	r0, r0, r3
 8002bc6:	6963      	ldr	r3, [r4, #20]
 8002bc8:	b2f6      	uxtb	r6, r6
 8002bca:	4283      	cmp	r3, r0
 8002bcc:	4637      	mov	r7, r6
 8002bce:	dc04      	bgt.n	8002bda <__swbuf_r+0x42>
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	f000 f948 	bl	8002e68 <_fflush_r>
 8002bd8:	bb28      	cbnz	r0, 8002c26 <__swbuf_r+0x8e>
 8002bda:	68a3      	ldr	r3, [r4, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60a3      	str	r3, [r4, #8]
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	6022      	str	r2, [r4, #0]
 8002be6:	701e      	strb	r6, [r3, #0]
 8002be8:	6963      	ldr	r3, [r4, #20]
 8002bea:	3001      	adds	r0, #1
 8002bec:	4283      	cmp	r3, r0
 8002bee:	d004      	beq.n	8002bfa <__swbuf_r+0x62>
 8002bf0:	89a3      	ldrh	r3, [r4, #12]
 8002bf2:	07db      	lsls	r3, r3, #31
 8002bf4:	d519      	bpl.n	8002c2a <__swbuf_r+0x92>
 8002bf6:	2e0a      	cmp	r6, #10
 8002bf8:	d117      	bne.n	8002c2a <__swbuf_r+0x92>
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	f000 f933 	bl	8002e68 <_fflush_r>
 8002c02:	b190      	cbz	r0, 8002c2a <__swbuf_r+0x92>
 8002c04:	e00f      	b.n	8002c26 <__swbuf_r+0x8e>
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <__swbuf_r+0x9c>)
 8002c08:	429c      	cmp	r4, r3
 8002c0a:	d101      	bne.n	8002c10 <__swbuf_r+0x78>
 8002c0c:	68ac      	ldr	r4, [r5, #8]
 8002c0e:	e7d0      	b.n	8002bb2 <__swbuf_r+0x1a>
 8002c10:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <__swbuf_r+0xa0>)
 8002c12:	429c      	cmp	r4, r3
 8002c14:	bf08      	it	eq
 8002c16:	68ec      	ldreq	r4, [r5, #12]
 8002c18:	e7cb      	b.n	8002bb2 <__swbuf_r+0x1a>
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	f000 f81f 	bl	8002c60 <__swsetup_r>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d0cc      	beq.n	8002bc0 <__swbuf_r+0x28>
 8002c26:	f04f 37ff 	mov.w	r7, #4294967295
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	08003128 	.word	0x08003128
 8002c34:	08003148 	.word	0x08003148
 8002c38:	08003108 	.word	0x08003108

08002c3c <_write_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4c07      	ldr	r4, [pc, #28]	; (8002c5c <_write_r+0x20>)
 8002c40:	4605      	mov	r5, r0
 8002c42:	4608      	mov	r0, r1
 8002c44:	4611      	mov	r1, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	6022      	str	r2, [r4, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f7ff f8f5 	bl	8001e3a <_write>
 8002c50:	1c43      	adds	r3, r0, #1
 8002c52:	d102      	bne.n	8002c5a <_write_r+0x1e>
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	b103      	cbz	r3, 8002c5a <_write_r+0x1e>
 8002c58:	602b      	str	r3, [r5, #0]
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	20000120 	.word	0x20000120

08002c60 <__swsetup_r>:
 8002c60:	4b32      	ldr	r3, [pc, #200]	; (8002d2c <__swsetup_r+0xcc>)
 8002c62:	b570      	push	{r4, r5, r6, lr}
 8002c64:	681d      	ldr	r5, [r3, #0]
 8002c66:	4606      	mov	r6, r0
 8002c68:	460c      	mov	r4, r1
 8002c6a:	b125      	cbz	r5, 8002c76 <__swsetup_r+0x16>
 8002c6c:	69ab      	ldr	r3, [r5, #24]
 8002c6e:	b913      	cbnz	r3, 8002c76 <__swsetup_r+0x16>
 8002c70:	4628      	mov	r0, r5
 8002c72:	f7ff fb91 	bl	8002398 <__sinit>
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <__swsetup_r+0xd0>)
 8002c78:	429c      	cmp	r4, r3
 8002c7a:	d10f      	bne.n	8002c9c <__swsetup_r+0x3c>
 8002c7c:	686c      	ldr	r4, [r5, #4]
 8002c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	0715      	lsls	r5, r2, #28
 8002c86:	d42c      	bmi.n	8002ce2 <__swsetup_r+0x82>
 8002c88:	06d0      	lsls	r0, r2, #27
 8002c8a:	d411      	bmi.n	8002cb0 <__swsetup_r+0x50>
 8002c8c:	2209      	movs	r2, #9
 8002c8e:	6032      	str	r2, [r6, #0]
 8002c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c94:	81a3      	strh	r3, [r4, #12]
 8002c96:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9a:	e03e      	b.n	8002d1a <__swsetup_r+0xba>
 8002c9c:	4b25      	ldr	r3, [pc, #148]	; (8002d34 <__swsetup_r+0xd4>)
 8002c9e:	429c      	cmp	r4, r3
 8002ca0:	d101      	bne.n	8002ca6 <__swsetup_r+0x46>
 8002ca2:	68ac      	ldr	r4, [r5, #8]
 8002ca4:	e7eb      	b.n	8002c7e <__swsetup_r+0x1e>
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <__swsetup_r+0xd8>)
 8002ca8:	429c      	cmp	r4, r3
 8002caa:	bf08      	it	eq
 8002cac:	68ec      	ldreq	r4, [r5, #12]
 8002cae:	e7e6      	b.n	8002c7e <__swsetup_r+0x1e>
 8002cb0:	0751      	lsls	r1, r2, #29
 8002cb2:	d512      	bpl.n	8002cda <__swsetup_r+0x7a>
 8002cb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cb6:	b141      	cbz	r1, 8002cca <__swsetup_r+0x6a>
 8002cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002cbc:	4299      	cmp	r1, r3
 8002cbe:	d002      	beq.n	8002cc6 <__swsetup_r+0x66>
 8002cc0:	4630      	mov	r0, r6
 8002cc2:	f000 f973 	bl	8002fac <_free_r>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	6363      	str	r3, [r4, #52]	; 0x34
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002cd0:	81a3      	strh	r3, [r4, #12]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	6063      	str	r3, [r4, #4]
 8002cd6:	6923      	ldr	r3, [r4, #16]
 8002cd8:	6023      	str	r3, [r4, #0]
 8002cda:	89a3      	ldrh	r3, [r4, #12]
 8002cdc:	f043 0308 	orr.w	r3, r3, #8
 8002ce0:	81a3      	strh	r3, [r4, #12]
 8002ce2:	6923      	ldr	r3, [r4, #16]
 8002ce4:	b94b      	cbnz	r3, 8002cfa <__swsetup_r+0x9a>
 8002ce6:	89a3      	ldrh	r3, [r4, #12]
 8002ce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf0:	d003      	beq.n	8002cfa <__swsetup_r+0x9a>
 8002cf2:	4621      	mov	r1, r4
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	f000 f917 	bl	8002f28 <__smakebuf_r>
 8002cfa:	89a2      	ldrh	r2, [r4, #12]
 8002cfc:	f012 0301 	ands.w	r3, r2, #1
 8002d00:	d00c      	beq.n	8002d1c <__swsetup_r+0xbc>
 8002d02:	2300      	movs	r3, #0
 8002d04:	60a3      	str	r3, [r4, #8]
 8002d06:	6963      	ldr	r3, [r4, #20]
 8002d08:	425b      	negs	r3, r3
 8002d0a:	61a3      	str	r3, [r4, #24]
 8002d0c:	6923      	ldr	r3, [r4, #16]
 8002d0e:	b953      	cbnz	r3, 8002d26 <__swsetup_r+0xc6>
 8002d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002d18:	d1ba      	bne.n	8002c90 <__swsetup_r+0x30>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	0792      	lsls	r2, r2, #30
 8002d1e:	bf58      	it	pl
 8002d20:	6963      	ldrpl	r3, [r4, #20]
 8002d22:	60a3      	str	r3, [r4, #8]
 8002d24:	e7f2      	b.n	8002d0c <__swsetup_r+0xac>
 8002d26:	2000      	movs	r0, #0
 8002d28:	e7f7      	b.n	8002d1a <__swsetup_r+0xba>
 8002d2a:	bf00      	nop
 8002d2c:	20000004 	.word	0x20000004
 8002d30:	08003128 	.word	0x08003128
 8002d34:	08003148 	.word	0x08003148
 8002d38:	08003108 	.word	0x08003108

08002d3c <_close_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4c06      	ldr	r4, [pc, #24]	; (8002d58 <_close_r+0x1c>)
 8002d40:	2300      	movs	r3, #0
 8002d42:	4605      	mov	r5, r0
 8002d44:	4608      	mov	r0, r1
 8002d46:	6023      	str	r3, [r4, #0]
 8002d48:	f7ff f8c0 	bl	8001ecc <_close>
 8002d4c:	1c43      	adds	r3, r0, #1
 8002d4e:	d102      	bne.n	8002d56 <_close_r+0x1a>
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	b103      	cbz	r3, 8002d56 <_close_r+0x1a>
 8002d54:	602b      	str	r3, [r5, #0]
 8002d56:	bd38      	pop	{r3, r4, r5, pc}
 8002d58:	20000120 	.word	0x20000120

08002d5c <__sflush_r>:
 8002d5c:	898a      	ldrh	r2, [r1, #12]
 8002d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d62:	4605      	mov	r5, r0
 8002d64:	0710      	lsls	r0, r2, #28
 8002d66:	460c      	mov	r4, r1
 8002d68:	d458      	bmi.n	8002e1c <__sflush_r+0xc0>
 8002d6a:	684b      	ldr	r3, [r1, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dc05      	bgt.n	8002d7c <__sflush_r+0x20>
 8002d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	dc02      	bgt.n	8002d7c <__sflush_r+0x20>
 8002d76:	2000      	movs	r0, #0
 8002d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d7e:	2e00      	cmp	r6, #0
 8002d80:	d0f9      	beq.n	8002d76 <__sflush_r+0x1a>
 8002d82:	2300      	movs	r3, #0
 8002d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d88:	682f      	ldr	r7, [r5, #0]
 8002d8a:	6a21      	ldr	r1, [r4, #32]
 8002d8c:	602b      	str	r3, [r5, #0]
 8002d8e:	d032      	beq.n	8002df6 <__sflush_r+0x9a>
 8002d90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	075a      	lsls	r2, r3, #29
 8002d96:	d505      	bpl.n	8002da4 <__sflush_r+0x48>
 8002d98:	6863      	ldr	r3, [r4, #4]
 8002d9a:	1ac0      	subs	r0, r0, r3
 8002d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d9e:	b10b      	cbz	r3, 8002da4 <__sflush_r+0x48>
 8002da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002da2:	1ac0      	subs	r0, r0, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	4602      	mov	r2, r0
 8002da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002daa:	6a21      	ldr	r1, [r4, #32]
 8002dac:	4628      	mov	r0, r5
 8002dae:	47b0      	blx	r6
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	d106      	bne.n	8002dc4 <__sflush_r+0x68>
 8002db6:	6829      	ldr	r1, [r5, #0]
 8002db8:	291d      	cmp	r1, #29
 8002dba:	d848      	bhi.n	8002e4e <__sflush_r+0xf2>
 8002dbc:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <__sflush_r+0x108>)
 8002dbe:	40ca      	lsrs	r2, r1
 8002dc0:	07d6      	lsls	r6, r2, #31
 8002dc2:	d544      	bpl.n	8002e4e <__sflush_r+0xf2>
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	6062      	str	r2, [r4, #4]
 8002dc8:	04d9      	lsls	r1, r3, #19
 8002dca:	6922      	ldr	r2, [r4, #16]
 8002dcc:	6022      	str	r2, [r4, #0]
 8002dce:	d504      	bpl.n	8002dda <__sflush_r+0x7e>
 8002dd0:	1c42      	adds	r2, r0, #1
 8002dd2:	d101      	bne.n	8002dd8 <__sflush_r+0x7c>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	b903      	cbnz	r3, 8002dda <__sflush_r+0x7e>
 8002dd8:	6560      	str	r0, [r4, #84]	; 0x54
 8002dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ddc:	602f      	str	r7, [r5, #0]
 8002dde:	2900      	cmp	r1, #0
 8002de0:	d0c9      	beq.n	8002d76 <__sflush_r+0x1a>
 8002de2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002de6:	4299      	cmp	r1, r3
 8002de8:	d002      	beq.n	8002df0 <__sflush_r+0x94>
 8002dea:	4628      	mov	r0, r5
 8002dec:	f000 f8de 	bl	8002fac <_free_r>
 8002df0:	2000      	movs	r0, #0
 8002df2:	6360      	str	r0, [r4, #52]	; 0x34
 8002df4:	e7c0      	b.n	8002d78 <__sflush_r+0x1c>
 8002df6:	2301      	movs	r3, #1
 8002df8:	4628      	mov	r0, r5
 8002dfa:	47b0      	blx	r6
 8002dfc:	1c41      	adds	r1, r0, #1
 8002dfe:	d1c8      	bne.n	8002d92 <__sflush_r+0x36>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0c5      	beq.n	8002d92 <__sflush_r+0x36>
 8002e06:	2b1d      	cmp	r3, #29
 8002e08:	d001      	beq.n	8002e0e <__sflush_r+0xb2>
 8002e0a:	2b16      	cmp	r3, #22
 8002e0c:	d101      	bne.n	8002e12 <__sflush_r+0xb6>
 8002e0e:	602f      	str	r7, [r5, #0]
 8002e10:	e7b1      	b.n	8002d76 <__sflush_r+0x1a>
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e18:	81a3      	strh	r3, [r4, #12]
 8002e1a:	e7ad      	b.n	8002d78 <__sflush_r+0x1c>
 8002e1c:	690f      	ldr	r7, [r1, #16]
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	d0a9      	beq.n	8002d76 <__sflush_r+0x1a>
 8002e22:	0793      	lsls	r3, r2, #30
 8002e24:	680e      	ldr	r6, [r1, #0]
 8002e26:	bf08      	it	eq
 8002e28:	694b      	ldreq	r3, [r1, #20]
 8002e2a:	600f      	str	r7, [r1, #0]
 8002e2c:	bf18      	it	ne
 8002e2e:	2300      	movne	r3, #0
 8002e30:	eba6 0807 	sub.w	r8, r6, r7
 8002e34:	608b      	str	r3, [r1, #8]
 8002e36:	f1b8 0f00 	cmp.w	r8, #0
 8002e3a:	dd9c      	ble.n	8002d76 <__sflush_r+0x1a>
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	463a      	mov	r2, r7
 8002e40:	6a21      	ldr	r1, [r4, #32]
 8002e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002e44:	4628      	mov	r0, r5
 8002e46:	47b0      	blx	r6
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	dc06      	bgt.n	8002e5a <__sflush_r+0xfe>
 8002e4c:	89a3      	ldrh	r3, [r4, #12]
 8002e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e52:	81a3      	strh	r3, [r4, #12]
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	e78e      	b.n	8002d78 <__sflush_r+0x1c>
 8002e5a:	4407      	add	r7, r0
 8002e5c:	eba8 0800 	sub.w	r8, r8, r0
 8002e60:	e7e9      	b.n	8002e36 <__sflush_r+0xda>
 8002e62:	bf00      	nop
 8002e64:	20400001 	.word	0x20400001

08002e68 <_fflush_r>:
 8002e68:	b538      	push	{r3, r4, r5, lr}
 8002e6a:	690b      	ldr	r3, [r1, #16]
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	b1db      	cbz	r3, 8002eaa <_fflush_r+0x42>
 8002e72:	b118      	cbz	r0, 8002e7c <_fflush_r+0x14>
 8002e74:	6983      	ldr	r3, [r0, #24]
 8002e76:	b90b      	cbnz	r3, 8002e7c <_fflush_r+0x14>
 8002e78:	f7ff fa8e 	bl	8002398 <__sinit>
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <_fflush_r+0x48>)
 8002e7e:	429c      	cmp	r4, r3
 8002e80:	d109      	bne.n	8002e96 <_fflush_r+0x2e>
 8002e82:	686c      	ldr	r4, [r5, #4]
 8002e84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e88:	b17b      	cbz	r3, 8002eaa <_fflush_r+0x42>
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e92:	f7ff bf63 	b.w	8002d5c <__sflush_r>
 8002e96:	4b07      	ldr	r3, [pc, #28]	; (8002eb4 <_fflush_r+0x4c>)
 8002e98:	429c      	cmp	r4, r3
 8002e9a:	d101      	bne.n	8002ea0 <_fflush_r+0x38>
 8002e9c:	68ac      	ldr	r4, [r5, #8]
 8002e9e:	e7f1      	b.n	8002e84 <_fflush_r+0x1c>
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <_fflush_r+0x50>)
 8002ea2:	429c      	cmp	r4, r3
 8002ea4:	bf08      	it	eq
 8002ea6:	68ec      	ldreq	r4, [r5, #12]
 8002ea8:	e7ec      	b.n	8002e84 <_fflush_r+0x1c>
 8002eaa:	2000      	movs	r0, #0
 8002eac:	bd38      	pop	{r3, r4, r5, pc}
 8002eae:	bf00      	nop
 8002eb0:	08003128 	.word	0x08003128
 8002eb4:	08003148 	.word	0x08003148
 8002eb8:	08003108 	.word	0x08003108

08002ebc <_lseek_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4c07      	ldr	r4, [pc, #28]	; (8002edc <_lseek_r+0x20>)
 8002ec0:	4605      	mov	r5, r0
 8002ec2:	4608      	mov	r0, r1
 8002ec4:	4611      	mov	r1, r2
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	6022      	str	r2, [r4, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	f7ff f825 	bl	8001f1a <_lseek>
 8002ed0:	1c43      	adds	r3, r0, #1
 8002ed2:	d102      	bne.n	8002eda <_lseek_r+0x1e>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	b103      	cbz	r3, 8002eda <_lseek_r+0x1e>
 8002ed8:	602b      	str	r3, [r5, #0]
 8002eda:	bd38      	pop	{r3, r4, r5, pc}
 8002edc:	20000120 	.word	0x20000120

08002ee0 <__swhatbuf_r>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	460e      	mov	r6, r1
 8002ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee8:	2900      	cmp	r1, #0
 8002eea:	b096      	sub	sp, #88	; 0x58
 8002eec:	4614      	mov	r4, r2
 8002eee:	461d      	mov	r5, r3
 8002ef0:	da07      	bge.n	8002f02 <__swhatbuf_r+0x22>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	602b      	str	r3, [r5, #0]
 8002ef6:	89b3      	ldrh	r3, [r6, #12]
 8002ef8:	061a      	lsls	r2, r3, #24
 8002efa:	d410      	bmi.n	8002f1e <__swhatbuf_r+0x3e>
 8002efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f00:	e00e      	b.n	8002f20 <__swhatbuf_r+0x40>
 8002f02:	466a      	mov	r2, sp
 8002f04:	f000 f8b2 	bl	800306c <_fstat_r>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	dbf2      	blt.n	8002ef2 <__swhatbuf_r+0x12>
 8002f0c:	9a01      	ldr	r2, [sp, #4]
 8002f0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002f12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002f16:	425a      	negs	r2, r3
 8002f18:	415a      	adcs	r2, r3
 8002f1a:	602a      	str	r2, [r5, #0]
 8002f1c:	e7ee      	b.n	8002efc <__swhatbuf_r+0x1c>
 8002f1e:	2340      	movs	r3, #64	; 0x40
 8002f20:	2000      	movs	r0, #0
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	b016      	add	sp, #88	; 0x58
 8002f26:	bd70      	pop	{r4, r5, r6, pc}

08002f28 <__smakebuf_r>:
 8002f28:	898b      	ldrh	r3, [r1, #12]
 8002f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002f2c:	079d      	lsls	r5, r3, #30
 8002f2e:	4606      	mov	r6, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	d507      	bpl.n	8002f44 <__smakebuf_r+0x1c>
 8002f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	6123      	str	r3, [r4, #16]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	6163      	str	r3, [r4, #20]
 8002f40:	b002      	add	sp, #8
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	ab01      	add	r3, sp, #4
 8002f46:	466a      	mov	r2, sp
 8002f48:	f7ff ffca 	bl	8002ee0 <__swhatbuf_r>
 8002f4c:	9900      	ldr	r1, [sp, #0]
 8002f4e:	4605      	mov	r5, r0
 8002f50:	4630      	mov	r0, r6
 8002f52:	f7ff faab 	bl	80024ac <_malloc_r>
 8002f56:	b948      	cbnz	r0, 8002f6c <__smakebuf_r+0x44>
 8002f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f5c:	059a      	lsls	r2, r3, #22
 8002f5e:	d4ef      	bmi.n	8002f40 <__smakebuf_r+0x18>
 8002f60:	f023 0303 	bic.w	r3, r3, #3
 8002f64:	f043 0302 	orr.w	r3, r3, #2
 8002f68:	81a3      	strh	r3, [r4, #12]
 8002f6a:	e7e3      	b.n	8002f34 <__smakebuf_r+0xc>
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <__smakebuf_r+0x7c>)
 8002f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	6020      	str	r0, [r4, #0]
 8002f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	9b00      	ldr	r3, [sp, #0]
 8002f7c:	6163      	str	r3, [r4, #20]
 8002f7e:	9b01      	ldr	r3, [sp, #4]
 8002f80:	6120      	str	r0, [r4, #16]
 8002f82:	b15b      	cbz	r3, 8002f9c <__smakebuf_r+0x74>
 8002f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f88:	4630      	mov	r0, r6
 8002f8a:	f000 f881 	bl	8003090 <_isatty_r>
 8002f8e:	b128      	cbz	r0, 8002f9c <__smakebuf_r+0x74>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	f023 0303 	bic.w	r3, r3, #3
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	81a3      	strh	r3, [r4, #12]
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	431d      	orrs	r5, r3
 8002fa0:	81a5      	strh	r5, [r4, #12]
 8002fa2:	e7cd      	b.n	8002f40 <__smakebuf_r+0x18>
 8002fa4:	08002361 	.word	0x08002361

08002fa8 <__malloc_lock>:
 8002fa8:	4770      	bx	lr

08002faa <__malloc_unlock>:
 8002faa:	4770      	bx	lr

08002fac <_free_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4605      	mov	r5, r0
 8002fb0:	2900      	cmp	r1, #0
 8002fb2:	d045      	beq.n	8003040 <_free_r+0x94>
 8002fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb8:	1f0c      	subs	r4, r1, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bfb8      	it	lt
 8002fbe:	18e4      	addlt	r4, r4, r3
 8002fc0:	f7ff fff2 	bl	8002fa8 <__malloc_lock>
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <_free_r+0x98>)
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	4610      	mov	r0, r2
 8002fca:	b933      	cbnz	r3, 8002fda <_free_r+0x2e>
 8002fcc:	6063      	str	r3, [r4, #4]
 8002fce:	6014      	str	r4, [r2, #0]
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fd6:	f7ff bfe8 	b.w	8002faa <__malloc_unlock>
 8002fda:	42a3      	cmp	r3, r4
 8002fdc:	d90c      	bls.n	8002ff8 <_free_r+0x4c>
 8002fde:	6821      	ldr	r1, [r4, #0]
 8002fe0:	1862      	adds	r2, r4, r1
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	bf04      	itt	eq
 8002fe6:	681a      	ldreq	r2, [r3, #0]
 8002fe8:	685b      	ldreq	r3, [r3, #4]
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	bf04      	itt	eq
 8002fee:	1852      	addeq	r2, r2, r1
 8002ff0:	6022      	streq	r2, [r4, #0]
 8002ff2:	6004      	str	r4, [r0, #0]
 8002ff4:	e7ec      	b.n	8002fd0 <_free_r+0x24>
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	b10a      	cbz	r2, 8003000 <_free_r+0x54>
 8002ffc:	42a2      	cmp	r2, r4
 8002ffe:	d9fa      	bls.n	8002ff6 <_free_r+0x4a>
 8003000:	6819      	ldr	r1, [r3, #0]
 8003002:	1858      	adds	r0, r3, r1
 8003004:	42a0      	cmp	r0, r4
 8003006:	d10b      	bne.n	8003020 <_free_r+0x74>
 8003008:	6820      	ldr	r0, [r4, #0]
 800300a:	4401      	add	r1, r0
 800300c:	1858      	adds	r0, r3, r1
 800300e:	4282      	cmp	r2, r0
 8003010:	6019      	str	r1, [r3, #0]
 8003012:	d1dd      	bne.n	8002fd0 <_free_r+0x24>
 8003014:	6810      	ldr	r0, [r2, #0]
 8003016:	6852      	ldr	r2, [r2, #4]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	4401      	add	r1, r0
 800301c:	6019      	str	r1, [r3, #0]
 800301e:	e7d7      	b.n	8002fd0 <_free_r+0x24>
 8003020:	d902      	bls.n	8003028 <_free_r+0x7c>
 8003022:	230c      	movs	r3, #12
 8003024:	602b      	str	r3, [r5, #0]
 8003026:	e7d3      	b.n	8002fd0 <_free_r+0x24>
 8003028:	6820      	ldr	r0, [r4, #0]
 800302a:	1821      	adds	r1, r4, r0
 800302c:	428a      	cmp	r2, r1
 800302e:	bf04      	itt	eq
 8003030:	6811      	ldreq	r1, [r2, #0]
 8003032:	6852      	ldreq	r2, [r2, #4]
 8003034:	6062      	str	r2, [r4, #4]
 8003036:	bf04      	itt	eq
 8003038:	1809      	addeq	r1, r1, r0
 800303a:	6021      	streq	r1, [r4, #0]
 800303c:	605c      	str	r4, [r3, #4]
 800303e:	e7c7      	b.n	8002fd0 <_free_r+0x24>
 8003040:	bd38      	pop	{r3, r4, r5, pc}
 8003042:	bf00      	nop
 8003044:	20000094 	.word	0x20000094

08003048 <_read_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	4c07      	ldr	r4, [pc, #28]	; (8003068 <_read_r+0x20>)
 800304c:	4605      	mov	r5, r0
 800304e:	4608      	mov	r0, r1
 8003050:	4611      	mov	r1, r2
 8003052:	2200      	movs	r2, #0
 8003054:	6022      	str	r2, [r4, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	f7fe fed2 	bl	8001e00 <_read>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_read_r+0x1e>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	b103      	cbz	r3, 8003066 <_read_r+0x1e>
 8003064:	602b      	str	r3, [r5, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	20000120 	.word	0x20000120

0800306c <_fstat_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4c07      	ldr	r4, [pc, #28]	; (800308c <_fstat_r+0x20>)
 8003070:	2300      	movs	r3, #0
 8003072:	4605      	mov	r5, r0
 8003074:	4608      	mov	r0, r1
 8003076:	4611      	mov	r1, r2
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	f7fe ff33 	bl	8001ee4 <_fstat>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	d102      	bne.n	8003088 <_fstat_r+0x1c>
 8003082:	6823      	ldr	r3, [r4, #0]
 8003084:	b103      	cbz	r3, 8003088 <_fstat_r+0x1c>
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	bd38      	pop	{r3, r4, r5, pc}
 800308a:	bf00      	nop
 800308c:	20000120 	.word	0x20000120

08003090 <_isatty_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4c06      	ldr	r4, [pc, #24]	; (80030ac <_isatty_r+0x1c>)
 8003094:	2300      	movs	r3, #0
 8003096:	4605      	mov	r5, r0
 8003098:	4608      	mov	r0, r1
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	f7fe ff32 	bl	8001f04 <_isatty>
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d102      	bne.n	80030aa <_isatty_r+0x1a>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	b103      	cbz	r3, 80030aa <_isatty_r+0x1a>
 80030a8:	602b      	str	r3, [r5, #0]
 80030aa:	bd38      	pop	{r3, r4, r5, pc}
 80030ac:	20000120 	.word	0x20000120

080030b0 <AHBPrescTable>:
	...
 80030b8:	04030201 09080706                       ........

080030c0 <APBPrescTable>:
 80030c0:	00000000 04030201 6172654d 4e4f2068     ........Merah ON
 80030d0:	000d0a20 6172654d 756b5f68 676e696e      ...Merah_kuning
 80030e0:	204e4f20 00000d0a 696e754b 4f20676e      ON ....Kuning O
 80030f0:	0d0a204e 00000000 616a6948 4e4f2075     N ......Hijau ON
 8003100:	000d0a20                                 ...

08003104 <_global_impure_ptr>:
 8003104:	20000008                                ... 

08003108 <__sf_fake_stderr>:
	...

08003128 <__sf_fake_stdin>:
	...

08003148 <__sf_fake_stdout>:
	...
 8003168:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 8003178:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 8003188:	31300046 35343332 39383736 64636261     F.0123456789abcd
 8003198:	00006665                                ef..

0800319c <_init>:
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	bf00      	nop
 80031a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a2:	bc08      	pop	{r3}
 80031a4:	469e      	mov	lr, r3
 80031a6:	4770      	bx	lr

080031a8 <_fini>:
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	bf00      	nop
 80031ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ae:	bc08      	pop	{r3}
 80031b0:	469e      	mov	lr, r3
 80031b2:	4770      	bx	lr
