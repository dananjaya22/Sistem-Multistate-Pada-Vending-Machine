
state_vending_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000ec  20000070  08004344  00020070  2**2
                  ALLOC
  6 ._user_heap_stack 00000404  2000015c  08004430  00020070  2**0
                  ALLOC
  7 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001238f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000265d  00000000  00000000  0003242f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b40  00000000  00000000  00034a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a28  00000000  00000000  000355d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000280e3  00000000  00000000  00035ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f8f5  00000000  00000000  0005e0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e644d  00000000  00000000  0006d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00153e1d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000034b8  00000000  00000000  00153e98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080042b4 	.word	0x080042b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080042b4 	.word	0x080042b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x34>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_Init+0x34>)
 8000a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x34>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x34>)
 8000a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a76:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f92b 	bl	8000cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f000 fb6f 	bl	8001166 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_InitTick+0x30>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_InitTick+0x34>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	099b      	lsrs	r3, r3, #6
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f948 	bl	8000d3e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab6:	f000 f918 	bl	8000cea <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	10624dd3 	.word	0x10624dd3

08000acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick++;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_IncTick+0x18>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <HAL_IncTick+0x18>)
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	200000d4 	.word	0x200000d4

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200000d4 	.word	0x200000d4

08000b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff ffee 	bl	8000ae8 <HAL_GetTick>
 8000b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b18:	d002      	beq.n	8000b20 <HAL_Delay+0x20>
  {
     wait++;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b20:	bf00      	nop
 8000b22:	f7ff ffe1 	bl	8000ae8 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d8f7      	bhi.n	8000b22 <HAL_Delay+0x22>
  {
  }
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4907      	ldr	r1, [pc, #28]	; (8000bd0 <NVIC_EnableIRQ+0x30>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	6039      	str	r1, [r7, #0]
 8000bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	da0b      	bge.n	8000c00 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	490c      	ldr	r1, [pc, #48]	; (8000c20 <NVIC_SetPriority+0x4c>)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	3b04      	subs	r3, #4
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bfe:	e009      	b.n	8000c14 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <NVIC_SetPriority+0x50>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f1c3 0307 	rsb	r3, r3, #7
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	bf28      	it	cs
 8000c46:	2304      	movcs	r3, #4
 8000c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	2b06      	cmp	r3, #6
 8000c50:	d902      	bls.n	8000c58 <NVIC_EncodePriority+0x30>
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3b03      	subs	r3, #3
 8000c56:	e000      	b.n	8000c5a <NVIC_EncodePriority+0x32>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43da      	mvns	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c70:	f04f 31ff 	mov.w	r1, #4294967295
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43d9      	mvns	r1, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	4313      	orrs	r3, r2
         );
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3724      	adds	r7, #36	; 0x24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
	...

08000c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca0:	d301      	bcc.n	8000ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e00f      	b.n	8000cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SysTick_Config+0x40>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cae:	210f      	movs	r1, #15
 8000cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SysTick_Config+0x40>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <SysTick_Config+0x40>)
 8000cc0:	2207      	movs	r2, #7
 8000cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff2d 	bl	8000b3c <NVIC_SetPriorityGrouping>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b086      	sub	sp, #24
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
 8000cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff42 	bl	8000b84 <NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff8e 	bl	8000c28 <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5d 	bl	8000bd4 <NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff35 	bl	8000ba0 <NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa2 	bl	8000c90 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	d106      	bne.n	8000d74 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d72:	e005      	b.n	8000d80 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d7a:	f023 0304 	bic.w	r3, r3, #4
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d94:	f000 f802 	bl	8000d9c <HAL_SYSTICK_Callback>
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e16b      	b.n	80010a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 815a 	bne.w	800109a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x4a>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d123      	bne.n	8000e3e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	08da      	lsrs	r2, r3, #3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3208      	adds	r2, #8
 8000dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	220f      	movs	r2, #15
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	08da      	lsrs	r2, r3, #3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3208      	adds	r2, #8
 8000e38:	69b9      	ldr	r1, [r7, #24]
 8000e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0203 	and.w	r2, r3, #3
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d00b      	beq.n	8000e92 <HAL_GPIO_Init+0xe6>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e86:	2b11      	cmp	r3, #17
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d130      	bne.n	8000ef4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec8:	2201      	movs	r2, #1
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	091b      	lsrs	r3, r3, #4
 8000ede:	f003 0201 	and.w	r2, r3, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80b4 	beq.w	800109a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a5a      	ldr	r2, [pc, #360]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d025      	beq.n	8000fce <HAL_GPIO_Init+0x222>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d01f      	beq.n	8000fca <HAL_GPIO_Init+0x21e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x216>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x212>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_GPIO_Init+0x328>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x20e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_GPIO_Init+0x32c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x20a>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e00e      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	e00c      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4934      	ldr	r1, [pc, #208]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x330>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_GPIO_Init+0x330>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f ae90 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	; 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40021c00 	.word	0x40021c00
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	4013      	ands	r3, r2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d002      	beq.n	80010fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010f8:	2301      	movs	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e001      	b.n	8001102 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	460b      	mov	r3, r1
 800114c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	887b      	ldrh	r3, [r7, #2]
 8001154:	405a      	eors	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	615a      	str	r2, [r3, #20]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0

}
 800116a:	bf00      	nop
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;  
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d075      	beq.n	8001278 <HAL_RCC_OscConfig+0x104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118c:	4ba4      	ldr	r3, [pc, #656]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	f003 030c 	and.w	r3, r3, #12
 8001194:	2b04      	cmp	r3, #4
 8001196:	d00c      	beq.n	80011b2 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001198:	4ba1      	ldr	r3, [pc, #644]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011a0:	2b08      	cmp	r3, #8
 80011a2:	d112      	bne.n	80011ca <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a4:	4b9e      	ldr	r3, [pc, #632]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b0:	d10b      	bne.n	80011ca <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b2:	4b9b      	ldr	r3, [pc, #620]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d05b      	beq.n	8001276 <HAL_RCC_OscConfig+0x102>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d157      	bne.n	8001276 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e224      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011d2:	d106      	bne.n	80011e2 <HAL_RCC_OscConfig+0x6e>
 80011d4:	4b92      	ldr	r3, [pc, #584]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a91      	ldr	r2, [pc, #580]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e01d      	b.n	800121e <HAL_RCC_OscConfig+0xaa>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ea:	d10c      	bne.n	8001206 <HAL_RCC_OscConfig+0x92>
 80011ec:	4b8c      	ldr	r3, [pc, #560]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a8b      	ldr	r2, [pc, #556]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	4b89      	ldr	r3, [pc, #548]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a88      	ldr	r2, [pc, #544]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e00b      	b.n	800121e <HAL_RCC_OscConfig+0xaa>
 8001206:	4b86      	ldr	r3, [pc, #536]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a85      	ldr	r2, [pc, #532]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b83      	ldr	r3, [pc, #524]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a82      	ldr	r2, [pc, #520]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d013      	beq.n	800124e <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fc5f 	bl	8000ae8 <HAL_GetTick>
 800122a:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122e:	f7ff fc5b 	bl	8000ae8 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b64      	cmp	r3, #100	; 0x64
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1e9      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001240:	4b77      	ldr	r3, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0xba>
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fc4b 	bl	8000ae8 <HAL_GetTick>
 8001252:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001254:	e008      	b.n	8001268 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001256:	f7ff fc47 	bl	8000ae8 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b64      	cmp	r3, #100	; 0x64
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e1d5      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f0      	bne.n	8001256 <HAL_RCC_OscConfig+0xe2>
 8001274:	e000      	b.n	8001278 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d077      	beq.n	8001374 <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001284:	4b66      	ldr	r3, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f003 030c 	and.w	r3, r3, #12
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00b      	beq.n	80012a8 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001290:	4b63      	ldr	r3, [pc, #396]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001298:	2b08      	cmp	r3, #8
 800129a:	d126      	bne.n	80012ea <HAL_RCC_OscConfig+0x176>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129c:	4b60      	ldr	r3, [pc, #384]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d120      	bne.n	80012ea <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a8:	4b5d      	ldr	r3, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_OscConfig+0x14c>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e1a9      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	4b57      	ldr	r3, [pc, #348]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6919      	ldr	r1, [r3, #16]
 80012cc:	23f8      	movs	r3, #248	; 0xf8
 80012ce:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	494f      	ldr	r1, [pc, #316]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e8:	e044      	b.n	8001374 <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d02a      	beq.n	8001348 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f2:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <HAL_RCC_OscConfig+0x2b0>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fbf6 	bl	8000ae8 <HAL_GetTick>
 80012fc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fbf2 	bl	8000ae8 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e180      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001312:	4b43      	ldr	r3, [pc, #268]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x18c>
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	4b40      	ldr	r3, [pc, #256]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	23f8      	movs	r3, #248	; 0xf8
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	fab3 f383 	clz	r3, r3
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001348:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_RCC_OscConfig+0x2b0>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fbcb 	bl	8000ae8 <HAL_GetTick>
 8001352:	6378      	str	r0, [r7, #52]	; 0x34
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fbc7 	bl	8000ae8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e155      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001368:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x1e2>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d030      	beq.n	80013e2 <HAL_RCC_OscConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d016      	beq.n	80013b6 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_RCC_OscConfig+0x2b4>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138e:	f7ff fbab 	bl	8000ae8 <HAL_GetTick>
 8001392:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x234>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001396:	f7ff fba7 	bl	8000ae8 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e135      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80013aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x222>
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x26e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_RCC_OscConfig+0x2b4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013bc:	f7ff fb94 	bl	8000ae8 <HAL_GetTick>
 80013c0:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x262>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fb90 	bl	8000ae8 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x262>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e11e      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x250>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8086 	beq.w	80014fc <HAL_RCC_OscConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_RCC_OscConfig+0x2ac>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_RCC_OscConfig+0x2b8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_RCC_OscConfig+0x2b8>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001418:	f7ff fb66 	bl	8000ae8 <HAL_GetTick>
 800141c:	6378      	str	r0, [r7, #52]	; 0x34
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800141e:	e010      	b.n	8001442 <HAL_RCC_OscConfig+0x2ce>
 8001420:	40023800 	.word	0x40023800
 8001424:	42470000 	.word	0x42470000
 8001428:	42470e80 	.word	0x42470e80
 800142c:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001430:	f7ff fb5a 	bl	8000ae8 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x2ce>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e0e8      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <HAL_RCC_OscConfig+0x4a8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d0f0      	beq.n	8001430 <HAL_RCC_OscConfig+0x2bc>
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d106      	bne.n	8001464 <HAL_RCC_OscConfig+0x2f0>
 8001456:	4b72      	ldr	r3, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a71      	ldr	r2, [pc, #452]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6713      	str	r3, [r2, #112]	; 0x70
 8001462:	e01c      	b.n	800149e <HAL_RCC_OscConfig+0x32a>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b05      	cmp	r3, #5
 800146a:	d10c      	bne.n	8001486 <HAL_RCC_OscConfig+0x312>
 800146c:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 800146e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001470:	4a6b      	ldr	r2, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	6713      	str	r3, [r2, #112]	; 0x70
 8001478:	4b69      	ldr	r3, [pc, #420]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 800147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147c:	4a68      	ldr	r2, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	6713      	str	r3, [r2, #112]	; 0x70
 8001484:	e00b      	b.n	800149e <HAL_RCC_OscConfig+0x32a>
 8001486:	4b66      	ldr	r3, [pc, #408]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a65      	ldr	r2, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a62      	ldr	r2, [pc, #392]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 8001498:	f023 0304 	bic.w	r3, r3, #4
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d015      	beq.n	80014d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a6:	f7ff fb1f 	bl	8000ae8 <HAL_GetTick>
 80014aa:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ac:	e00a      	b.n	80014c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7ff fb1b 	bl	8000ae8 <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014bc:	4293      	cmp	r3, r2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e0a7      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c4:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0ee      	beq.n	80014ae <HAL_RCC_OscConfig+0x33a>
 80014d0:	e014      	b.n	80014fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d2:	f7ff fb09 	bl	8000ae8 <HAL_GetTick>
 80014d6:	6378      	str	r0, [r7, #52]	; 0x34
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fb05 	bl	8000ae8 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e091      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f0:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	f003 0302 	and.w	r3, r3, #2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1ee      	bne.n	80014da <HAL_RCC_OscConfig+0x366>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8086 	beq.w	8001612 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001506:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d07d      	beq.n	800160e <HAL_RCC_OscConfig+0x49a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d162      	bne.n	80015e0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151a:	4b42      	ldr	r3, [pc, #264]	; (8001624 <HAL_RCC_OscConfig+0x4b0>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001520:	f7ff fae2 	bl	8000ae8 <HAL_GetTick>
 8001524:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x3c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001528:	f7ff fade 	bl	8000ae8 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e06c      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x3b4>
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001554:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	60fb      	str	r3, [r7, #12]
  return(result);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	fab3 f383 	clz	r3, r3
 8001568:	fa01 f303 	lsl.w	r3, r1, r3
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	1e59      	subs	r1, r3, #1
 8001576:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800157a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	617b      	str	r3, [r7, #20]
  return(result);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001594:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8001598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	491c      	ldr	r1, [pc, #112]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_RCC_OscConfig+0x4b0>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fa96 	bl	8000ae8 <HAL_GetTick>
 80015bc:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c0:	f7ff fa92 	bl	8000ae8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e020      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x44c>
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x4b0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fa7f 	bl	8000ae8 <HAL_GetTick>
 80015ea:	6378      	str	r0, [r7, #52]	; 0x34
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fa7b 	bl	8000ae8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e009      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_RCC_OscConfig+0x4ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x47a>
 800160c:	e001      	b.n	8001612 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e000      	b.n	8001614 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40007000 	.word	0x40007000
 8001620:	40023800 	.word	0x40023800
 8001624:	42470060 	.word	0x42470060

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;   
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001636:	4b81      	ldr	r3, [pc, #516]	; (800183c <HAL_RCC_ClockConfig+0x214>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d90c      	bls.n	800165e <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001644:	4b7d      	ldr	r3, [pc, #500]	; (800183c <HAL_RCC_ClockConfig+0x214>)
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800164c:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_RCC_ClockConfig+0x214>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d001      	beq.n	800165e <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0ea      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166a:	4b75      	ldr	r3, [pc, #468]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	4972      	ldr	r1, [pc, #456]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 8001678:	4313      	orrs	r3, r2
 800167a:	608b      	str	r3, [r1, #8]
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 8086 	beq.w	8001796 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b6b      	ldr	r3, [pc, #428]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0c8      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0b8      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0b0      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d2:	4b5b      	ldr	r3, [pc, #364]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4958      	ldr	r1, [pc, #352]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016e4:	f7ff fa00 	bl	8000ae8 <HAL_GetTick>
 80016e8:	6178      	str	r0, [r7, #20]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d112      	bne.n	8001718 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f4:	f7ff f9f8 	bl	8000ae8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e094      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800170a:	4b4d      	ldr	r3, [pc, #308]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d1ee      	bne.n	80016f4 <HAL_RCC_ClockConfig+0xcc>
 8001716:	e03e      	b.n	8001796 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d112      	bne.n	8001746 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001720:	e00a      	b.n	8001738 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001722:	f7ff f9e1 	bl	8000ae8 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e07d      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001738:	4b41      	ldr	r3, [pc, #260]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 030c 	and.w	r3, r3, #12
 8001740:	2b08      	cmp	r3, #8
 8001742:	d1ee      	bne.n	8001722 <HAL_RCC_ClockConfig+0xfa>
 8001744:	e027      	b.n	8001796 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d11d      	bne.n	800178a <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff f9ca 	bl	8000ae8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e066      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b0c      	cmp	r3, #12
 8001770:	d1ee      	bne.n	8001750 <HAL_RCC_ClockConfig+0x128>
 8001772:	e010      	b.n	8001796 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff f9b8 	bl	8000ae8 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e054      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800178a:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ee      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_RCC_ClockConfig+0x214>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d20c      	bcs.n	80017be <HAL_RCC_ClockConfig+0x196>
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <HAL_RCC_ClockConfig+0x214>)
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ac:	4b23      	ldr	r3, [pc, #140]	; (800183c <HAL_RCC_ClockConfig+0x214>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d001      	beq.n	80017be <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e03a      	b.n	8001834 <HAL_RCC_ClockConfig+0x20c>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	491a      	ldr	r1, [pc, #104]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4912      	ldr	r1, [pc, #72]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80017fc:	f000 f826 	bl	800184c <HAL_RCC_GetSysClockFreq>
 8001800:	4601      	mov	r1, r0
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_RCC_ClockConfig+0x218>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800180a:	23f0      	movs	r3, #240	; 0xf0
 800180c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	60fb      	str	r3, [r7, #12]
  return(result);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
 8001820:	4a08      	ldr	r2, [pc, #32]	; (8001844 <HAL_RCC_ClockConfig+0x21c>)
 8001822:	5cd3      	ldrb	r3, [r2, r3]
 8001824:	fa21 f303 	lsr.w	r3, r1, r3
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_RCC_ClockConfig+0x220>)
 800182a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800182c:	200f      	movs	r0, #15
 800182e:	f7ff f931 	bl	8000a94 <HAL_InitTick>
  
  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40023c00 	.word	0x40023c00
 8001840:	40023800 	.word	0x40023800
 8001844:	08004134 	.word	0x08004134
 8001848:	20000008 	.word	0x20000008

0800184c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b08b      	sub	sp, #44	; 0x2c
 8001850:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 030c 	and.w	r3, r3, #12
 800186a:	2b04      	cmp	r3, #4
 800186c:	d006      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x30>
 800186e:	2b08      	cmp	r3, #8
 8001870:	d007      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x36>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d158      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0xdc>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001876:	4b32      	ldr	r3, [pc, #200]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001878:	623b      	str	r3, [r7, #32]
       break;
 800187a:	e058      	b.n	800192e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800187e:	623b      	str	r3, [r7, #32]
      break;
 8001880:	e055      	b.n	800192e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800188a:	61fb      	str	r3, [r7, #28]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800188c:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_RCC_GetSysClockFreq+0xf0>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d017      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001898:	4a2a      	ldr	r2, [pc, #168]	; (8001944 <HAL_RCC_GetSysClockFreq+0xf8>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fbb2 f2f3 	udiv	r2, r2, r3
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_RCC_GetSysClockFreq+0xf0>)
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a8:	400b      	ands	r3, r1
 80018aa:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80018ae:	6179      	str	r1, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	6979      	ldr	r1, [r7, #20]
 80018b2:	fa91 f1a1 	rbit	r1, r1
 80018b6:	6139      	str	r1, [r7, #16]
  return(result);
 80018b8:	6939      	ldr	r1, [r7, #16]
 80018ba:	fab1 f181 	clz	r1, r1
 80018be:	40cb      	lsrs	r3, r1
 80018c0:	fb03 f302 	mul.w	r3, r3, r2
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
 80018c6:	e016      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80018c8:	4a1d      	ldr	r2, [pc, #116]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_GetSysClockFreq+0xf0>)
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018d8:	400b      	ands	r3, r1
 80018da:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80018de:	60f9      	str	r1, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	68f9      	ldr	r1, [r7, #12]
 80018e2:	fa91 f1a1 	rbit	r1, r1
 80018e6:	60b9      	str	r1, [r7, #8]
  return(result);
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	fab1 f181 	clz	r1, r1
 80018ee:	40cb      	lsrs	r3, r1
 80018f0:	fb03 f302 	mul.w	r3, r3, r2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_RCC_GetSysClockFreq+0xf0>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fe:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001902:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	603b      	str	r3, [r7, #0]
  return(result);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	3301      	adds	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
      
      sysclockfreq = pllvco/pllp;
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	623b      	str	r3, [r7, #32]
      break;
 8001926:	e002      	b.n	800192e <HAL_RCC_GetSysClockFreq+0xe2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetSysClockFreq+0xf4>)
 800192a:	623b      	str	r3, [r7, #32]
      break;
 800192c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192e:	6a3b      	ldr	r3, [r7, #32]
}
 8001930:	4618      	mov	r0, r3
 8001932:	372c      	adds	r7, #44	; 0x2c
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40023800 	.word	0x40023800
 8001940:	00f42400 	.word	0x00f42400
 8001944:	007a1200 	.word	0x007a1200

08001948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_GetHCLKFreq+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001966:	f7ff ffef 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 800196a:	4601      	mov	r1, r0
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001974:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001978:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	603b      	str	r3, [r7, #0]
  return(result);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
 800198c:	4a04      	ldr	r2, [pc, #16]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	08004144 	.word	0x08004144

080019a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80019aa:	f7ff ffcd 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 80019b8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80019bc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	603b      	str	r3, [r7, #0]
  return(result);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	08004144 	.word	0x08004144

080019e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	220f      	movs	r2, #15
 80019f6:	601a      	str	r2, [r3, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_RCC_GetClockConfig+0x60>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 020f 	and.w	r2, r3, #15
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	601a      	str	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e01d      	b.n	8001a9a <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f815 	bl	8001aa2 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3304      	adds	r3, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	f000 f82e 	bl	8001aec <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_TIM_Base_MspInit>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_Base_Start_IT>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 0201 	orr.w	r2, r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a44      	ldr	r2, [pc, #272]	; (8001c14 <TIM_Base_SetConfig+0x128>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <TIM_Base_SetConfig+0x44>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0e:	d00f      	beq.n	8001b30 <TIM_Base_SetConfig+0x44>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a41      	ldr	r2, [pc, #260]	; (8001c18 <TIM_Base_SetConfig+0x12c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00b      	beq.n	8001b30 <TIM_Base_SetConfig+0x44>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a40      	ldr	r2, [pc, #256]	; (8001c1c <TIM_Base_SetConfig+0x130>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <TIM_Base_SetConfig+0x44>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a3f      	ldr	r2, [pc, #252]	; (8001c20 <TIM_Base_SetConfig+0x134>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d003      	beq.n	8001b30 <TIM_Base_SetConfig+0x44>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3e      	ldr	r2, [pc, #248]	; (8001c24 <TIM_Base_SetConfig+0x138>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <TIM_Base_SetConfig+0x48>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <TIM_Base_SetConfig+0x4a>
 8001b34:	2300      	movs	r3, #0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d008      	beq.n	8001b4c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a31      	ldr	r2, [pc, #196]	; (8001c14 <TIM_Base_SetConfig+0x128>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d02b      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5a:	d027      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <TIM_Base_SetConfig+0x12c>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d023      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a2d      	ldr	r2, [pc, #180]	; (8001c1c <TIM_Base_SetConfig+0x130>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d01f      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a2c      	ldr	r2, [pc, #176]	; (8001c20 <TIM_Base_SetConfig+0x134>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d01b      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a2b      	ldr	r2, [pc, #172]	; (8001c24 <TIM_Base_SetConfig+0x138>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d017      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <TIM_Base_SetConfig+0x13c>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <TIM_Base_SetConfig+0x140>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00f      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <TIM_Base_SetConfig+0x144>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00b      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <TIM_Base_SetConfig+0x148>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <TIM_Base_SetConfig+0x14c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d003      	beq.n	8001bac <TIM_Base_SetConfig+0xc0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <TIM_Base_SetConfig+0x150>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <TIM_Base_SetConfig+0xc4>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <TIM_Base_SetConfig+0xc6>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d008      	beq.n	8001bc8 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <TIM_Base_SetConfig+0x128>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d003      	beq.n	8001bee <TIM_Base_SetConfig+0x102>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <TIM_Base_SetConfig+0x138>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <TIM_Base_SetConfig+0x106>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <TIM_Base_SetConfig+0x108>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <TIM_Base_SetConfig+0x114>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	615a      	str	r2, [r3, #20]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40000400 	.word	0x40000400
 8001c1c:	40000800 	.word	0x40000800
 8001c20:	40000c00 	.word	0x40000c00
 8001c24:	40010400 	.word	0x40010400
 8001c28:	40014000 	.word	0x40014000
 8001c2c:	40014400 	.word	0x40014400
 8001c30:	40014800 	.word	0x40014800
 8001c34:	40001800 	.word	0x40001800
 8001c38:	40001c00 	.word	0x40001c00
 8001c3c:	40002000 	.word	0x40002000

08001c40 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e03f      	b.n	8001cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d106      	bne.n	8001c6c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f837 	bl	8001cda <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c82:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f915 	bl	8001eb4 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	695a      	ldr	r2, [r3, #20]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ca8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cb8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_UART_MspInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b088      	sub	sp, #32
 8001cf2:	af02      	add	r7, sp, #8
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	603b      	str	r3, [r7, #0]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	f040 8083 	bne.w	8001e16 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <HAL_UART_Transmit+0x2e>
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e07b      	b.n	8001e18 <HAL_UART_Transmit+0x12a>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_UART_Transmit+0x40>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e074      	b.n	8001e18 <HAL_UART_Transmit+0x12a>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2221      	movs	r2, #33	; 0x21
 8001d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001d44:	f7fe fed0 	bl	8000ae8 <HAL_GetTick>
 8001d48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	88fa      	ldrh	r2, [r7, #6]
 8001d4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001d56:	e042      	b.n	8001dde <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6e:	d122      	bne.n	8001db6 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2200      	movs	r2, #0
 8001d78:	2180      	movs	r1, #128	; 0x80
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f850 	bl	8001e20 <UART_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e046      	b.n	8001e18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d9c:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	3302      	adds	r3, #2
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	e017      	b.n	8001dde <HAL_UART_Transmit+0xf0>
        }
        else
        { 
          pData +=1U;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	e013      	b.n	8001dde <HAL_UART_Transmit+0xf0>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f82d 	bl	8001e20 <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e023      	b.n	8001e18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1b7      	bne.n	8001d58 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2200      	movs	r2, #0
 8001df0:	2140      	movs	r1, #64	; 0x40
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f814 	bl	8001e20 <UART_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_UART_Transmit+0x114>
    { 
      return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e00a      	b.n	8001e18 <HAL_UART_Transmit+0x12a>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2220      	movs	r2, #32
 8001e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001e16:	2302      	movs	r3, #2
  }
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001e30:	e02c      	b.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d028      	beq.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e40:	f7fe fe52 	bl	8000ae8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d21d      	bcs.n	8001e8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e00f      	b.n	8001eac <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4013      	ands	r3, r2
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d0c3      	beq.n	8001e32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb4:	b5b0      	push	{r4, r5, r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ece:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ef0:	f023 030c 	bic.w	r3, r3, #12
 8001ef4:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f28:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68fa      	ldr	r2, [r7, #12]
 8001f3a:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f44:	f040 80e4 	bne.w	8002110 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4aab      	ldr	r2, [pc, #684]	; (80021fc <UART_SetConfig+0x348>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d004      	beq.n	8001f5c <UART_SetConfig+0xa8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4aaa      	ldr	r2, [pc, #680]	; (8002200 <UART_SetConfig+0x34c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d16c      	bne.n	8002036 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f5c:	f7ff fd22 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009a      	lsls	r2, r3, #2
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f76:	4aa3      	ldr	r2, [pc, #652]	; (8002204 <UART_SetConfig+0x350>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	011c      	lsls	r4, r3, #4
 8001f80:	f7ff fd10 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009a      	lsls	r2, r3, #2
 8001f8e:	441a      	add	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	fbb2 f5f3 	udiv	r5, r2, r3
 8001f9a:	f7ff fd03 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009a      	lsls	r2, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	4a93      	ldr	r2, [pc, #588]	; (8002204 <UART_SetConfig+0x350>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2264      	movs	r2, #100	; 0x64
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	1aeb      	subs	r3, r5, r3
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	3332      	adds	r3, #50	; 0x32
 8001fc8:	4a8e      	ldr	r2, [pc, #568]	; (8002204 <UART_SetConfig+0x350>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fd6:	441c      	add	r4, r3
 8001fd8:	f7ff fce4 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009a      	lsls	r2, r3, #2
 8001fe6:	441a      	add	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fbb2 f5f3 	udiv	r5, r2, r3
 8001ff2:	f7ff fcd7 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009a      	lsls	r2, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fbb2 f3f3 	udiv	r3, r2, r3
 800200c:	4a7d      	ldr	r2, [pc, #500]	; (8002204 <UART_SetConfig+0x350>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2264      	movs	r2, #100	; 0x64
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	1aeb      	subs	r3, r5, r3
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	3332      	adds	r3, #50	; 0x32
 8002020:	4a78      	ldr	r2, [pc, #480]	; (8002204 <UART_SetConfig+0x350>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	f003 0207 	and.w	r2, r3, #7
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4422      	add	r2, r4
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	e154      	b.n	80022e0 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002036:	f7ff fc93 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 800203a:	4602      	mov	r2, r0
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	009a      	lsls	r2, r3, #2
 8002044:	441a      	add	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	4a6c      	ldr	r2, [pc, #432]	; (8002204 <UART_SetConfig+0x350>)
 8002052:	fba2 2303 	umull	r2, r3, r2, r3
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	011c      	lsls	r4, r3, #4
 800205a:	f7ff fc81 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 800205e:	4602      	mov	r2, r0
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009a      	lsls	r2, r3, #2
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fbb2 f5f3 	udiv	r5, r2, r3
 8002074:	f7ff fc74 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002078:	4602      	mov	r2, r0
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	009a      	lsls	r2, r3, #2
 8002082:	441a      	add	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fbb2 f3f3 	udiv	r3, r2, r3
 800208e:	4a5d      	ldr	r2, [pc, #372]	; (8002204 <UART_SetConfig+0x350>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	2264      	movs	r2, #100	; 0x64
 8002098:	fb02 f303 	mul.w	r3, r2, r3
 800209c:	1aeb      	subs	r3, r5, r3
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	3332      	adds	r3, #50	; 0x32
 80020a2:	4a58      	ldr	r2, [pc, #352]	; (8002204 <UART_SetConfig+0x350>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020b0:	441c      	add	r4, r3
 80020b2:	f7ff fc55 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	009a      	lsls	r2, r3, #2
 80020c0:	441a      	add	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80020cc:	f7ff fc48 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4613      	mov	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	009a      	lsls	r2, r3, #2
 80020da:	441a      	add	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4a47      	ldr	r2, [pc, #284]	; (8002204 <UART_SetConfig+0x350>)
 80020e8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	2264      	movs	r2, #100	; 0x64
 80020f0:	fb02 f303 	mul.w	r3, r2, r3
 80020f4:	1aeb      	subs	r3, r5, r3
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	3332      	adds	r3, #50	; 0x32
 80020fa:	4a42      	ldr	r2, [pc, #264]	; (8002204 <UART_SetConfig+0x350>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	f003 0207 	and.w	r2, r3, #7
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4422      	add	r2, r4
 800210c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800210e:	e0e7      	b.n	80022e0 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a39      	ldr	r2, [pc, #228]	; (80021fc <UART_SetConfig+0x348>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <UART_SetConfig+0x270>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a38      	ldr	r2, [pc, #224]	; (8002200 <UART_SetConfig+0x34c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d171      	bne.n	8002208 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002124:	f7ff fc3e 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8002128:	4602      	mov	r2, r0
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	009a      	lsls	r2, r3, #2
 8002132:	441a      	add	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <UART_SetConfig+0x350>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	011c      	lsls	r4, r3, #4
 8002148:	f7ff fc2c 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 800214c:	4602      	mov	r2, r0
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009a      	lsls	r2, r3, #2
 8002156:	441a      	add	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002162:	f7ff fc1f 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8002166:	4602      	mov	r2, r0
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	441a      	add	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	4a21      	ldr	r2, [pc, #132]	; (8002204 <UART_SetConfig+0x350>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2264      	movs	r2, #100	; 0x64
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	1aeb      	subs	r3, r5, r3
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	3332      	adds	r3, #50	; 0x32
 8002190:	4a1c      	ldr	r2, [pc, #112]	; (8002204 <UART_SetConfig+0x350>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800219c:	441c      	add	r4, r3
 800219e:	f7ff fc01 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	009a      	lsls	r2, r3, #2
 80021ac:	441a      	add	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fbb2 f5f3 	udiv	r5, r2, r3
 80021b8:	f7ff fbf4 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <UART_SetConfig+0x350>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	2264      	movs	r2, #100	; 0x64
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	1aeb      	subs	r3, r5, r3
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	3332      	adds	r3, #50	; 0x32
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <UART_SetConfig+0x350>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	095b      	lsrs	r3, r3, #5
 80021ee:	f003 020f 	and.w	r2, r3, #15
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4422      	add	r2, r4
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	e071      	b.n	80022e0 <UART_SetConfig+0x42c>
 80021fc:	40011000 	.word	0x40011000
 8002200:	40011400 	.word	0x40011400
 8002204:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002208:	f7ff fbaa 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 800220c:	4602      	mov	r2, r0
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	009a      	lsls	r2, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4a31      	ldr	r2, [pc, #196]	; (80022e8 <UART_SetConfig+0x434>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	011c      	lsls	r4, r3, #4
 800222c:	f7ff fb98 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002230:	4602      	mov	r2, r0
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	009a      	lsls	r2, r3, #2
 800223a:	441a      	add	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	fbb2 f5f3 	udiv	r5, r2, r3
 8002246:	f7ff fb8b 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 800224a:	4602      	mov	r2, r0
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	009a      	lsls	r2, r3, #2
 8002254:	441a      	add	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	4a21      	ldr	r2, [pc, #132]	; (80022e8 <UART_SetConfig+0x434>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2264      	movs	r2, #100	; 0x64
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	1aeb      	subs	r3, r5, r3
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	3332      	adds	r3, #50	; 0x32
 8002274:	4a1c      	ldr	r2, [pc, #112]	; (80022e8 <UART_SetConfig+0x434>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002280:	441c      	add	r4, r3
 8002282:	f7ff fb6d 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002286:	4602      	mov	r2, r0
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb2 f5f3 	udiv	r5, r2, r3
 800229c:	f7ff fb60 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	009a      	lsls	r2, r3, #2
 80022aa:	441a      	add	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <UART_SetConfig+0x434>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	2264      	movs	r2, #100	; 0x64
 80022c0:	fb02 f303 	mul.w	r3, r2, r3
 80022c4:	1aeb      	subs	r3, r5, r3
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	3332      	adds	r3, #50	; 0x32
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <UART_SetConfig+0x434>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	095b      	lsrs	r3, r3, #5
 80022d2:	f003 020f 	and.w	r2, r3, #15
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4422      	add	r2, r4
 80022dc:	609a      	str	r2, [r3, #8]
}
 80022de:	e7ff      	b.n	80022e0 <UART_SetConfig+0x42c>
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bdb0      	pop	{r4, r5, r7, pc}
 80022e8:	51eb851f 	.word	0x51eb851f

080022ec <SystemClock_Config>:
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
#include "hardwareinit.h"
#include "device.h"
void SystemClock_Config(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b094      	sub	sp, #80	; 0x50
 80022f0:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <SystemClock_Config+0xc0>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <SystemClock_Config+0xc0>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <SystemClock_Config+0xc0>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <SystemClock_Config+0xc4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <SystemClock_Config+0xc4>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <SystemClock_Config+0xc4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800232a:	2301      	movs	r3, #1
 800232c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002334:	2302      	movs	r3, #2
 8002336:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002338:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800233c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800233e:	2304      	movs	r3, #4
 8002340:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002342:	23a8      	movs	r3, #168	; 0xa8
 8002344:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002346:	2302      	movs	r3, #2
 8002348:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800234a:	2304      	movs	r3, #4
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800234e:	f107 0320 	add.w	r3, r7, #32
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe ff0e 	bl	8001174 <HAL_RCC_OscConfig>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002358:	230f      	movs	r3, #15
 800235a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800235c:	2302      	movs	r3, #2
 800235e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002364:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002368:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800236a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236e:	61fb      	str	r3, [r7, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2105      	movs	r1, #5
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f956 	bl	8001628 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800237c:	f7ff fae4 	bl	8001948 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <SystemClock_Config+0xc8>)
 8002384:	fba3 2302 	umull	r2, r3, r3, r2
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fcd7 	bl	8000d3e <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002390:	2004      	movs	r0, #4
 8002392:	f7fe fce1 	bl	8000d58 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	f04f 30ff 	mov.w	r0, #4294967295
 800239e:	f7fe fca4 	bl	8000cea <HAL_NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3750      	adds	r7, #80	; 0x50
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000
 80023b4:	10624dd3 	.word	0x10624dd3

080023b8 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08c      	sub	sp, #48	; 0x30
 80023bc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	4b6d      	ldr	r3, [pc, #436]	; (8002578 <MX_GPIO_Init+0x1c0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a6c      	ldr	r2, [pc, #432]	; (8002578 <MX_GPIO_Init+0x1c0>)
 80023c8:	f043 0310 	orr.w	r3, r3, #16
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <MX_GPIO_Init+0x1c0>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0310 	and.w	r3, r3, #16
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	4b66      	ldr	r3, [pc, #408]	; (8002578 <MX_GPIO_Init+0x1c0>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a65      	ldr	r2, [pc, #404]	; (8002578 <MX_GPIO_Init+0x1c0>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <MX_GPIO_Init+0x1c0>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <MX_GPIO_Init+0x1c0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a5e      	ldr	r2, [pc, #376]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b5c      	ldr	r3, [pc, #368]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b58      	ldr	r3, [pc, #352]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a57      	ldr	r2, [pc, #348]	; (8002578 <MX_GPIO_Init+0x1c0>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b55      	ldr	r3, [pc, #340]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	4b51      	ldr	r3, [pc, #324]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a50      	ldr	r2, [pc, #320]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002438:	f043 0302 	orr.w	r3, r3, #2
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b4e      	ldr	r3, [pc, #312]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b4a      	ldr	r3, [pc, #296]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a49      	ldr	r2, [pc, #292]	; (8002578 <MX_GPIO_Init+0x1c0>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b47      	ldr	r3, [pc, #284]	; (8002578 <MX_GPIO_Init+0x1c0>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOE, bar3_Pin|bar5_Pin|bar4_Pin|bar7_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	2174      	movs	r1, #116	; 0x74
 800246a:	4844      	ldr	r0, [pc, #272]	; (800257c <MX_GPIO_Init+0x1c4>)
 800246c:	f7fe fe50 	bl	8001110 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOC, bar6_Pin|bar9_Pin|bar8_Pin|buzzer_Pin, GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	f44f 4168 	mov.w	r1, #59392	; 0xe800
 8002476:	4842      	ldr	r0, [pc, #264]	; (8002580 <MX_GPIO_Init+0x1c8>)
 8002478:	f7fe fe4a 	bl	8001110 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOD, led0_Pin|led1_Pin|led2_Pin|led3_Pin
 800247c:	2200      	movs	r2, #0
 800247e:	f24f 0180 	movw	r1, #61568	; 0xf080
 8002482:	4840      	ldr	r0, [pc, #256]	; (8002584 <MX_GPIO_Init+0x1cc>)
 8002484:	f7fe fe44 	bl	8001110 <HAL_GPIO_WritePin>
	                          |bar0_Pin, GPIO_PIN_RESET);

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, bar2_Pin|bar1_Pin|led4_Pin, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	f242 0130 	movw	r1, #8240	; 0x2030
 800248e:	483e      	ldr	r0, [pc, #248]	; (8002588 <MX_GPIO_Init+0x1d0>)
 8002490:	f7fe fe3e 	bl	8001110 <HAL_GPIO_WritePin>

	  /*Configure GPIO pins : bar3_Pin bar5_Pin bar4_Pin bar7_Pin */
	  GPIO_InitStruct.Pin = bar3_Pin|bar5_Pin|bar4_Pin|bar7_Pin;
 8002494:	2374      	movs	r3, #116	; 0x74
 8002496:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002498:	2301      	movs	r3, #1
 800249a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	4834      	ldr	r0, [pc, #208]	; (800257c <MX_GPIO_Init+0x1c4>)
 80024ac:	f7fe fc7e 	bl	8000dac <HAL_GPIO_Init>

	  /*Configure GPIO pins : bar6_Pin bar9_Pin bar8_Pin buzzer_Pin */
	  GPIO_InitStruct.Pin = bar6_Pin|bar9_Pin|bar8_Pin|buzzer_Pin;
 80024b0:	f44f 4368 	mov.w	r3, #59392	; 0xe800
 80024b4:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b6:	2301      	movs	r3, #1
 80024b8:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2300      	movs	r3, #0
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c2:	f107 031c 	add.w	r3, r7, #28
 80024c6:	4619      	mov	r1, r3
 80024c8:	482d      	ldr	r0, [pc, #180]	; (8002580 <MX_GPIO_Init+0x1c8>)
 80024ca:	f7fe fc6f 	bl	8000dac <HAL_GPIO_Init>

	  /*Configure GPIO pin : userButton_Pin */
	  GPIO_InitStruct.Pin = userButton_Pin;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 80024da:	f107 031c 	add.w	r3, r7, #28
 80024de:	4619      	mov	r1, r3
 80024e0:	482a      	ldr	r0, [pc, #168]	; (800258c <MX_GPIO_Init+0x1d4>)
 80024e2:	f7fe fc63 	bl	8000dac <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbUp_Pin pcRight_Pin */
	  GPIO_InitStruct.Pin = pbUp_Pin|pbRight_Pin;
 80024e6:	2330      	movs	r3, #48	; 0x30
 80024e8:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	4619      	mov	r1, r3
 80024f8:	4821      	ldr	r0, [pc, #132]	; (8002580 <MX_GPIO_Init+0x1c8>)
 80024fa:	f7fe fc57 	bl	8000dac <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbDown_Pin pbLeft_Pin dipSW3_Pin dipSW4_Pin */
	  GPIO_InitStruct.Pin = pbDown_Pin|pbLeft_Pin|dipSW3_Pin;
 80024fe:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002502:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002508:	2301      	movs	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4619      	mov	r1, r3
 8002512:	481d      	ldr	r0, [pc, #116]	; (8002588 <MX_GPIO_Init+0x1d0>)
 8002514:	f7fe fc4a 	bl	8000dac <HAL_GPIO_Init>

	  /*Configure GPIO pins : pbOk_Pin pbCancel_Pin */
	  GPIO_InitStruct.Pin = pbOk_Pin|pbCancel_Pin;
 8002518:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800251c:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002522:	2301      	movs	r3, #1
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	4619      	mov	r1, r3
 800252c:	4813      	ldr	r0, [pc, #76]	; (800257c <MX_GPIO_Init+0x1c4>)
 800252e:	f7fe fc3d 	bl	8000dac <HAL_GPIO_Init>
	  //GPIO_InitStruct.Pull = GPIO_PULLUP;
	  //HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

	  /*Configure GPIO pins : led0_Pin led1_Pin led2_Pin led3_Pin
	                           bar0_Pin */
	  GPIO_InitStruct.Pin = led0_Pin|led1_Pin|led2_Pin|led3_Pin
 8002532:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002536:	61fb      	str	r3, [r7, #28]
	                          |bar0_Pin|D4_Pin|D5_Pin|D6_Pin|D7_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002538:	2301      	movs	r3, #1
 800253a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	480e      	ldr	r0, [pc, #56]	; (8002584 <MX_GPIO_Init+0x1cc>)
 800254c:	f7fe fc2e 	bl	8000dac <HAL_GPIO_Init>

	  /*Configure GPIO pins : bar2_Pin bar1_Pin */
	  GPIO_InitStruct.Pin = bar2_Pin|bar1_Pin|RS_Pin|E_Pin|D0_Pin|led4_Pin;
 8002550:	f243 0333 	movw	r3, #12339	; 0x3033
 8002554:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002556:	2301      	movs	r3, #1
 8002558:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255e:	2300      	movs	r3, #0
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4807      	ldr	r0, [pc, #28]	; (8002588 <MX_GPIO_Init+0x1d0>)
 800256a:	f7fe fc1f 	bl	8000dac <HAL_GPIO_Init>
}
 800256e:	bf00      	nop
 8002570:	3730      	adds	r7, #48	; 0x30
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40021000 	.word	0x40021000
 8002580:	40020800 	.word	0x40020800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40020400 	.word	0x40020400
 800258c:	40020000 	.word	0x40020000

08002590 <LCD1602_EnablePulse>:

//***** Functions definitions *****//
//Private functions
//1) Enable EN pulse
void LCD1602_EnablePulse(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_SET);
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <LCD1602_EnablePulse+0x38>)
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <LCD1602_EnablePulse+0x3c>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	2201      	movs	r2, #1
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fdb6 	bl	8001110 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(writeTimeConstant);
 80025a4:	230a      	movs	r3, #10
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f97a 	bl	80028a0 <LCD1602_TIM_MicorSecDelay>
	HAL_GPIO_WritePin(PORT_RS_and_E, PIN_E, GPIO_PIN_RESET);
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <LCD1602_EnablePulse+0x38>)
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <LCD1602_EnablePulse+0x3c>)
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	2200      	movs	r2, #0
 80025b6:	4619      	mov	r1, r3
 80025b8:	f7fe fdaa 	bl	8001110 <HAL_GPIO_WritePin>
	LCD1602_TIM_MicorSecDelay(60);
 80025bc:	203c      	movs	r0, #60	; 0x3c
 80025be:	f000 f96f 	bl	80028a0 <LCD1602_TIM_MicorSecDelay>
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000008c 	.word	0x2000008c
 80025cc:	20000092 	.word	0x20000092

080025d0 <LCD1602_RS>:
//2) RS control
void LCD1602_RS(bool state)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
	if(state) HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_SET);
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <LCD1602_RS+0x22>
 80025e0:	4b0a      	ldr	r3, [pc, #40]	; (800260c <LCD1602_RS+0x3c>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <LCD1602_RS+0x40>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe fd90 	bl	8001110 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
}
 80025f0:	e007      	b.n	8002602 <LCD1602_RS+0x32>
	else HAL_GPIO_WritePin(PORT_RS_and_E, PIN_RS, GPIO_PIN_RESET);
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <LCD1602_RS+0x3c>)
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <LCD1602_RS+0x40>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	2200      	movs	r2, #0
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe fd87 	bl	8001110 <HAL_GPIO_WritePin>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000008c 	.word	0x2000008c
 8002610:	20000090 	.word	0x20000090

08002614 <LCD1602_write>:

//3) Write Parallel interface
void LCD1602_write(uint8_t byte)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = byte&0xF, MSB_nibble = (byte>>4)&0xF;
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	73fb      	strb	r3, [r7, #15]
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	73bb      	strb	r3, [r7, #14]

	if(mode_8_4_I2C == 1)		//8bits mode
 800262c:	4b61      	ldr	r3, [pc, #388]	; (80027b4 <LCD1602_write+0x1a0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d15a      	bne.n	80026ea <LCD1602_write+0xd6>
	{
		//write data to output pins
		//LSB data
		HAL_GPIO_WritePin(PORT_LSB, D0_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002634:	4b60      	ldr	r3, [pc, #384]	; (80027b8 <LCD1602_write+0x1a4>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	4b60      	ldr	r3, [pc, #384]	; (80027bc <LCD1602_write+0x1a8>)
 800263a:	8819      	ldrh	r1, [r3, #0]
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	b2db      	uxtb	r3, r3
 8002644:	461a      	mov	r2, r3
 8002646:	f7fe fd63 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D1_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 800264a:	4b5b      	ldr	r3, [pc, #364]	; (80027b8 <LCD1602_write+0x1a4>)
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	4b5c      	ldr	r3, [pc, #368]	; (80027c0 <LCD1602_write+0x1ac>)
 8002650:	8819      	ldrh	r1, [r3, #0]
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	f7fe fd58 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D2_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 8002660:	4b55      	ldr	r3, [pc, #340]	; (80027b8 <LCD1602_write+0x1a4>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <LCD1602_write+0x1b0>)
 8002666:	8819      	ldrh	r1, [r3, #0]
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	b2db      	uxtb	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	f7fe fd4d 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_LSB, D3_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002676:	4b50      	ldr	r3, [pc, #320]	; (80027b8 <LCD1602_write+0x1a4>)
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <LCD1602_write+0x1b4>)
 800267c:	8819      	ldrh	r1, [r3, #0]
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	f7fe fd42 	bl	8001110 <HAL_GPIO_WritePin>
		//MSB data
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 800268c:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <LCD1602_write+0x1b8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4b4f      	ldr	r3, [pc, #316]	; (80027d0 <LCD1602_write+0x1bc>)
 8002692:	8819      	ldrh	r1, [r3, #0]
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	f7fe fd37 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <LCD1602_write+0x1b8>)
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	4b4b      	ldr	r3, [pc, #300]	; (80027d4 <LCD1602_write+0x1c0>)
 80026a8:	8819      	ldrh	r1, [r3, #0]
 80026aa:	7bbb      	ldrb	r3, [r7, #14]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	f7fe fd2c 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <LCD1602_write+0x1b8>)
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	4b46      	ldr	r3, [pc, #280]	; (80027d8 <LCD1602_write+0x1c4>)
 80026be:	8819      	ldrh	r1, [r3, #0]
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	f7fe fd21 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 80026ce:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <LCD1602_write+0x1b8>)
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	4b42      	ldr	r3, [pc, #264]	; (80027dc <LCD1602_write+0x1c8>)
 80026d4:	8819      	ldrh	r1, [r3, #0]
 80026d6:	7bbb      	ldrb	r3, [r7, #14]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	f7fe fd16 	bl	8001110 <HAL_GPIO_WritePin>
		//Write the Enable pulse
		LCD1602_EnablePulse();
 80026e4:	f7ff ff54 	bl	8002590 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
		//Write the Enable pulse
		LCD1602_EnablePulse();
	}
}
 80026e8:	e05f      	b.n	80027aa <LCD1602_write+0x196>
	else if(mode_8_4_I2C == 2)	//4 bits mode
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <LCD1602_write+0x1a0>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d15b      	bne.n	80027aa <LCD1602_write+0x196>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(MSB_nibble&0x1));
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <LCD1602_write+0x1b8>)
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <LCD1602_write+0x1bc>)
 80026f8:	8819      	ldrh	r1, [r3, #0]
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	f7fe fd04 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(MSB_nibble&0x2));
 8002708:	4b30      	ldr	r3, [pc, #192]	; (80027cc <LCD1602_write+0x1b8>)
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <LCD1602_write+0x1c0>)
 800270e:	8819      	ldrh	r1, [r3, #0]
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	f7fe fcf9 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(MSB_nibble&0x4));
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <LCD1602_write+0x1b8>)
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <LCD1602_write+0x1c4>)
 8002724:	8819      	ldrh	r1, [r3, #0]
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	f7fe fcee 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(MSB_nibble&0x8));
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <LCD1602_write+0x1b8>)
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <LCD1602_write+0x1c8>)
 800273a:	8819      	ldrh	r1, [r3, #0]
 800273c:	7bbb      	ldrb	r3, [r7, #14]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	f7fe fce3 	bl	8001110 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 800274a:	f7ff ff21 	bl	8002590 <LCD1602_EnablePulse>
		HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 800274e:	4b1f      	ldr	r3, [pc, #124]	; (80027cc <LCD1602_write+0x1b8>)
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <LCD1602_write+0x1bc>)
 8002754:	8819      	ldrh	r1, [r3, #0]
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	f7fe fcd6 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <LCD1602_write+0x1b8>)
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <LCD1602_write+0x1c0>)
 800276a:	8819      	ldrh	r1, [r3, #0]
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	f7fe fccb 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800277a:	4b14      	ldr	r3, [pc, #80]	; (80027cc <LCD1602_write+0x1b8>)
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <LCD1602_write+0x1c4>)
 8002780:	8819      	ldrh	r1, [r3, #0]
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	f7fe fcc0 	bl	8001110 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <LCD1602_write+0x1b8>)
 8002792:	6818      	ldr	r0, [r3, #0]
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <LCD1602_write+0x1c8>)
 8002796:	8819      	ldrh	r1, [r3, #0]
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	f7fe fcb5 	bl	8001110 <HAL_GPIO_WritePin>
		LCD1602_EnablePulse();
 80027a6:	f7ff fef3 	bl	8002590 <LCD1602_EnablePulse>
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000094 	.word	0x20000094
 80027bc:	20000098 	.word	0x20000098
 80027c0:	2000009a 	.word	0x2000009a
 80027c4:	2000009c 	.word	0x2000009c
 80027c8:	2000009e 	.word	0x2000009e
 80027cc:	200000a0 	.word	0x200000a0
 80027d0:	200000a4 	.word	0x200000a4
 80027d4:	200000a6 	.word	0x200000a6
 80027d8:	200000a8 	.word	0x200000a8
 80027dc:	200000aa 	.word	0x200000aa

080027e0 <LCD1602_TIM_Config>:
//4) Microsecond delay functions
void LCD1602_TIM_Config(void)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef myCLKtypeDef;
	uint32_t clockSpeed;
	uint32_t flashLatencyVar;
	HAL_RCC_GetClockConfig(&myCLKtypeDef, &flashLatencyVar);
 80027e6:	1d3a      	adds	r2, r7, #4
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff f8fa 	bl	80019e8 <HAL_RCC_GetClockConfig>
	if(myCLKtypeDef.APB1CLKDivider == RCC_HCLK_DIV1)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d103      	bne.n	8002802 <LCD1602_TIM_Config+0x22>
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq();
 80027fa:	f7ff f8b1 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 80027fe:	61f8      	str	r0, [r7, #28]
 8002800:	e004      	b.n	800280c <LCD1602_TIM_Config+0x2c>
	}
	else
	{
		clockSpeed = HAL_RCC_GetPCLK1Freq()*2;
 8002802:	f7ff f8ad 	bl	8001960 <HAL_RCC_GetPCLK1Freq>
 8002806:	4603      	mov	r3, r0
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
	}
	clockSpeed *= 0.000001;
 800280c:	69f8      	ldr	r0, [r7, #28]
 800280e:	f7fd fe79 	bl	8000504 <__aeabi_ui2d>
 8002812:	a321      	add	r3, pc, #132	; (adr r3, 8002898 <LCD1602_TIM_Config+0xb8>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd feee 	bl	80005f8 <__aeabi_dmul>
 800281c:	4603      	mov	r3, r0
 800281e:	460c      	mov	r4, r1
 8002820:	4618      	mov	r0, r3
 8002822:	4621      	mov	r1, r4
 8002824:	f7fe f8fa 	bl	8000a1c <__aeabi_d2uiz>
 8002828:	4603      	mov	r3, r0
 800282a:	61fb      	str	r3, [r7, #28]

	//Enable clock for TIM2 timer
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;  // 0x1
 800282c:	4b18      	ldr	r3, [pc, #96]	; (8002890 <LCD1602_TIM_Config+0xb0>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <LCD1602_TIM_Config+0xb0>)
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
	//Set the mode to Count up
	TIM3->CR1 &= ~(0x0010);
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 800283e:	f023 0310 	bic.w	r3, r3, #16
 8002842:	6013      	str	r3, [r2, #0]
	//Enable Update Event
	TIM3->CR1 &= ~(0x0001);
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]
	//Update request source
	TIM3->CR1 &= ~(1UL << 2);
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6013      	str	r3, [r2, #0]
	// Set bit 3 High to enable One-Pulse mode
	TIM3->CR1 |= (1UL << 3);
 800285c:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6013      	str	r3, [r2, #0]
	//Set the Prescalar
	TIM3->PSC = clockSpeed-1;
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b01      	subs	r3, #1
 800286e:	6293      	str	r3, [r2, #40]	; 0x28
	//Set and Auto-Reload Value to delay the timer 1 sec
	TIM3->ARR = 10-1; 								// The Flag sets when overflows
 8002870:	4b08      	ldr	r3, [pc, #32]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 8002872:	2209      	movs	r2, #9
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
	//Event generation handling to reset the counter
	TIM3->EGR = 1; 					//Update generate auto
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 8002878:	2201      	movs	r2, #1
 800287a:	615a      	str	r2, [r3, #20]
	TIM3->SR &= ~(0x0001);	//Clear Update interrupt flag
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <LCD1602_TIM_Config+0xb4>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6113      	str	r3, [r2, #16]
}
 8002888:	bf00      	nop
 800288a:	3724      	adds	r7, #36	; 0x24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd90      	pop	{r4, r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	40000400 	.word	0x40000400
 8002898:	a0b5ed8d 	.word	0xa0b5ed8d
 800289c:	3eb0c6f7 	.word	0x3eb0c6f7

080028a0 <LCD1602_TIM_MicorSecDelay>:
void LCD1602_TIM_MicorSecDelay(uint32_t uSecDelay)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	TIM3->ARR = uSecDelay-1;
 80028a8:	4a0e      	ldr	r2, [pc, #56]	; (80028e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM3->SR &= ~(0x0001);  // Clear UEV flag
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6113      	str	r3, [r2, #16]
	TIM3->CR1 |= 1UL;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6013      	str	r3, [r2, #0]
	while((TIM3->SR&0x0001) != 1);
 80028c8:	bf00      	nop
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <LCD1602_TIM_MicorSecDelay+0x44>)
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d1f9      	bne.n	80028ca <LCD1602_TIM_MicorSecDelay+0x2a>
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40000400 	.word	0x40000400

080028e8 <LCD1602_writeCommand>:
//5) Write command
void LCD1602_writeCommand(uint8_t command)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
	//Set RS to 0
	LCD1602_RS(false);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff fe6c 	bl	80025d0 <LCD1602_RS>
	//Call low level write parallel function
	LCD1602_write(command);
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fe8a 	bl	8002614 <LCD1602_write>
}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <LCD1602_write4bitCommand>:
	//Call low level write parallel function
	LCD1602_write(data);
}
//7) Write 4 bits command, *FOR 4 BITS MODE ONLY*
void LCD1602_write4bitCommand(uint8_t nibble)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	uint8_t LSB_nibble = nibble&0xF;
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	73fb      	strb	r3, [r7, #15]
	//Set RS to 0
	LCD1602_RS(false);
 800291a:	2000      	movs	r0, #0
 800291c:	f7ff fe58 	bl	80025d0 <LCD1602_RS>
	//LSB data
	HAL_GPIO_WritePin(PORT_MSB, D4_PIN, (GPIO_PinState)(LSB_nibble&0x1));
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <LCD1602_write4bitCommand+0x7c>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <LCD1602_write4bitCommand+0x80>)
 8002926:	8819      	ldrh	r1, [r3, #0]
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	f7fe fbed 	bl	8001110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D5_PIN, (GPIO_PinState)(LSB_nibble&0x2));
 8002936:	4b13      	ldr	r3, [pc, #76]	; (8002984 <LCD1602_write4bitCommand+0x7c>)
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <LCD1602_write4bitCommand+0x84>)
 800293c:	8819      	ldrh	r1, [r3, #0]
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	f7fe fbe2 	bl	8001110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D6_PIN, (GPIO_PinState)(LSB_nibble&0x4));
 800294c:	4b0d      	ldr	r3, [pc, #52]	; (8002984 <LCD1602_write4bitCommand+0x7c>)
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <LCD1602_write4bitCommand+0x88>)
 8002952:	8819      	ldrh	r1, [r3, #0]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	f7fe fbd7 	bl	8001110 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORT_MSB, D7_PIN, (GPIO_PinState)(LSB_nibble&0x8));
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <LCD1602_write4bitCommand+0x7c>)
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <LCD1602_write4bitCommand+0x8c>)
 8002968:	8819      	ldrh	r1, [r3, #0]
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	f7fe fbcc 	bl	8001110 <HAL_GPIO_WritePin>
	//Write the Enable pulse
	LCD1602_EnablePulse();
 8002978:	f7ff fe0a 	bl	8002590 <LCD1602_EnablePulse>
}
 800297c:	bf00      	nop
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200000a0 	.word	0x200000a0
 8002988:	200000a4 	.word	0x200000a4
 800298c:	200000a6 	.word	0x200000a6
 8002990:	200000a8 	.word	0x200000a8
 8002994:	200000aa 	.word	0x200000aa

08002998 <LCD1602_Begin4BIT>:
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
	HAL_Delay(2);
}
//2) LCD begin 4 bits function
void LCD1602_Begin4BIT(GPIO_TypeDef* PORT_RS_E, uint16_t RS, uint16_t E, GPIO_TypeDef* PORT_MSBs4to7, uint16_t D4, uint16_t D5, uint16_t D6, uint16_t D7)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	817b      	strh	r3, [r7, #10]
 80029a6:	4613      	mov	r3, r2
 80029a8:	813b      	strh	r3, [r7, #8]
	//Set GPIO Ports and Pins data
	PORT_RS_and_E = PORT_RS_E;
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <LCD1602_Begin4BIT+0xb0>)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6013      	str	r3, [r2, #0]
	PIN_RS = RS;
 80029b0:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <LCD1602_Begin4BIT+0xb4>)
 80029b2:	897b      	ldrh	r3, [r7, #10]
 80029b4:	8013      	strh	r3, [r2, #0]
	PIN_E = E;
 80029b6:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <LCD1602_Begin4BIT+0xb8>)
 80029b8:	893b      	ldrh	r3, [r7, #8]
 80029ba:	8013      	strh	r3, [r2, #0]
	PORT_MSB = PORT_MSBs4to7;
 80029bc:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <LCD1602_Begin4BIT+0xbc>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
	D4_PIN = D4;
 80029c2:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <LCD1602_Begin4BIT+0xc0>)
 80029c4:	8b3b      	ldrh	r3, [r7, #24]
 80029c6:	8013      	strh	r3, [r2, #0]
	D5_PIN = D5;
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <LCD1602_Begin4BIT+0xc4>)
 80029ca:	8bbb      	ldrh	r3, [r7, #28]
 80029cc:	8013      	strh	r3, [r2, #0]
	D6_PIN = D6;
 80029ce:	4a24      	ldr	r2, [pc, #144]	; (8002a60 <LCD1602_Begin4BIT+0xc8>)
 80029d0:	8c3b      	ldrh	r3, [r7, #32]
 80029d2:	8013      	strh	r3, [r2, #0]
	D7_PIN = D7;
 80029d4:	4a23      	ldr	r2, [pc, #140]	; (8002a64 <LCD1602_Begin4BIT+0xcc>)
 80029d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029d8:	8013      	strh	r3, [r2, #0]
	//Initialise microsecond timer
	LCD1602_TIM_Config();
 80029da:	f7ff ff01 	bl	80027e0 <LCD1602_TIM_Config>
	//Set the mode to 4 bits
	mode_8_4_I2C = 2;
 80029de:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <LCD1602_Begin4BIT+0xd0>)
 80029e0:	2202      	movs	r2, #2
 80029e2:	701a      	strb	r2, [r3, #0]
	//Function set variable to 4 bits mode
	FunctionSet = 0x28;
 80029e4:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <LCD1602_Begin4BIT+0xd4>)
 80029e6:	2228      	movs	r2, #40	; 0x28
 80029e8:	701a      	strb	r2, [r3, #0]

	//Initialise LCD
	//1. Wait at least 15ms
	HAL_Delay(20);
 80029ea:	2014      	movs	r0, #20
 80029ec:	f7fe f888 	bl	8000b00 <HAL_Delay>
	//2. Attentions sequence
	LCD1602_write4bitCommand(0x3);
 80029f0:	2003      	movs	r0, #3
 80029f2:	f7ff ff89 	bl	8002908 <LCD1602_write4bitCommand>
	HAL_Delay(5);
 80029f6:	2005      	movs	r0, #5
 80029f8:	f7fe f882 	bl	8000b00 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 80029fc:	2003      	movs	r0, #3
 80029fe:	f7ff ff83 	bl	8002908 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7fe f87c 	bl	8000b00 <HAL_Delay>
	LCD1602_write4bitCommand(0x3);
 8002a08:	2003      	movs	r0, #3
 8002a0a:	f7ff ff7d 	bl	8002908 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7fe f876 	bl	8000b00 <HAL_Delay>
	LCD1602_write4bitCommand(0x2);  //4 bit mode
 8002a14:	2002      	movs	r0, #2
 8002a16:	f7ff ff77 	bl	8002908 <LCD1602_write4bitCommand>
	HAL_Delay(1);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7fe f870 	bl	8000b00 <HAL_Delay>
	//3. Display control (Display ON, Cursor ON, blink cursor)
	LCD1602_writeCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_B | LCD_DISPLAY_C | LCD_DISPLAY_D);
 8002a20:	200f      	movs	r0, #15
 8002a22:	f7ff ff61 	bl	80028e8 <LCD1602_writeCommand>
	//4. Clear LCD and return home
	LCD1602_writeCommand(LCD_CLEARDISPLAY);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7ff ff5e 	bl	80028e8 <LCD1602_writeCommand>
	HAL_Delay(3);
 8002a2c:	2003      	movs	r0, #3
 8002a2e:	f7fe f867 	bl	8000b00 <HAL_Delay>
	//4. Function set; Enable 2 lines, Data length to 8 bits
	LCD1602_writeCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8002a32:	2028      	movs	r0, #40	; 0x28
 8002a34:	f7ff ff58 	bl	80028e8 <LCD1602_writeCommand>
	HAL_Delay(3);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f7fe f861 	bl	8000b00 <HAL_Delay>
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000008c 	.word	0x2000008c
 8002a4c:	20000090 	.word	0x20000090
 8002a50:	20000092 	.word	0x20000092
 8002a54:	200000a0 	.word	0x200000a0
 8002a58:	200000a4 	.word	0x200000a4
 8002a5c:	200000a6 	.word	0x200000a6
 8002a60:	200000a8 	.word	0x200000a8
 8002a64:	200000aa 	.word	0x200000aa
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000002 	.word	0x20000002

08002a70 <main>:
#include "lcd_16x2.h"
#include "task.h"

			
int main(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af04      	add	r7, sp, #16
	HAL_Init();
 8002a76:	f7fd fff1 	bl	8000a5c <HAL_Init>
	SystemClock_Config();
 8002a7a:	f7ff fc37 	bl	80022ec <SystemClock_Config>
	MX_GPIO_Init();
 8002a7e:	f7ff fc9b 	bl	80023b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002a82:	f000 fbb9 	bl	80031f8 <MX_USART2_UART_Init>
	SCH_init(2);
 8002a86:	2002      	movs	r0, #2
 8002a88:	f000 f8ee 	bl	8002c68 <SCH_init>

	LCD1602_Begin4BIT(RS_GPIO_Port, RS_Pin, E_Pin, D4_GPIO_Port, D4_Pin, D5_Pin, D6_Pin, D7_Pin);
 8002a8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a90:	9303      	str	r3, [sp, #12]
 8002a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <main+0x44>)
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <main+0x48>)
 8002aac:	f7ff ff74 	bl	8002998 <LCD1602_Begin4BIT>

	while(1){
 8002ab0:	e7fe      	b.n	8002ab0 <main+0x40>
 8002ab2:	bf00      	nop
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000

08002abc <prosesDetected>:
#include "stm32f4xx.h"
#include "device.h"
#include "stdint.h"


uint8_t prosesDetected(void){
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(pbLeft_GPIO_Port,pbLeft_Pin)== GPIO_PIN_RESET){
 8002ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aca:	4811      	ldr	r0, [pc, #68]	; (8002b10 <prosesDetected+0x54>)
 8002acc:	f7fe fb08 	bl	80010e0 <HAL_GPIO_ReadPin>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <prosesDetected+0x28>
		debounce=(debounce<<1);
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <prosesDetected+0x58>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <prosesDetected+0x58>)
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e009      	b.n	8002af8 <prosesDetected+0x3c>
	} else {
		debounce= (debounce<<1)|1;
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <prosesDetected+0x58>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <prosesDetected+0x58>)
 8002af6:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <prosesDetected+0x58>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d101      	bne.n	8002b04 <prosesDetected+0x48>
		detectedFLag=1;
 8002b00:	2301      	movs	r3, #1
 8002b02:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8002b04:	79fb      	ldrb	r3, [r7, #7]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40020400 	.word	0x40020400
 8002b14:	20000003 	.word	0x20000003

08002b18 <batalDetected>:

uint8_t batalDetected(void){
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
	unsigned char detectedFLag=0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(pbUp_GPIO_Port,pbUp_Pin)== GPIO_PIN_RESET){
 8002b22:	2110      	movs	r1, #16
 8002b24:	4810      	ldr	r0, [pc, #64]	; (8002b68 <batalDetected+0x50>)
 8002b26:	f7fe fadb 	bl	80010e0 <HAL_GPIO_ReadPin>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <batalDetected+0x26>
		debounce=(debounce<<1);
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <batalDetected+0x54>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <batalDetected+0x54>)
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e009      	b.n	8002b52 <batalDetected+0x3a>
	} else {
		debounce= (debounce<<1)|1;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <batalDetected+0x54>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	b25b      	sxtb	r3, r3
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <batalDetected+0x54>)
 8002b50:	701a      	strb	r2, [r3, #0]
	}
	if (debounce==0x03) {
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <batalDetected+0x54>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d101      	bne.n	8002b5e <batalDetected+0x46>
		detectedFLag=1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40020800 	.word	0x40020800
 8002b6c:	20000004 	.word	0x20000004

08002b70 <Detected500>:

uint8_t Detected500(void){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
		unsigned char detectedFLag=0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	71fb      	strb	r3, [r7, #7]
		if(HAL_GPIO_ReadPin(pbDown_GPIO_Port,pbDown_Pin)== GPIO_PIN_RESET){
 8002b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b7e:	4811      	ldr	r0, [pc, #68]	; (8002bc4 <Detected500+0x54>)
 8002b80:	f7fe faae 	bl	80010e0 <HAL_GPIO_ReadPin>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <Detected500+0x28>
			debounce=(debounce<<1);
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <Detected500+0x58>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <Detected500+0x58>)
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e009      	b.n	8002bac <Detected500+0x3c>
		} else {
			debounce= (debounce<<1)|1;
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <Detected500+0x58>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <Detected500+0x58>)
 8002baa:	701a      	strb	r2, [r3, #0]
		}
		if (debounce==0x03) {
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <Detected500+0x58>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d101      	bne.n	8002bb8 <Detected500+0x48>
			detectedFLag=1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	71fb      	strb	r3, [r7, #7]
		}
		return detectedFLag;
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	20000005 	.word	0x20000005

08002bcc <Detected1000>:

uint8_t Detected1000(void){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
	static unsigned char debounce=0xFF;
		unsigned char detectedFLag=0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	71fb      	strb	r3, [r7, #7]
		if(HAL_GPIO_ReadPin(pbRight_GPIO_Port,pbRight_Pin)== GPIO_PIN_RESET){
 8002bd6:	2120      	movs	r1, #32
 8002bd8:	4810      	ldr	r0, [pc, #64]	; (8002c1c <Detected1000+0x50>)
 8002bda:	f7fe fa81 	bl	80010e0 <HAL_GPIO_ReadPin>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d106      	bne.n	8002bf2 <Detected1000+0x26>
			debounce=(debounce<<1);
 8002be4:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <Detected1000+0x54>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <Detected1000+0x54>)
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e009      	b.n	8002c06 <Detected1000+0x3a>
		} else {
			debounce= (debounce<<1)|1;
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <Detected1000+0x54>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	b25b      	sxtb	r3, r3
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <Detected1000+0x54>)
 8002c04:	701a      	strb	r2, [r3, #0]
		}
		if (debounce==0x03) {
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <Detected1000+0x54>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d101      	bne.n	8002c12 <Detected1000+0x46>
			detectedFLag=1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	71fb      	strb	r3, [r7, #7]
		}
		return detectedFLag;
 8002c12:	79fb      	ldrb	r3, [r7, #7]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	20000006 	.word	0x20000006

08002c24 <TIM4_IRQHandler>:
#include "device.h"
#include "task.h"
TIM_HandleTypeDef TIM_Handle;

void TIM4_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_FLAG(&TIM_Handle, TIM_FLAG_UPDATE) != RESET)      //In case other interrupts are also running
 8002c28:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <TIM4_IRQHandler+0x3c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d112      	bne.n	8002c5c <TIM4_IRQHandler+0x38>
	{
		if (__HAL_TIM_GET_ITSTATUS(&TIM_Handle, TIM_IT_UPDATE) != RESET)
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <TIM4_IRQHandler+0x3c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d10b      	bne.n	8002c5c <TIM4_IRQHandler+0x38>
		{
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle, TIM_FLAG_UPDATE);
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <TIM4_IRQHandler+0x3c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0201 	mvn.w	r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
			/*put your code here */
			HAL_GPIO_TogglePin(led0_GPIO_Port,led0_Pin);
 8002c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c52:	4804      	ldr	r0, [pc, #16]	; (8002c64 <TIM4_IRQHandler+0x40>)
 8002c54:	f7fe fa75 	bl	8001142 <HAL_GPIO_TogglePin>
			Task_Run();
 8002c58:	f000 f918 	bl	8002e8c <Task_Run>
		}
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200000d8 	.word	0x200000d8
 8002c64:	40020c00 	.word	0x40020c00

08002c68 <SCH_init>:

void SCH_init(uint32_t Periode){
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	 *	then interval timer= periode*tick
	 *	Periode= IntervalTimer/Tick
	 *	Periode= 1ms/0.5ms
	 *	Periode=2
	 */
		__TIM4_CLK_ENABLE();
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <SCH_init+0x68>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	4a15      	ldr	r2, [pc, #84]	; (8002cd0 <SCH_init+0x68>)
 8002c7a:	f043 0304 	orr.w	r3, r3, #4
 8002c7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <SCH_init+0x68>)
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
		TIM_Handle.Init.Prescaler = 42000-1;
 8002c8c:	4b11      	ldr	r3, [pc, #68]	; (8002cd4 <SCH_init+0x6c>)
 8002c8e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002c92:	605a      	str	r2, [r3, #4]
		TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <SCH_init+0x6c>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
		TIM_Handle.Init.Period = (Periode*2)-1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <SCH_init+0x6c>)
 8002ca2:	60d3      	str	r3, [r2, #12]
		TIM_Handle.Instance = TIM4;   //Same timer whose clocks we enabled
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <SCH_init+0x6c>)
 8002ca6:	4a0c      	ldr	r2, [pc, #48]	; (8002cd8 <SCH_init+0x70>)
 8002ca8:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Init(&TIM_Handle);     // Init timer
 8002caa:	480a      	ldr	r0, [pc, #40]	; (8002cd4 <SCH_init+0x6c>)
 8002cac:	f7fe fece 	bl	8001a4c <HAL_TIM_Base_Init>
		HAL_TIM_Base_Start_IT(&TIM_Handle); // start timer interrupts
 8002cb0:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <SCH_init+0x6c>)
 8002cb2:	f7fe ff00 	bl	8001ab6 <HAL_TIM_Base_Start_IT>
		HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	2100      	movs	r1, #0
 8002cba:	201e      	movs	r0, #30
 8002cbc:	f7fe f815 	bl	8000cea <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002cc0:	201e      	movs	r0, #30
 8002cc2:	f7fe f82e 	bl	8000d22 <HAL_NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	200000d8 	.word	0x200000d8
 8002cd8:	40000800 	.word	0x40000800

08002cdc <SysTick_Handler>:
  * @brief  This function handles SysTick Handler, but only if no RTOS defines it.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002ce0:	f7fd fef4 	bl	8000acc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002ce4:	f7fe f854 	bl	8000d90 <HAL_SYSTICK_IRQHandler>
#ifdef USE_RTOS_SYSTICK
	osSystickHandler();
#endif
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	e00a      	b.n	8002d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cfe:	f3af 8000 	nop.w
 8002d02:	4601      	mov	r1, r0
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	60ba      	str	r2, [r7, #8]
 8002d0a:	b2ca      	uxtb	r2, r1
 8002d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dbf0      	blt.n	8002cfe <_read+0x12>
	}

return len;
 8002d1c:	687b      	ldr	r3, [r7, #4]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <_write>:

int _write(int file, char *ptr, int len)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e009      	b.n	8002d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	60ba      	str	r2, [r7, #8]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fa47 	bl	80031d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	dbf1      	blt.n	8002d38 <_write+0x12>
	}
	return len;
 8002d54:	687b      	ldr	r3, [r7, #4]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <_sbrk+0x50>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d102      	bne.n	8002d76 <_sbrk+0x16>
		heap_end = &end;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <_sbrk+0x50>)
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <_sbrk+0x54>)
 8002d74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <_sbrk+0x50>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <_sbrk+0x50>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4413      	add	r3, r2
 8002d84:	466a      	mov	r2, sp
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d907      	bls.n	8002d9a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002d8a:	f000 fabd 	bl	8003308 <__errno>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	230c      	movs	r3, #12
 8002d92:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	e006      	b.n	8002da8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <_sbrk+0x50>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	4a03      	ldr	r2, [pc, #12]	; (8002db0 <_sbrk+0x50>)
 8002da4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	200000b0 	.word	0x200000b0
 8002db4:	20000160 	.word	0x20000160

08002db8 <_close>:

int _close(int file)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	return -1;
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de0:	605a      	str	r2, [r3, #4]
	return 0;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_isatty>:

int _isatty(int file)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	return 1;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
	return 0;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <SystemInit+0x60>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <SystemInit+0x60>)
 8002e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <SystemInit+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a12      	ldr	r2, [pc, #72]	; (8002e84 <SystemInit+0x64>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <SystemInit+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <SystemInit+0x64>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <SystemInit+0x64>)
 8002e4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e56:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <SystemInit+0x64>)
 8002e58:	4a0b      	ldr	r2, [pc, #44]	; (8002e88 <SystemInit+0x68>)
 8002e5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <SystemInit+0x64>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a08      	ldr	r2, [pc, #32]	; (8002e84 <SystemInit+0x64>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <SystemInit+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SystemInit+0x60>)
 8002e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e74:	609a      	str	r2, [r3, #8]
#endif
}
 8002e76:	bf00      	nop
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	e000ed00 	.word	0xe000ed00
 8002e84:	40023800 	.word	0x40023800
 8002e88:	24003010 	.word	0x24003010

08002e8c <Task_Run>:

void Task_Init(void){
	stateku=mulai;
}

void Task_Run(void){
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	if (batalDetected()){
		batal=1;
	}*/

	//	USARTPutStr("."); //current state
	switch(stateku)
 8002e90:	4bc4      	ldr	r3, [pc, #784]	; (80031a4 <Task_Run+0x318>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	f200 8182 	bhi.w	800319e <Task_Run+0x312>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <Task_Run+0x14>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ebd 	.word	0x08002ebd
 8002ea4:	08002ed1 	.word	0x08002ed1
 8002ea8:	08002f3f 	.word	0x08002f3f
 8002eac:	08002fc9 	.word	0x08002fc9
 8002eb0:	080030cd 	.word	0x080030cd
 8002eb4:	0800312b 	.word	0x0800312b
 8002eb8:	08003029 	.word	0x08003029
	{
	case mulai:
	{
		printf("******EEPIS VENDING MACHINE****** \n\r");
 8002ebc:	48ba      	ldr	r0, [pc, #744]	; (80031a8 <Task_Run+0x31c>)
 8002ebe:	f000 fa55 	bl	800336c <iprintf>
		printf("**********MASUKKAN UANG*********** \n\r");
 8002ec2:	48ba      	ldr	r0, [pc, #744]	; (80031ac <Task_Run+0x320>)
 8002ec4:	f000 fa52 	bl	800336c <iprintf>
		stateku=stawal;
 8002ec8:	4bb6      	ldr	r3, [pc, #728]	; (80031a4 <Task_Run+0x318>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
		break;
 8002ece:	e166      	b.n	800319e <Task_Run+0x312>

	}
	case stawal:
	{

		MerahON;
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ed6:	48b6      	ldr	r0, [pc, #728]	; (80031b0 <Task_Run+0x324>)
 8002ed8:	f7fe f91a 	bl	8001110 <HAL_GPIO_WritePin>
		KuningON;
 8002edc:	2201      	movs	r2, #1
 8002ede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ee2:	48b3      	ldr	r0, [pc, #716]	; (80031b0 <Task_Run+0x324>)
 8002ee4:	f7fe f914 	bl	8001110 <HAL_GPIO_WritePin>
		HijauON;
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002eee:	48b0      	ldr	r0, [pc, #704]	; (80031b0 <Task_Run+0x324>)
 8002ef0:	f7fe f90e 	bl	8001110 <HAL_GPIO_WritePin>
		BiruON;
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002efa:	48ad      	ldr	r0, [pc, #692]	; (80031b0 <Task_Run+0x324>)
 8002efc:	f7fe f908 	bl	8001110 <HAL_GPIO_WritePin>
		CoklatON;
 8002f00:	2201      	movs	r2, #1
 8002f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f06:	48ab      	ldr	r0, [pc, #684]	; (80031b4 <Task_Run+0x328>)
 8002f08:	f7fe f902 	bl	8001110 <HAL_GPIO_WritePin>
		//printf("Merah ON \n\r");
		//printf("Masukkan Uang \n\r");
		//print_UART2("masuk \n\r" ,8);
		//UART_Print("*******MASUKKAN UANG******* \n\r");
		if(Detected500()){
 8002f0c:	f7ff fe30 	bl	8002b70 <Detected500>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <Task_Run+0x98>
			UART_Print("Uang Anda Rp.500 \n\r");
 8002f16:	48a8      	ldr	r0, [pc, #672]	; (80031b8 <Task_Run+0x32c>)
 8002f18:	f000 f9b8 	bl	800328c <UART_Print>
			stateku=st500;
 8002f1c:	4ba1      	ldr	r3, [pc, #644]	; (80031a4 <Task_Run+0x318>)
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
				BTN=0;
			}
			Time_in_state=0;
		}*/

		break;
 8002f22:	e131      	b.n	8003188 <Task_Run+0x2fc>
		else if(Detected1000()){
 8002f24:	f7ff fe52 	bl	8002bcc <Detected1000>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 812c 	beq.w	8003188 <Task_Run+0x2fc>
			UART_Print("Uang Anda Rp.1000 \n\r");
 8002f30:	48a2      	ldr	r0, [pc, #648]	; (80031bc <Task_Run+0x330>)
 8002f32:	f000 f9ab 	bl	800328c <UART_Print>
			stateku=stakhir;
 8002f36:	4b9b      	ldr	r3, [pc, #620]	; (80031a4 <Task_Run+0x318>)
 8002f38:	2206      	movs	r2, #6
 8002f3a:	701a      	strb	r2, [r3, #0]
		break;
 8002f3c:	e124      	b.n	8003188 <Task_Run+0x2fc>
	}

	case st500:
	{
		MerahOFF;
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f44:	489a      	ldr	r0, [pc, #616]	; (80031b0 <Task_Run+0x324>)
 8002f46:	f7fe f8e3 	bl	8001110 <HAL_GPIO_WritePin>
		KuningON;
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f50:	4897      	ldr	r0, [pc, #604]	; (80031b0 <Task_Run+0x324>)
 8002f52:	f7fe f8dd 	bl	8001110 <HAL_GPIO_WritePin>
		HijauON;
 8002f56:	2201      	movs	r2, #1
 8002f58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f5c:	4894      	ldr	r0, [pc, #592]	; (80031b0 <Task_Run+0x324>)
 8002f5e:	f7fe f8d7 	bl	8001110 <HAL_GPIO_WritePin>
		BiruON;
 8002f62:	2201      	movs	r2, #1
 8002f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f68:	4891      	ldr	r0, [pc, #580]	; (80031b0 <Task_Run+0x324>)
 8002f6a:	f7fe f8d1 	bl	8001110 <HAL_GPIO_WritePin>
		CoklatON;
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f74:	488f      	ldr	r0, [pc, #572]	; (80031b4 <Task_Run+0x328>)
 8002f76:	f7fe f8cb 	bl	8001110 <HAL_GPIO_WritePin>
		//printf("Merah_kuning ON \n\r");
		//printf("Rp.500 \n\r");
		//HAL_GPIO_WritePin(led2_GPIO_Port,led2_Pin,GPIO_PIN_SET);
		if(Detected500()){
 8002f7a:	f7ff fdf9 	bl	8002b70 <Detected500>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <Task_Run+0x106>
			UART_Print("Uang Anda Rp.1000 \n\r");
 8002f84:	488d      	ldr	r0, [pc, #564]	; (80031bc <Task_Run+0x330>)
 8002f86:	f000 f981 	bl	800328c <UART_Print>
			stateku=stakhir;
 8002f8a:	4b86      	ldr	r3, [pc, #536]	; (80031a4 <Task_Run+0x318>)
 8002f8c:	2206      	movs	r2, #6
 8002f8e:	701a      	strb	r2, [r3, #0]
 8002f90:	e00d      	b.n	8002fae <Task_Run+0x122>

		}
		else if(Detected1000()){
 8002f92:	f7ff fe1b 	bl	8002bcc <Detected1000>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <Task_Run+0x122>
			UART_Print("Uang Kembali Rp.500 \n\r");
 8002f9c:	4888      	ldr	r0, [pc, #544]	; (80031c0 <Task_Run+0x334>)
 8002f9e:	f000 f975 	bl	800328c <UART_Print>
			UART_Print("Uang Anda Rp.1000 \n\r");
 8002fa2:	4886      	ldr	r0, [pc, #536]	; (80031bc <Task_Run+0x330>)
 8002fa4:	f000 f972 	bl	800328c <UART_Print>
			stateku=st500kembali;
 8002fa8:	4b7e      	ldr	r3, [pc, #504]	; (80031a4 <Task_Run+0x318>)
 8002faa:	2204      	movs	r2, #4
 8002fac:	701a      	strb	r2, [r3, #0]

		}

		if(batalDetected()){
 8002fae:	f7ff fdb3 	bl	8002b18 <batalDetected>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80e9 	beq.w	800318c <Task_Run+0x300>
			//printf("Uang Keluar \n\r");
			UART_Print("Uang Keluar \n\r");
 8002fba:	4882      	ldr	r0, [pc, #520]	; (80031c4 <Task_Run+0x338>)
 8002fbc:	f000 f966 	bl	800328c <UART_Print>
			stateku=stawal;
 8002fc0:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <Task_Run+0x318>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
				BTN=0;
			}
			Time_in_state=0;

		}*/
		break;
 8002fc6:	e0e1      	b.n	800318c <Task_Run+0x300>
	}

	case st1000:
	{

		MerahON;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fce:	4878      	ldr	r0, [pc, #480]	; (80031b0 <Task_Run+0x324>)
 8002fd0:	f7fe f89e 	bl	8001110 <HAL_GPIO_WritePin>
		KuningON;
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fda:	4875      	ldr	r0, [pc, #468]	; (80031b0 <Task_Run+0x324>)
 8002fdc:	f7fe f898 	bl	8001110 <HAL_GPIO_WritePin>
		HijauOFF;
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fe6:	4872      	ldr	r0, [pc, #456]	; (80031b0 <Task_Run+0x324>)
 8002fe8:	f7fe f892 	bl	8001110 <HAL_GPIO_WritePin>
		BiruON;
 8002fec:	2201      	movs	r2, #1
 8002fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ff2:	486f      	ldr	r0, [pc, #444]	; (80031b0 <Task_Run+0x324>)
 8002ff4:	f7fe f88c 	bl	8001110 <HAL_GPIO_WritePin>
		CoklatON;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ffe:	486d      	ldr	r0, [pc, #436]	; (80031b4 <Task_Run+0x328>)
 8003000:	f7fe f886 	bl	8001110 <HAL_GPIO_WritePin>
		if(++Time_in_state==LAMA_KUNING){
 8003004:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <Task_Run+0x33c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	4a6f      	ldr	r2, [pc, #444]	; (80031c8 <Task_Run+0x33c>)
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b6e      	ldr	r3, [pc, #440]	; (80031c8 <Task_Run+0x33c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003016:	f040 80bb 	bne.w	8003190 <Task_Run+0x304>
		//printf("Rp.1000 \n\r");
		stateku=stawal;
 800301a:	4b62      	ldr	r3, [pc, #392]	; (80031a4 <Task_Run+0x318>)
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
		Time_in_state=0;
 8003020:	4b69      	ldr	r3, [pc, #420]	; (80031c8 <Task_Run+0x33c>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
				BTN=0;
			}
			Time_in_state=0;
		}*/

		break;
 8003026:	e0b3      	b.n	8003190 <Task_Run+0x304>
	}

	case stakhir:
	{
		MerahON;
 8003028:	2201      	movs	r2, #1
 800302a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800302e:	4860      	ldr	r0, [pc, #384]	; (80031b0 <Task_Run+0x324>)
 8003030:	f7fe f86e 	bl	8001110 <HAL_GPIO_WritePin>
		KuningOFF;
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800303a:	485d      	ldr	r0, [pc, #372]	; (80031b0 <Task_Run+0x324>)
 800303c:	f7fe f868 	bl	8001110 <HAL_GPIO_WritePin>
		HijauON;
 8003040:	2201      	movs	r2, #1
 8003042:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003046:	485a      	ldr	r0, [pc, #360]	; (80031b0 <Task_Run+0x324>)
 8003048:	f7fe f862 	bl	8001110 <HAL_GPIO_WritePin>
		BiruON;
 800304c:	2201      	movs	r2, #1
 800304e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003052:	4857      	ldr	r0, [pc, #348]	; (80031b0 <Task_Run+0x324>)
 8003054:	f7fe f85c 	bl	8001110 <HAL_GPIO_WritePin>
		CoklatON;
 8003058:	2201      	movs	r2, #1
 800305a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800305e:	4855      	ldr	r0, [pc, #340]	; (80031b4 <Task_Run+0x328>)
 8003060:	f7fe f856 	bl	8001110 <HAL_GPIO_WritePin>

		if(Detected500()){
 8003064:	f7ff fd84 	bl	8002b70 <Detected500>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <Task_Run+0x1f6>
			UART_Print("Uang Kembali Rp.500 \n\r");
 800306e:	4854      	ldr	r0, [pc, #336]	; (80031c0 <Task_Run+0x334>)
 8003070:	f000 f90c 	bl	800328c <UART_Print>
			UART_Print("Uang Anda Rp.1000 \n\r");
 8003074:	4851      	ldr	r0, [pc, #324]	; (80031bc <Task_Run+0x330>)
 8003076:	f000 f909 	bl	800328c <UART_Print>
			stateku=st500kembali;
 800307a:	4b4a      	ldr	r3, [pc, #296]	; (80031a4 <Task_Run+0x318>)
 800307c:	2204      	movs	r2, #4
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e00d      	b.n	800309e <Task_Run+0x212>
		}
		else if(Detected1000()){
 8003082:	f7ff fda3 	bl	8002bcc <Detected1000>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <Task_Run+0x212>
			UART_Print("Uang Kembali Rp.1000 \n\r");
 800308c:	484f      	ldr	r0, [pc, #316]	; (80031cc <Task_Run+0x340>)
 800308e:	f000 f8fd 	bl	800328c <UART_Print>
			UART_Print("Uang Anda Rp.1000 \n\r");
 8003092:	484a      	ldr	r0, [pc, #296]	; (80031bc <Task_Run+0x330>)
 8003094:	f000 f8fa 	bl	800328c <UART_Print>
			stateku=st1000kembali;
 8003098:	4b42      	ldr	r3, [pc, #264]	; (80031a4 <Task_Run+0x318>)
 800309a:	2205      	movs	r2, #5
 800309c:	701a      	strb	r2, [r3, #0]
		}

		if(batalDetected()){
 800309e:	f7ff fd3b 	bl	8002b18 <batalDetected>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <Task_Run+0x228>
			UART_Print("Uang Keluar \n\r");
 80030a8:	4846      	ldr	r0, [pc, #280]	; (80031c4 <Task_Run+0x338>)
 80030aa:	f000 f8ef 	bl	800328c <UART_Print>
			stateku=stawal;
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <Task_Run+0x318>)
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]
		}
		//printf("Hijau ON \n\r");
		//HAL_GPIO_WritePin(led2_GPIO_Port,led2_Pin,GPIO_PIN_SET);
		if(prosesDetected()){
 80030b4:	f7ff fd02 	bl	8002abc <prosesDetected>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d06a      	beq.n	8003194 <Task_Run+0x308>
			UART_Print("Permen Keluar \n\r");
 80030be:	4844      	ldr	r0, [pc, #272]	; (80031d0 <Task_Run+0x344>)
 80030c0:	f000 f8e4 	bl	800328c <UART_Print>
			stateku=st1000;
 80030c4:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <Task_Run+0x318>)
 80030c6:	2203      	movs	r2, #3
 80030c8:	701a      	strb	r2, [r3, #0]
				BTN=0;
			}
			Time_in_state=0;
		}*/

		break;
 80030ca:	e063      	b.n	8003194 <Task_Run+0x308>
	}

	case st500kembali:
	{
		//HAL_GPIO_WritePin(led3_GPIO_Port,led3_Pin,GPIO_PIN_SET);
		MerahON;
 80030cc:	2201      	movs	r2, #1
 80030ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030d2:	4837      	ldr	r0, [pc, #220]	; (80031b0 <Task_Run+0x324>)
 80030d4:	f7fe f81c 	bl	8001110 <HAL_GPIO_WritePin>
		KuningON;
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030de:	4834      	ldr	r0, [pc, #208]	; (80031b0 <Task_Run+0x324>)
 80030e0:	f7fe f816 	bl	8001110 <HAL_GPIO_WritePin>
		HijauON;
 80030e4:	2201      	movs	r2, #1
 80030e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ea:	4831      	ldr	r0, [pc, #196]	; (80031b0 <Task_Run+0x324>)
 80030ec:	f7fe f810 	bl	8001110 <HAL_GPIO_WritePin>
		BiruOFF;
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f6:	482e      	ldr	r0, [pc, #184]	; (80031b0 <Task_Run+0x324>)
 80030f8:	f7fe f80a 	bl	8001110 <HAL_GPIO_WritePin>
		CoklatON;
 80030fc:	2201      	movs	r2, #1
 80030fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003102:	482c      	ldr	r0, [pc, #176]	; (80031b4 <Task_Run+0x328>)
 8003104:	f7fe f804 	bl	8001110 <HAL_GPIO_WritePin>
		//printf("kembali Rp.500 \n\r");
		if(++Time_in_state==LAMA_MERAH){
 8003108:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <Task_Run+0x33c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a2e      	ldr	r2, [pc, #184]	; (80031c8 <Task_Run+0x33c>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <Task_Run+0x33c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800311a:	d13d      	bne.n	8003198 <Task_Run+0x30c>
			//printf("Rp.1000 \n\r");
			stateku=stakhir;
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <Task_Run+0x318>)
 800311e:	2206      	movs	r2, #6
 8003120:	701a      	strb	r2, [r3, #0]
				Time_in_state=0;
 8003122:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <Task_Run+0x33c>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
			}


		break;
 8003128:	e036      	b.n	8003198 <Task_Run+0x30c>
	}
	case st1000kembali:
	{
		MerahON;
 800312a:	2201      	movs	r2, #1
 800312c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003130:	481f      	ldr	r0, [pc, #124]	; (80031b0 <Task_Run+0x324>)
 8003132:	f7fd ffed 	bl	8001110 <HAL_GPIO_WritePin>
		KuningON;
 8003136:	2201      	movs	r2, #1
 8003138:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800313c:	481c      	ldr	r0, [pc, #112]	; (80031b0 <Task_Run+0x324>)
 800313e:	f7fd ffe7 	bl	8001110 <HAL_GPIO_WritePin>
		HijauON;
 8003142:	2201      	movs	r2, #1
 8003144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003148:	4819      	ldr	r0, [pc, #100]	; (80031b0 <Task_Run+0x324>)
 800314a:	f7fd ffe1 	bl	8001110 <HAL_GPIO_WritePin>
		BiruON;
 800314e:	2201      	movs	r2, #1
 8003150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003154:	4816      	ldr	r0, [pc, #88]	; (80031b0 <Task_Run+0x324>)
 8003156:	f7fd ffdb 	bl	8001110 <HAL_GPIO_WritePin>
		CoklatOFF;
 800315a:	2200      	movs	r2, #0
 800315c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003160:	4814      	ldr	r0, [pc, #80]	; (80031b4 <Task_Run+0x328>)
 8003162:	f7fd ffd5 	bl	8001110 <HAL_GPIO_WritePin>
		//printf("kembali Rp.1000 \n\r");
		if(++Time_in_state==LAMA_MERAH){
 8003166:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <Task_Run+0x33c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3301      	adds	r3, #1
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <Task_Run+0x33c>)
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <Task_Run+0x33c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003178:	d110      	bne.n	800319c <Task_Run+0x310>
			//printf("Rp.1000 \n\r");
			stateku=stakhir;
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <Task_Run+0x318>)
 800317c:	2206      	movs	r2, #6
 800317e:	701a      	strb	r2, [r3, #0]
			Time_in_state=0;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <Task_Run+0x33c>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
		}


		break;
 8003186:	e009      	b.n	800319c <Task_Run+0x310>
		break;
 8003188:	bf00      	nop
 800318a:	e008      	b.n	800319e <Task_Run+0x312>
		break;
 800318c:	bf00      	nop
 800318e:	e006      	b.n	800319e <Task_Run+0x312>
		break;
 8003190:	bf00      	nop
 8003192:	e004      	b.n	800319e <Task_Run+0x312>
		break;
 8003194:	bf00      	nop
 8003196:	e002      	b.n	800319e <Task_Run+0x312>
		break;
 8003198:	bf00      	nop
 800319a:	e000      	b.n	800319e <Task_Run+0x312>
		break;
 800319c:	bf00      	nop
	}

	}

}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000114 	.word	0x20000114
 80031a8:	0800414c 	.word	0x0800414c
 80031ac:	08004174 	.word	0x08004174
 80031b0:	40020c00 	.word	0x40020c00
 80031b4:	40020400 	.word	0x40020400
 80031b8:	0800419c 	.word	0x0800419c
 80031bc:	080041b0 	.word	0x080041b0
 80031c0:	080041c8 	.word	0x080041c8
 80031c4:	080041e0 	.word	0x080041e0
 80031c8:	200000b4 	.word	0x200000b4
 80031cc:	080041f0 	.word	0x080041f0
 80031d0:	08004208 	.word	0x08004208

080031d4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART */
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 100);
 80031dc:	1d39      	adds	r1, r7, #4
 80031de:	2364      	movs	r3, #100	; 0x64
 80031e0:	2201      	movs	r2, #1
 80031e2:	4804      	ldr	r0, [pc, #16]	; (80031f4 <__io_putchar+0x20>)
 80031e4:	f7fe fd83 	bl	8001cee <HAL_UART_Transmit>
//    __HAL_UART_FLUSH_DRREGISTER(&huart2);
//    fflush(stdout); // This will flush any pending printf output
	return ch;
 80031e8:	687b      	ldr	r3, [r7, #4]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000118 	.word	0x20000118

080031f8 <MX_USART2_UART_Init>:
/* USER CODE END PFP */

void MX_USART2_UART_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	__HAL_RCC_USART2_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4b1e      	ldr	r3, [pc, #120]	; (800327c <MX_USART2_UART_Init+0x84>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	4a1d      	ldr	r2, [pc, #116]	; (800327c <MX_USART2_UART_Init+0x84>)
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	6413      	str	r3, [r2, #64]	; 0x40
 800320e:	4b1b      	ldr	r3, [pc, #108]	; (800327c <MX_USART2_UART_Init+0x84>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
	/**USART2 GPIO Configuration
	    PA2     ------> USART2_TX
	    PA3     ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800321a:	230c      	movs	r3, #12
 800321c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003222:	2301      	movs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003226:	2303      	movs	r3, #3
 8003228:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800322a:	2307      	movs	r3, #7
 800322c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4813      	ldr	r0, [pc, #76]	; (8003280 <MX_USART2_UART_Init+0x88>)
 8003234:	f7fd fdba 	bl	8000dac <HAL_GPIO_Init>
	huart2.Instance = USART2;
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <MX_USART2_UART_Init+0x90>)
 800323c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 8003240:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003244:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003246:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 8003254:	2200      	movs	r2, #0
 8003256:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 800325a:	220c      	movs	r2, #12
 800325c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 8003266:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800326a:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart2);
 800326c:	4805      	ldr	r0, [pc, #20]	; (8003284 <MX_USART2_UART_Init+0x8c>)
 800326e:	f7fe fce7 	bl	8001c40 <HAL_UART_Init>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40020000 	.word	0x40020000
 8003284:	20000118 	.word	0x20000118
 8003288:	40004400 	.word	0x40004400

0800328c <UART_Print>:

void print_UART2(uint8_t string[], uint8_t length){
    HAL_UART_Transmit(&huart2, (uint8_t*)string, length, 5);
}

void UART_Print(char *pData){
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)pData, strlen(pData), 10);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fc ff9b 	bl	80001d0 <strlen>
 800329a:	4603      	mov	r3, r0
 800329c:	b29a      	uxth	r2, r3
 800329e:	230a      	movs	r3, #10
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4803      	ldr	r0, [pc, #12]	; (80032b0 <UART_Print+0x24>)
 80032a4:	f7fe fd23 	bl	8001cee <HAL_UART_Transmit>
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000118 	.word	0x20000118

080032b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ba:	e003      	b.n	80032c4 <LoopCopyDataInit>

080032bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032c2:	3104      	adds	r1, #4

080032c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032c4:	480b      	ldr	r0, [pc, #44]	; (80032f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032c6:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032cc:	d3f6      	bcc.n	80032bc <CopyDataInit>
  ldr  r2, =_sbss
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032d0:	e002      	b.n	80032d8 <LoopFillZerobss>

080032d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032d4:	f842 3b04 	str.w	r3, [r2], #4

080032d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032dc:	d3f9      	bcc.n	80032d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032de:	f7ff fd9f 	bl	8002e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032e2:	f000 f817 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032e6:	f7ff fbc3 	bl	8002a70 <main>
  bx  lr    
 80032ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032f0:	080042d4 	.word	0x080042d4
  ldr  r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032f8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80032fc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8003300:	2000015c 	.word	0x2000015c

08003304 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003304:	e7fe      	b.n	8003304 <ADC_IRQHandler>
	...

08003308 <__errno>:
 8003308:	4b01      	ldr	r3, [pc, #4]	; (8003310 <__errno+0x8>)
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000000c 	.word	0x2000000c

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	4e0d      	ldr	r6, [pc, #52]	; (800334c <__libc_init_array+0x38>)
 8003318:	4c0d      	ldr	r4, [pc, #52]	; (8003350 <__libc_init_array+0x3c>)
 800331a:	1ba4      	subs	r4, r4, r6
 800331c:	10a4      	asrs	r4, r4, #2
 800331e:	2500      	movs	r5, #0
 8003320:	42a5      	cmp	r5, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	4e0b      	ldr	r6, [pc, #44]	; (8003354 <__libc_init_array+0x40>)
 8003326:	4c0c      	ldr	r4, [pc, #48]	; (8003358 <__libc_init_array+0x44>)
 8003328:	f000 ffc4 	bl	80042b4 <_init>
 800332c:	1ba4      	subs	r4, r4, r6
 800332e:	10a4      	asrs	r4, r4, #2
 8003330:	2500      	movs	r5, #0
 8003332:	42a5      	cmp	r5, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800333c:	4798      	blx	r3
 800333e:	3501      	adds	r5, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003346:	4798      	blx	r3
 8003348:	3501      	adds	r5, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	080042cc 	.word	0x080042cc
 8003350:	080042cc 	.word	0x080042cc
 8003354:	080042cc 	.word	0x080042cc
 8003358:	080042d0 	.word	0x080042d0

0800335c <memset>:
 800335c:	4402      	add	r2, r0
 800335e:	4603      	mov	r3, r0
 8003360:	4293      	cmp	r3, r2
 8003362:	d100      	bne.n	8003366 <memset+0xa>
 8003364:	4770      	bx	lr
 8003366:	f803 1b01 	strb.w	r1, [r3], #1
 800336a:	e7f9      	b.n	8003360 <memset+0x4>

0800336c <iprintf>:
 800336c:	b40f      	push	{r0, r1, r2, r3}
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <iprintf+0x2c>)
 8003370:	b513      	push	{r0, r1, r4, lr}
 8003372:	681c      	ldr	r4, [r3, #0]
 8003374:	b124      	cbz	r4, 8003380 <iprintf+0x14>
 8003376:	69a3      	ldr	r3, [r4, #24]
 8003378:	b913      	cbnz	r3, 8003380 <iprintf+0x14>
 800337a:	4620      	mov	r0, r4
 800337c:	f000 f84e 	bl	800341c <__sinit>
 8003380:	ab05      	add	r3, sp, #20
 8003382:	9a04      	ldr	r2, [sp, #16]
 8003384:	68a1      	ldr	r1, [r4, #8]
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	4620      	mov	r0, r4
 800338a:	f000 f955 	bl	8003638 <_vfiprintf_r>
 800338e:	b002      	add	sp, #8
 8003390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003394:	b004      	add	sp, #16
 8003396:	4770      	bx	lr
 8003398:	2000000c 	.word	0x2000000c

0800339c <std>:
 800339c:	2300      	movs	r3, #0
 800339e:	b510      	push	{r4, lr}
 80033a0:	4604      	mov	r4, r0
 80033a2:	e9c0 3300 	strd	r3, r3, [r0]
 80033a6:	6083      	str	r3, [r0, #8]
 80033a8:	8181      	strh	r1, [r0, #12]
 80033aa:	6643      	str	r3, [r0, #100]	; 0x64
 80033ac:	81c2      	strh	r2, [r0, #14]
 80033ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80033b2:	6183      	str	r3, [r0, #24]
 80033b4:	4619      	mov	r1, r3
 80033b6:	2208      	movs	r2, #8
 80033b8:	305c      	adds	r0, #92	; 0x5c
 80033ba:	f7ff ffcf 	bl	800335c <memset>
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <std+0x38>)
 80033c0:	6263      	str	r3, [r4, #36]	; 0x24
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <std+0x3c>)
 80033c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <std+0x40>)
 80033c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80033ca:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <std+0x44>)
 80033cc:	6224      	str	r4, [r4, #32]
 80033ce:	6323      	str	r3, [r4, #48]	; 0x30
 80033d0:	bd10      	pop	{r4, pc}
 80033d2:	bf00      	nop
 80033d4:	08003b95 	.word	0x08003b95
 80033d8:	08003bb7 	.word	0x08003bb7
 80033dc:	08003bef 	.word	0x08003bef
 80033e0:	08003c13 	.word	0x08003c13

080033e4 <_cleanup_r>:
 80033e4:	4901      	ldr	r1, [pc, #4]	; (80033ec <_cleanup_r+0x8>)
 80033e6:	f000 b885 	b.w	80034f4 <_fwalk_reent>
 80033ea:	bf00      	nop
 80033ec:	08003eed 	.word	0x08003eed

080033f0 <__sfmoreglue>:
 80033f0:	b570      	push	{r4, r5, r6, lr}
 80033f2:	1e4a      	subs	r2, r1, #1
 80033f4:	2568      	movs	r5, #104	; 0x68
 80033f6:	4355      	muls	r5, r2
 80033f8:	460e      	mov	r6, r1
 80033fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033fe:	f000 f897 	bl	8003530 <_malloc_r>
 8003402:	4604      	mov	r4, r0
 8003404:	b140      	cbz	r0, 8003418 <__sfmoreglue+0x28>
 8003406:	2100      	movs	r1, #0
 8003408:	e9c0 1600 	strd	r1, r6, [r0]
 800340c:	300c      	adds	r0, #12
 800340e:	60a0      	str	r0, [r4, #8]
 8003410:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003414:	f7ff ffa2 	bl	800335c <memset>
 8003418:	4620      	mov	r0, r4
 800341a:	bd70      	pop	{r4, r5, r6, pc}

0800341c <__sinit>:
 800341c:	6983      	ldr	r3, [r0, #24]
 800341e:	b510      	push	{r4, lr}
 8003420:	4604      	mov	r4, r0
 8003422:	bb33      	cbnz	r3, 8003472 <__sinit+0x56>
 8003424:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003428:	6503      	str	r3, [r0, #80]	; 0x50
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <__sinit+0x58>)
 800342c:	4a12      	ldr	r2, [pc, #72]	; (8003478 <__sinit+0x5c>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6282      	str	r2, [r0, #40]	; 0x28
 8003432:	4298      	cmp	r0, r3
 8003434:	bf04      	itt	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	6183      	streq	r3, [r0, #24]
 800343a:	f000 f81f 	bl	800347c <__sfp>
 800343e:	6060      	str	r0, [r4, #4]
 8003440:	4620      	mov	r0, r4
 8003442:	f000 f81b 	bl	800347c <__sfp>
 8003446:	60a0      	str	r0, [r4, #8]
 8003448:	4620      	mov	r0, r4
 800344a:	f000 f817 	bl	800347c <__sfp>
 800344e:	2200      	movs	r2, #0
 8003450:	60e0      	str	r0, [r4, #12]
 8003452:	2104      	movs	r1, #4
 8003454:	6860      	ldr	r0, [r4, #4]
 8003456:	f7ff ffa1 	bl	800339c <std>
 800345a:	2201      	movs	r2, #1
 800345c:	2109      	movs	r1, #9
 800345e:	68a0      	ldr	r0, [r4, #8]
 8003460:	f7ff ff9c 	bl	800339c <std>
 8003464:	2202      	movs	r2, #2
 8003466:	2112      	movs	r1, #18
 8003468:	68e0      	ldr	r0, [r4, #12]
 800346a:	f7ff ff97 	bl	800339c <std>
 800346e:	2301      	movs	r3, #1
 8003470:	61a3      	str	r3, [r4, #24]
 8003472:	bd10      	pop	{r4, pc}
 8003474:	0800421c 	.word	0x0800421c
 8003478:	080033e5 	.word	0x080033e5

0800347c <__sfp>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <__sfp+0x70>)
 8003480:	681e      	ldr	r6, [r3, #0]
 8003482:	69b3      	ldr	r3, [r6, #24]
 8003484:	4607      	mov	r7, r0
 8003486:	b913      	cbnz	r3, 800348e <__sfp+0x12>
 8003488:	4630      	mov	r0, r6
 800348a:	f7ff ffc7 	bl	800341c <__sinit>
 800348e:	3648      	adds	r6, #72	; 0x48
 8003490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003494:	3b01      	subs	r3, #1
 8003496:	d503      	bpl.n	80034a0 <__sfp+0x24>
 8003498:	6833      	ldr	r3, [r6, #0]
 800349a:	b133      	cbz	r3, 80034aa <__sfp+0x2e>
 800349c:	6836      	ldr	r6, [r6, #0]
 800349e:	e7f7      	b.n	8003490 <__sfp+0x14>
 80034a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80034a4:	b16d      	cbz	r5, 80034c2 <__sfp+0x46>
 80034a6:	3468      	adds	r4, #104	; 0x68
 80034a8:	e7f4      	b.n	8003494 <__sfp+0x18>
 80034aa:	2104      	movs	r1, #4
 80034ac:	4638      	mov	r0, r7
 80034ae:	f7ff ff9f 	bl	80033f0 <__sfmoreglue>
 80034b2:	6030      	str	r0, [r6, #0]
 80034b4:	2800      	cmp	r0, #0
 80034b6:	d1f1      	bne.n	800349c <__sfp+0x20>
 80034b8:	230c      	movs	r3, #12
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4604      	mov	r4, r0
 80034be:	4620      	mov	r0, r4
 80034c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <__sfp+0x74>)
 80034c4:	6665      	str	r5, [r4, #100]	; 0x64
 80034c6:	e9c4 5500 	strd	r5, r5, [r4]
 80034ca:	60a5      	str	r5, [r4, #8]
 80034cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80034d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80034d4:	2208      	movs	r2, #8
 80034d6:	4629      	mov	r1, r5
 80034d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034dc:	f7ff ff3e 	bl	800335c <memset>
 80034e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034e8:	e7e9      	b.n	80034be <__sfp+0x42>
 80034ea:	bf00      	nop
 80034ec:	0800421c 	.word	0x0800421c
 80034f0:	ffff0001 	.word	0xffff0001

080034f4 <_fwalk_reent>:
 80034f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f8:	4680      	mov	r8, r0
 80034fa:	4689      	mov	r9, r1
 80034fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003500:	2600      	movs	r6, #0
 8003502:	b914      	cbnz	r4, 800350a <_fwalk_reent+0x16>
 8003504:	4630      	mov	r0, r6
 8003506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800350a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800350e:	3f01      	subs	r7, #1
 8003510:	d501      	bpl.n	8003516 <_fwalk_reent+0x22>
 8003512:	6824      	ldr	r4, [r4, #0]
 8003514:	e7f5      	b.n	8003502 <_fwalk_reent+0xe>
 8003516:	89ab      	ldrh	r3, [r5, #12]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d907      	bls.n	800352c <_fwalk_reent+0x38>
 800351c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003520:	3301      	adds	r3, #1
 8003522:	d003      	beq.n	800352c <_fwalk_reent+0x38>
 8003524:	4629      	mov	r1, r5
 8003526:	4640      	mov	r0, r8
 8003528:	47c8      	blx	r9
 800352a:	4306      	orrs	r6, r0
 800352c:	3568      	adds	r5, #104	; 0x68
 800352e:	e7ee      	b.n	800350e <_fwalk_reent+0x1a>

08003530 <_malloc_r>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	1ccd      	adds	r5, r1, #3
 8003534:	f025 0503 	bic.w	r5, r5, #3
 8003538:	3508      	adds	r5, #8
 800353a:	2d0c      	cmp	r5, #12
 800353c:	bf38      	it	cc
 800353e:	250c      	movcc	r5, #12
 8003540:	2d00      	cmp	r5, #0
 8003542:	4606      	mov	r6, r0
 8003544:	db01      	blt.n	800354a <_malloc_r+0x1a>
 8003546:	42a9      	cmp	r1, r5
 8003548:	d903      	bls.n	8003552 <_malloc_r+0x22>
 800354a:	230c      	movs	r3, #12
 800354c:	6033      	str	r3, [r6, #0]
 800354e:	2000      	movs	r0, #0
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	f000 fd6b 	bl	800402c <__malloc_lock>
 8003556:	4a21      	ldr	r2, [pc, #132]	; (80035dc <_malloc_r+0xac>)
 8003558:	6814      	ldr	r4, [r2, #0]
 800355a:	4621      	mov	r1, r4
 800355c:	b991      	cbnz	r1, 8003584 <_malloc_r+0x54>
 800355e:	4c20      	ldr	r4, [pc, #128]	; (80035e0 <_malloc_r+0xb0>)
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	b91b      	cbnz	r3, 800356c <_malloc_r+0x3c>
 8003564:	4630      	mov	r0, r6
 8003566:	f000 fb05 	bl	8003b74 <_sbrk_r>
 800356a:	6020      	str	r0, [r4, #0]
 800356c:	4629      	mov	r1, r5
 800356e:	4630      	mov	r0, r6
 8003570:	f000 fb00 	bl	8003b74 <_sbrk_r>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d124      	bne.n	80035c2 <_malloc_r+0x92>
 8003578:	230c      	movs	r3, #12
 800357a:	6033      	str	r3, [r6, #0]
 800357c:	4630      	mov	r0, r6
 800357e:	f000 fd56 	bl	800402e <__malloc_unlock>
 8003582:	e7e4      	b.n	800354e <_malloc_r+0x1e>
 8003584:	680b      	ldr	r3, [r1, #0]
 8003586:	1b5b      	subs	r3, r3, r5
 8003588:	d418      	bmi.n	80035bc <_malloc_r+0x8c>
 800358a:	2b0b      	cmp	r3, #11
 800358c:	d90f      	bls.n	80035ae <_malloc_r+0x7e>
 800358e:	600b      	str	r3, [r1, #0]
 8003590:	50cd      	str	r5, [r1, r3]
 8003592:	18cc      	adds	r4, r1, r3
 8003594:	4630      	mov	r0, r6
 8003596:	f000 fd4a 	bl	800402e <__malloc_unlock>
 800359a:	f104 000b 	add.w	r0, r4, #11
 800359e:	1d23      	adds	r3, r4, #4
 80035a0:	f020 0007 	bic.w	r0, r0, #7
 80035a4:	1ac3      	subs	r3, r0, r3
 80035a6:	d0d3      	beq.n	8003550 <_malloc_r+0x20>
 80035a8:	425a      	negs	r2, r3
 80035aa:	50e2      	str	r2, [r4, r3]
 80035ac:	e7d0      	b.n	8003550 <_malloc_r+0x20>
 80035ae:	428c      	cmp	r4, r1
 80035b0:	684b      	ldr	r3, [r1, #4]
 80035b2:	bf16      	itet	ne
 80035b4:	6063      	strne	r3, [r4, #4]
 80035b6:	6013      	streq	r3, [r2, #0]
 80035b8:	460c      	movne	r4, r1
 80035ba:	e7eb      	b.n	8003594 <_malloc_r+0x64>
 80035bc:	460c      	mov	r4, r1
 80035be:	6849      	ldr	r1, [r1, #4]
 80035c0:	e7cc      	b.n	800355c <_malloc_r+0x2c>
 80035c2:	1cc4      	adds	r4, r0, #3
 80035c4:	f024 0403 	bic.w	r4, r4, #3
 80035c8:	42a0      	cmp	r0, r4
 80035ca:	d005      	beq.n	80035d8 <_malloc_r+0xa8>
 80035cc:	1a21      	subs	r1, r4, r0
 80035ce:	4630      	mov	r0, r6
 80035d0:	f000 fad0 	bl	8003b74 <_sbrk_r>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d0cf      	beq.n	8003578 <_malloc_r+0x48>
 80035d8:	6025      	str	r5, [r4, #0]
 80035da:	e7db      	b.n	8003594 <_malloc_r+0x64>
 80035dc:	200000cc 	.word	0x200000cc
 80035e0:	200000d0 	.word	0x200000d0

080035e4 <__sfputc_r>:
 80035e4:	6893      	ldr	r3, [r2, #8]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	b410      	push	{r4}
 80035ec:	6093      	str	r3, [r2, #8]
 80035ee:	da08      	bge.n	8003602 <__sfputc_r+0x1e>
 80035f0:	6994      	ldr	r4, [r2, #24]
 80035f2:	42a3      	cmp	r3, r4
 80035f4:	db01      	blt.n	80035fa <__sfputc_r+0x16>
 80035f6:	290a      	cmp	r1, #10
 80035f8:	d103      	bne.n	8003602 <__sfputc_r+0x1e>
 80035fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035fe:	f000 bb0d 	b.w	8003c1c <__swbuf_r>
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	1c58      	adds	r0, r3, #1
 8003606:	6010      	str	r0, [r2, #0]
 8003608:	7019      	strb	r1, [r3, #0]
 800360a:	4608      	mov	r0, r1
 800360c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003610:	4770      	bx	lr

08003612 <__sfputs_r>:
 8003612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003614:	4606      	mov	r6, r0
 8003616:	460f      	mov	r7, r1
 8003618:	4614      	mov	r4, r2
 800361a:	18d5      	adds	r5, r2, r3
 800361c:	42ac      	cmp	r4, r5
 800361e:	d101      	bne.n	8003624 <__sfputs_r+0x12>
 8003620:	2000      	movs	r0, #0
 8003622:	e007      	b.n	8003634 <__sfputs_r+0x22>
 8003624:	463a      	mov	r2, r7
 8003626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800362a:	4630      	mov	r0, r6
 800362c:	f7ff ffda 	bl	80035e4 <__sfputc_r>
 8003630:	1c43      	adds	r3, r0, #1
 8003632:	d1f3      	bne.n	800361c <__sfputs_r+0xa>
 8003634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003638 <_vfiprintf_r>:
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	460c      	mov	r4, r1
 800363e:	b09d      	sub	sp, #116	; 0x74
 8003640:	4617      	mov	r7, r2
 8003642:	461d      	mov	r5, r3
 8003644:	4606      	mov	r6, r0
 8003646:	b118      	cbz	r0, 8003650 <_vfiprintf_r+0x18>
 8003648:	6983      	ldr	r3, [r0, #24]
 800364a:	b90b      	cbnz	r3, 8003650 <_vfiprintf_r+0x18>
 800364c:	f7ff fee6 	bl	800341c <__sinit>
 8003650:	4b7c      	ldr	r3, [pc, #496]	; (8003844 <_vfiprintf_r+0x20c>)
 8003652:	429c      	cmp	r4, r3
 8003654:	d158      	bne.n	8003708 <_vfiprintf_r+0xd0>
 8003656:	6874      	ldr	r4, [r6, #4]
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	0718      	lsls	r0, r3, #28
 800365c:	d55e      	bpl.n	800371c <_vfiprintf_r+0xe4>
 800365e:	6923      	ldr	r3, [r4, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05b      	beq.n	800371c <_vfiprintf_r+0xe4>
 8003664:	2300      	movs	r3, #0
 8003666:	9309      	str	r3, [sp, #36]	; 0x24
 8003668:	2320      	movs	r3, #32
 800366a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800366e:	2330      	movs	r3, #48	; 0x30
 8003670:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003674:	9503      	str	r5, [sp, #12]
 8003676:	f04f 0b01 	mov.w	fp, #1
 800367a:	46b8      	mov	r8, r7
 800367c:	4645      	mov	r5, r8
 800367e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003682:	b10b      	cbz	r3, 8003688 <_vfiprintf_r+0x50>
 8003684:	2b25      	cmp	r3, #37	; 0x25
 8003686:	d154      	bne.n	8003732 <_vfiprintf_r+0xfa>
 8003688:	ebb8 0a07 	subs.w	sl, r8, r7
 800368c:	d00b      	beq.n	80036a6 <_vfiprintf_r+0x6e>
 800368e:	4653      	mov	r3, sl
 8003690:	463a      	mov	r2, r7
 8003692:	4621      	mov	r1, r4
 8003694:	4630      	mov	r0, r6
 8003696:	f7ff ffbc 	bl	8003612 <__sfputs_r>
 800369a:	3001      	adds	r0, #1
 800369c:	f000 80c2 	beq.w	8003824 <_vfiprintf_r+0x1ec>
 80036a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036a2:	4453      	add	r3, sl
 80036a4:	9309      	str	r3, [sp, #36]	; 0x24
 80036a6:	f898 3000 	ldrb.w	r3, [r8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80ba 	beq.w	8003824 <_vfiprintf_r+0x1ec>
 80036b0:	2300      	movs	r3, #0
 80036b2:	f04f 32ff 	mov.w	r2, #4294967295
 80036b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	9307      	str	r3, [sp, #28]
 80036be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036c2:	931a      	str	r3, [sp, #104]	; 0x68
 80036c4:	46a8      	mov	r8, r5
 80036c6:	2205      	movs	r2, #5
 80036c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80036cc:	485e      	ldr	r0, [pc, #376]	; (8003848 <_vfiprintf_r+0x210>)
 80036ce:	f7fc fd87 	bl	80001e0 <memchr>
 80036d2:	9b04      	ldr	r3, [sp, #16]
 80036d4:	bb78      	cbnz	r0, 8003736 <_vfiprintf_r+0xfe>
 80036d6:	06d9      	lsls	r1, r3, #27
 80036d8:	bf44      	itt	mi
 80036da:	2220      	movmi	r2, #32
 80036dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036e0:	071a      	lsls	r2, r3, #28
 80036e2:	bf44      	itt	mi
 80036e4:	222b      	movmi	r2, #43	; 0x2b
 80036e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036ea:	782a      	ldrb	r2, [r5, #0]
 80036ec:	2a2a      	cmp	r2, #42	; 0x2a
 80036ee:	d02a      	beq.n	8003746 <_vfiprintf_r+0x10e>
 80036f0:	9a07      	ldr	r2, [sp, #28]
 80036f2:	46a8      	mov	r8, r5
 80036f4:	2000      	movs	r0, #0
 80036f6:	250a      	movs	r5, #10
 80036f8:	4641      	mov	r1, r8
 80036fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036fe:	3b30      	subs	r3, #48	; 0x30
 8003700:	2b09      	cmp	r3, #9
 8003702:	d969      	bls.n	80037d8 <_vfiprintf_r+0x1a0>
 8003704:	b360      	cbz	r0, 8003760 <_vfiprintf_r+0x128>
 8003706:	e024      	b.n	8003752 <_vfiprintf_r+0x11a>
 8003708:	4b50      	ldr	r3, [pc, #320]	; (800384c <_vfiprintf_r+0x214>)
 800370a:	429c      	cmp	r4, r3
 800370c:	d101      	bne.n	8003712 <_vfiprintf_r+0xda>
 800370e:	68b4      	ldr	r4, [r6, #8]
 8003710:	e7a2      	b.n	8003658 <_vfiprintf_r+0x20>
 8003712:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <_vfiprintf_r+0x218>)
 8003714:	429c      	cmp	r4, r3
 8003716:	bf08      	it	eq
 8003718:	68f4      	ldreq	r4, [r6, #12]
 800371a:	e79d      	b.n	8003658 <_vfiprintf_r+0x20>
 800371c:	4621      	mov	r1, r4
 800371e:	4630      	mov	r0, r6
 8003720:	f000 fae0 	bl	8003ce4 <__swsetup_r>
 8003724:	2800      	cmp	r0, #0
 8003726:	d09d      	beq.n	8003664 <_vfiprintf_r+0x2c>
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	b01d      	add	sp, #116	; 0x74
 800372e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003732:	46a8      	mov	r8, r5
 8003734:	e7a2      	b.n	800367c <_vfiprintf_r+0x44>
 8003736:	4a44      	ldr	r2, [pc, #272]	; (8003848 <_vfiprintf_r+0x210>)
 8003738:	1a80      	subs	r0, r0, r2
 800373a:	fa0b f000 	lsl.w	r0, fp, r0
 800373e:	4318      	orrs	r0, r3
 8003740:	9004      	str	r0, [sp, #16]
 8003742:	4645      	mov	r5, r8
 8003744:	e7be      	b.n	80036c4 <_vfiprintf_r+0x8c>
 8003746:	9a03      	ldr	r2, [sp, #12]
 8003748:	1d11      	adds	r1, r2, #4
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	9103      	str	r1, [sp, #12]
 800374e:	2a00      	cmp	r2, #0
 8003750:	db01      	blt.n	8003756 <_vfiprintf_r+0x11e>
 8003752:	9207      	str	r2, [sp, #28]
 8003754:	e004      	b.n	8003760 <_vfiprintf_r+0x128>
 8003756:	4252      	negs	r2, r2
 8003758:	f043 0302 	orr.w	r3, r3, #2
 800375c:	9207      	str	r2, [sp, #28]
 800375e:	9304      	str	r3, [sp, #16]
 8003760:	f898 3000 	ldrb.w	r3, [r8]
 8003764:	2b2e      	cmp	r3, #46	; 0x2e
 8003766:	d10e      	bne.n	8003786 <_vfiprintf_r+0x14e>
 8003768:	f898 3001 	ldrb.w	r3, [r8, #1]
 800376c:	2b2a      	cmp	r3, #42	; 0x2a
 800376e:	d138      	bne.n	80037e2 <_vfiprintf_r+0x1aa>
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	1d1a      	adds	r2, r3, #4
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	9203      	str	r2, [sp, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	bfb8      	it	lt
 800377c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003780:	f108 0802 	add.w	r8, r8, #2
 8003784:	9305      	str	r3, [sp, #20]
 8003786:	4d33      	ldr	r5, [pc, #204]	; (8003854 <_vfiprintf_r+0x21c>)
 8003788:	f898 1000 	ldrb.w	r1, [r8]
 800378c:	2203      	movs	r2, #3
 800378e:	4628      	mov	r0, r5
 8003790:	f7fc fd26 	bl	80001e0 <memchr>
 8003794:	b140      	cbz	r0, 80037a8 <_vfiprintf_r+0x170>
 8003796:	2340      	movs	r3, #64	; 0x40
 8003798:	1b40      	subs	r0, r0, r5
 800379a:	fa03 f000 	lsl.w	r0, r3, r0
 800379e:	9b04      	ldr	r3, [sp, #16]
 80037a0:	4303      	orrs	r3, r0
 80037a2:	f108 0801 	add.w	r8, r8, #1
 80037a6:	9304      	str	r3, [sp, #16]
 80037a8:	f898 1000 	ldrb.w	r1, [r8]
 80037ac:	482a      	ldr	r0, [pc, #168]	; (8003858 <_vfiprintf_r+0x220>)
 80037ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037b2:	2206      	movs	r2, #6
 80037b4:	f108 0701 	add.w	r7, r8, #1
 80037b8:	f7fc fd12 	bl	80001e0 <memchr>
 80037bc:	2800      	cmp	r0, #0
 80037be:	d037      	beq.n	8003830 <_vfiprintf_r+0x1f8>
 80037c0:	4b26      	ldr	r3, [pc, #152]	; (800385c <_vfiprintf_r+0x224>)
 80037c2:	bb1b      	cbnz	r3, 800380c <_vfiprintf_r+0x1d4>
 80037c4:	9b03      	ldr	r3, [sp, #12]
 80037c6:	3307      	adds	r3, #7
 80037c8:	f023 0307 	bic.w	r3, r3, #7
 80037cc:	3308      	adds	r3, #8
 80037ce:	9303      	str	r3, [sp, #12]
 80037d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037d2:	444b      	add	r3, r9
 80037d4:	9309      	str	r3, [sp, #36]	; 0x24
 80037d6:	e750      	b.n	800367a <_vfiprintf_r+0x42>
 80037d8:	fb05 3202 	mla	r2, r5, r2, r3
 80037dc:	2001      	movs	r0, #1
 80037de:	4688      	mov	r8, r1
 80037e0:	e78a      	b.n	80036f8 <_vfiprintf_r+0xc0>
 80037e2:	2300      	movs	r3, #0
 80037e4:	f108 0801 	add.w	r8, r8, #1
 80037e8:	9305      	str	r3, [sp, #20]
 80037ea:	4619      	mov	r1, r3
 80037ec:	250a      	movs	r5, #10
 80037ee:	4640      	mov	r0, r8
 80037f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037f4:	3a30      	subs	r2, #48	; 0x30
 80037f6:	2a09      	cmp	r2, #9
 80037f8:	d903      	bls.n	8003802 <_vfiprintf_r+0x1ca>
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c3      	beq.n	8003786 <_vfiprintf_r+0x14e>
 80037fe:	9105      	str	r1, [sp, #20]
 8003800:	e7c1      	b.n	8003786 <_vfiprintf_r+0x14e>
 8003802:	fb05 2101 	mla	r1, r5, r1, r2
 8003806:	2301      	movs	r3, #1
 8003808:	4680      	mov	r8, r0
 800380a:	e7f0      	b.n	80037ee <_vfiprintf_r+0x1b6>
 800380c:	ab03      	add	r3, sp, #12
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	4622      	mov	r2, r4
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <_vfiprintf_r+0x228>)
 8003814:	a904      	add	r1, sp, #16
 8003816:	4630      	mov	r0, r6
 8003818:	f3af 8000 	nop.w
 800381c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003820:	4681      	mov	r9, r0
 8003822:	d1d5      	bne.n	80037d0 <_vfiprintf_r+0x198>
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	065b      	lsls	r3, r3, #25
 8003828:	f53f af7e 	bmi.w	8003728 <_vfiprintf_r+0xf0>
 800382c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800382e:	e77d      	b.n	800372c <_vfiprintf_r+0xf4>
 8003830:	ab03      	add	r3, sp, #12
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	4622      	mov	r2, r4
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <_vfiprintf_r+0x228>)
 8003838:	a904      	add	r1, sp, #16
 800383a:	4630      	mov	r0, r6
 800383c:	f000 f888 	bl	8003950 <_printf_i>
 8003840:	e7ec      	b.n	800381c <_vfiprintf_r+0x1e4>
 8003842:	bf00      	nop
 8003844:	08004240 	.word	0x08004240
 8003848:	08004280 	.word	0x08004280
 800384c:	08004260 	.word	0x08004260
 8003850:	08004220 	.word	0x08004220
 8003854:	08004286 	.word	0x08004286
 8003858:	0800428a 	.word	0x0800428a
 800385c:	00000000 	.word	0x00000000
 8003860:	08003613 	.word	0x08003613

08003864 <_printf_common>:
 8003864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	4691      	mov	r9, r2
 800386a:	461f      	mov	r7, r3
 800386c:	688a      	ldr	r2, [r1, #8]
 800386e:	690b      	ldr	r3, [r1, #16]
 8003870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003874:	4293      	cmp	r3, r2
 8003876:	bfb8      	it	lt
 8003878:	4613      	movlt	r3, r2
 800387a:	f8c9 3000 	str.w	r3, [r9]
 800387e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003882:	4606      	mov	r6, r0
 8003884:	460c      	mov	r4, r1
 8003886:	b112      	cbz	r2, 800388e <_printf_common+0x2a>
 8003888:	3301      	adds	r3, #1
 800388a:	f8c9 3000 	str.w	r3, [r9]
 800388e:	6823      	ldr	r3, [r4, #0]
 8003890:	0699      	lsls	r1, r3, #26
 8003892:	bf42      	ittt	mi
 8003894:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003898:	3302      	addmi	r3, #2
 800389a:	f8c9 3000 	strmi.w	r3, [r9]
 800389e:	6825      	ldr	r5, [r4, #0]
 80038a0:	f015 0506 	ands.w	r5, r5, #6
 80038a4:	d107      	bne.n	80038b6 <_printf_common+0x52>
 80038a6:	f104 0a19 	add.w	sl, r4, #25
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	f8d9 2000 	ldr.w	r2, [r9]
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	42ab      	cmp	r3, r5
 80038b4:	dc28      	bgt.n	8003908 <_printf_common+0xa4>
 80038b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	3300      	adds	r3, #0
 80038be:	bf18      	it	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	0692      	lsls	r2, r2, #26
 80038c4:	d42d      	bmi.n	8003922 <_printf_common+0xbe>
 80038c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ca:	4639      	mov	r1, r7
 80038cc:	4630      	mov	r0, r6
 80038ce:	47c0      	blx	r8
 80038d0:	3001      	adds	r0, #1
 80038d2:	d020      	beq.n	8003916 <_printf_common+0xb2>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	68e5      	ldr	r5, [r4, #12]
 80038d8:	f8d9 2000 	ldr.w	r2, [r9]
 80038dc:	f003 0306 	and.w	r3, r3, #6
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	bf08      	it	eq
 80038e4:	1aad      	subeq	r5, r5, r2
 80038e6:	68a3      	ldr	r3, [r4, #8]
 80038e8:	6922      	ldr	r2, [r4, #16]
 80038ea:	bf0c      	ite	eq
 80038ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038f0:	2500      	movne	r5, #0
 80038f2:	4293      	cmp	r3, r2
 80038f4:	bfc4      	itt	gt
 80038f6:	1a9b      	subgt	r3, r3, r2
 80038f8:	18ed      	addgt	r5, r5, r3
 80038fa:	f04f 0900 	mov.w	r9, #0
 80038fe:	341a      	adds	r4, #26
 8003900:	454d      	cmp	r5, r9
 8003902:	d11a      	bne.n	800393a <_printf_common+0xd6>
 8003904:	2000      	movs	r0, #0
 8003906:	e008      	b.n	800391a <_printf_common+0xb6>
 8003908:	2301      	movs	r3, #1
 800390a:	4652      	mov	r2, sl
 800390c:	4639      	mov	r1, r7
 800390e:	4630      	mov	r0, r6
 8003910:	47c0      	blx	r8
 8003912:	3001      	adds	r0, #1
 8003914:	d103      	bne.n	800391e <_printf_common+0xba>
 8003916:	f04f 30ff 	mov.w	r0, #4294967295
 800391a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391e:	3501      	adds	r5, #1
 8003920:	e7c3      	b.n	80038aa <_printf_common+0x46>
 8003922:	18e1      	adds	r1, r4, r3
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	2030      	movs	r0, #48	; 0x30
 8003928:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800392c:	4422      	add	r2, r4
 800392e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003932:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003936:	3302      	adds	r3, #2
 8003938:	e7c5      	b.n	80038c6 <_printf_common+0x62>
 800393a:	2301      	movs	r3, #1
 800393c:	4622      	mov	r2, r4
 800393e:	4639      	mov	r1, r7
 8003940:	4630      	mov	r0, r6
 8003942:	47c0      	blx	r8
 8003944:	3001      	adds	r0, #1
 8003946:	d0e6      	beq.n	8003916 <_printf_common+0xb2>
 8003948:	f109 0901 	add.w	r9, r9, #1
 800394c:	e7d8      	b.n	8003900 <_printf_common+0x9c>
	...

08003950 <_printf_i>:
 8003950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003954:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003958:	460c      	mov	r4, r1
 800395a:	7e09      	ldrb	r1, [r1, #24]
 800395c:	b085      	sub	sp, #20
 800395e:	296e      	cmp	r1, #110	; 0x6e
 8003960:	4617      	mov	r7, r2
 8003962:	4606      	mov	r6, r0
 8003964:	4698      	mov	r8, r3
 8003966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003968:	f000 80b3 	beq.w	8003ad2 <_printf_i+0x182>
 800396c:	d822      	bhi.n	80039b4 <_printf_i+0x64>
 800396e:	2963      	cmp	r1, #99	; 0x63
 8003970:	d036      	beq.n	80039e0 <_printf_i+0x90>
 8003972:	d80a      	bhi.n	800398a <_printf_i+0x3a>
 8003974:	2900      	cmp	r1, #0
 8003976:	f000 80b9 	beq.w	8003aec <_printf_i+0x19c>
 800397a:	2958      	cmp	r1, #88	; 0x58
 800397c:	f000 8083 	beq.w	8003a86 <_printf_i+0x136>
 8003980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003984:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003988:	e032      	b.n	80039f0 <_printf_i+0xa0>
 800398a:	2964      	cmp	r1, #100	; 0x64
 800398c:	d001      	beq.n	8003992 <_printf_i+0x42>
 800398e:	2969      	cmp	r1, #105	; 0x69
 8003990:	d1f6      	bne.n	8003980 <_printf_i+0x30>
 8003992:	6820      	ldr	r0, [r4, #0]
 8003994:	6813      	ldr	r3, [r2, #0]
 8003996:	0605      	lsls	r5, r0, #24
 8003998:	f103 0104 	add.w	r1, r3, #4
 800399c:	d52a      	bpl.n	80039f4 <_printf_i+0xa4>
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6011      	str	r1, [r2, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	da03      	bge.n	80039ae <_printf_i+0x5e>
 80039a6:	222d      	movs	r2, #45	; 0x2d
 80039a8:	425b      	negs	r3, r3
 80039aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039ae:	486f      	ldr	r0, [pc, #444]	; (8003b6c <_printf_i+0x21c>)
 80039b0:	220a      	movs	r2, #10
 80039b2:	e039      	b.n	8003a28 <_printf_i+0xd8>
 80039b4:	2973      	cmp	r1, #115	; 0x73
 80039b6:	f000 809d 	beq.w	8003af4 <_printf_i+0x1a4>
 80039ba:	d808      	bhi.n	80039ce <_printf_i+0x7e>
 80039bc:	296f      	cmp	r1, #111	; 0x6f
 80039be:	d020      	beq.n	8003a02 <_printf_i+0xb2>
 80039c0:	2970      	cmp	r1, #112	; 0x70
 80039c2:	d1dd      	bne.n	8003980 <_printf_i+0x30>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	f043 0320 	orr.w	r3, r3, #32
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	e003      	b.n	80039d6 <_printf_i+0x86>
 80039ce:	2975      	cmp	r1, #117	; 0x75
 80039d0:	d017      	beq.n	8003a02 <_printf_i+0xb2>
 80039d2:	2978      	cmp	r1, #120	; 0x78
 80039d4:	d1d4      	bne.n	8003980 <_printf_i+0x30>
 80039d6:	2378      	movs	r3, #120	; 0x78
 80039d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039dc:	4864      	ldr	r0, [pc, #400]	; (8003b70 <_printf_i+0x220>)
 80039de:	e055      	b.n	8003a8c <_printf_i+0x13c>
 80039e0:	6813      	ldr	r3, [r2, #0]
 80039e2:	1d19      	adds	r1, r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6011      	str	r1, [r2, #0]
 80039e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f0:	2301      	movs	r3, #1
 80039f2:	e08c      	b.n	8003b0e <_printf_i+0x1be>
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6011      	str	r1, [r2, #0]
 80039f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039fc:	bf18      	it	ne
 80039fe:	b21b      	sxthne	r3, r3
 8003a00:	e7cf      	b.n	80039a2 <_printf_i+0x52>
 8003a02:	6813      	ldr	r3, [r2, #0]
 8003a04:	6825      	ldr	r5, [r4, #0]
 8003a06:	1d18      	adds	r0, r3, #4
 8003a08:	6010      	str	r0, [r2, #0]
 8003a0a:	0628      	lsls	r0, r5, #24
 8003a0c:	d501      	bpl.n	8003a12 <_printf_i+0xc2>
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	e002      	b.n	8003a18 <_printf_i+0xc8>
 8003a12:	0668      	lsls	r0, r5, #25
 8003a14:	d5fb      	bpl.n	8003a0e <_printf_i+0xbe>
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	4854      	ldr	r0, [pc, #336]	; (8003b6c <_printf_i+0x21c>)
 8003a1a:	296f      	cmp	r1, #111	; 0x6f
 8003a1c:	bf14      	ite	ne
 8003a1e:	220a      	movne	r2, #10
 8003a20:	2208      	moveq	r2, #8
 8003a22:	2100      	movs	r1, #0
 8003a24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a28:	6865      	ldr	r5, [r4, #4]
 8003a2a:	60a5      	str	r5, [r4, #8]
 8003a2c:	2d00      	cmp	r5, #0
 8003a2e:	f2c0 8095 	blt.w	8003b5c <_printf_i+0x20c>
 8003a32:	6821      	ldr	r1, [r4, #0]
 8003a34:	f021 0104 	bic.w	r1, r1, #4
 8003a38:	6021      	str	r1, [r4, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d13d      	bne.n	8003aba <_printf_i+0x16a>
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	f040 808e 	bne.w	8003b60 <_printf_i+0x210>
 8003a44:	4665      	mov	r5, ip
 8003a46:	2a08      	cmp	r2, #8
 8003a48:	d10b      	bne.n	8003a62 <_printf_i+0x112>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	07db      	lsls	r3, r3, #31
 8003a4e:	d508      	bpl.n	8003a62 <_printf_i+0x112>
 8003a50:	6923      	ldr	r3, [r4, #16]
 8003a52:	6862      	ldr	r2, [r4, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	bfde      	ittt	le
 8003a58:	2330      	movle	r3, #48	; 0x30
 8003a5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a62:	ebac 0305 	sub.w	r3, ip, r5
 8003a66:	6123      	str	r3, [r4, #16]
 8003a68:	f8cd 8000 	str.w	r8, [sp]
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	aa03      	add	r2, sp, #12
 8003a70:	4621      	mov	r1, r4
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7ff fef6 	bl	8003864 <_printf_common>
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d14d      	bne.n	8003b18 <_printf_i+0x1c8>
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	b005      	add	sp, #20
 8003a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a86:	4839      	ldr	r0, [pc, #228]	; (8003b6c <_printf_i+0x21c>)
 8003a88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a8c:	6813      	ldr	r3, [r2, #0]
 8003a8e:	6821      	ldr	r1, [r4, #0]
 8003a90:	1d1d      	adds	r5, r3, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6015      	str	r5, [r2, #0]
 8003a96:	060a      	lsls	r2, r1, #24
 8003a98:	d50b      	bpl.n	8003ab2 <_printf_i+0x162>
 8003a9a:	07ca      	lsls	r2, r1, #31
 8003a9c:	bf44      	itt	mi
 8003a9e:	f041 0120 	orrmi.w	r1, r1, #32
 8003aa2:	6021      	strmi	r1, [r4, #0]
 8003aa4:	b91b      	cbnz	r3, 8003aae <_printf_i+0x15e>
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	f022 0220 	bic.w	r2, r2, #32
 8003aac:	6022      	str	r2, [r4, #0]
 8003aae:	2210      	movs	r2, #16
 8003ab0:	e7b7      	b.n	8003a22 <_printf_i+0xd2>
 8003ab2:	064d      	lsls	r5, r1, #25
 8003ab4:	bf48      	it	mi
 8003ab6:	b29b      	uxthmi	r3, r3
 8003ab8:	e7ef      	b.n	8003a9a <_printf_i+0x14a>
 8003aba:	4665      	mov	r5, ip
 8003abc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ac0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ac4:	5cc3      	ldrb	r3, [r0, r3]
 8003ac6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003aca:	460b      	mov	r3, r1
 8003acc:	2900      	cmp	r1, #0
 8003ace:	d1f5      	bne.n	8003abc <_printf_i+0x16c>
 8003ad0:	e7b9      	b.n	8003a46 <_printf_i+0xf6>
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	6825      	ldr	r5, [r4, #0]
 8003ad6:	6961      	ldr	r1, [r4, #20]
 8003ad8:	1d18      	adds	r0, r3, #4
 8003ada:	6010      	str	r0, [r2, #0]
 8003adc:	0628      	lsls	r0, r5, #24
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	d501      	bpl.n	8003ae6 <_printf_i+0x196>
 8003ae2:	6019      	str	r1, [r3, #0]
 8003ae4:	e002      	b.n	8003aec <_printf_i+0x19c>
 8003ae6:	066a      	lsls	r2, r5, #25
 8003ae8:	d5fb      	bpl.n	8003ae2 <_printf_i+0x192>
 8003aea:	8019      	strh	r1, [r3, #0]
 8003aec:	2300      	movs	r3, #0
 8003aee:	6123      	str	r3, [r4, #16]
 8003af0:	4665      	mov	r5, ip
 8003af2:	e7b9      	b.n	8003a68 <_printf_i+0x118>
 8003af4:	6813      	ldr	r3, [r2, #0]
 8003af6:	1d19      	adds	r1, r3, #4
 8003af8:	6011      	str	r1, [r2, #0]
 8003afa:	681d      	ldr	r5, [r3, #0]
 8003afc:	6862      	ldr	r2, [r4, #4]
 8003afe:	2100      	movs	r1, #0
 8003b00:	4628      	mov	r0, r5
 8003b02:	f7fc fb6d 	bl	80001e0 <memchr>
 8003b06:	b108      	cbz	r0, 8003b0c <_printf_i+0x1bc>
 8003b08:	1b40      	subs	r0, r0, r5
 8003b0a:	6060      	str	r0, [r4, #4]
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	6123      	str	r3, [r4, #16]
 8003b10:	2300      	movs	r3, #0
 8003b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b16:	e7a7      	b.n	8003a68 <_printf_i+0x118>
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	462a      	mov	r2, r5
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	47c0      	blx	r8
 8003b22:	3001      	adds	r0, #1
 8003b24:	d0aa      	beq.n	8003a7c <_printf_i+0x12c>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	079b      	lsls	r3, r3, #30
 8003b2a:	d413      	bmi.n	8003b54 <_printf_i+0x204>
 8003b2c:	68e0      	ldr	r0, [r4, #12]
 8003b2e:	9b03      	ldr	r3, [sp, #12]
 8003b30:	4298      	cmp	r0, r3
 8003b32:	bfb8      	it	lt
 8003b34:	4618      	movlt	r0, r3
 8003b36:	e7a3      	b.n	8003a80 <_printf_i+0x130>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	464a      	mov	r2, r9
 8003b3c:	4639      	mov	r1, r7
 8003b3e:	4630      	mov	r0, r6
 8003b40:	47c0      	blx	r8
 8003b42:	3001      	adds	r0, #1
 8003b44:	d09a      	beq.n	8003a7c <_printf_i+0x12c>
 8003b46:	3501      	adds	r5, #1
 8003b48:	68e3      	ldr	r3, [r4, #12]
 8003b4a:	9a03      	ldr	r2, [sp, #12]
 8003b4c:	1a9b      	subs	r3, r3, r2
 8003b4e:	42ab      	cmp	r3, r5
 8003b50:	dcf2      	bgt.n	8003b38 <_printf_i+0x1e8>
 8003b52:	e7eb      	b.n	8003b2c <_printf_i+0x1dc>
 8003b54:	2500      	movs	r5, #0
 8003b56:	f104 0919 	add.w	r9, r4, #25
 8003b5a:	e7f5      	b.n	8003b48 <_printf_i+0x1f8>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ac      	bne.n	8003aba <_printf_i+0x16a>
 8003b60:	7803      	ldrb	r3, [r0, #0]
 8003b62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b66:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b6a:	e76c      	b.n	8003a46 <_printf_i+0xf6>
 8003b6c:	08004291 	.word	0x08004291
 8003b70:	080042a2 	.word	0x080042a2

08003b74 <_sbrk_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4c06      	ldr	r4, [pc, #24]	; (8003b90 <_sbrk_r+0x1c>)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	f7ff f8ee 	bl	8002d60 <_sbrk>
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d102      	bne.n	8003b8e <_sbrk_r+0x1a>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	b103      	cbz	r3, 8003b8e <_sbrk_r+0x1a>
 8003b8c:	602b      	str	r3, [r5, #0]
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	20000158 	.word	0x20000158

08003b94 <__sread>:
 8003b94:	b510      	push	{r4, lr}
 8003b96:	460c      	mov	r4, r1
 8003b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b9c:	f000 fa96 	bl	80040cc <_read_r>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	bfab      	itete	ge
 8003ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8003ba8:	181b      	addge	r3, r3, r0
 8003baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bae:	bfac      	ite	ge
 8003bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bb2:	81a3      	strhlt	r3, [r4, #12]
 8003bb4:	bd10      	pop	{r4, pc}

08003bb6 <__swrite>:
 8003bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bba:	461f      	mov	r7, r3
 8003bbc:	898b      	ldrh	r3, [r1, #12]
 8003bbe:	05db      	lsls	r3, r3, #23
 8003bc0:	4605      	mov	r5, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	4616      	mov	r6, r2
 8003bc6:	d505      	bpl.n	8003bd4 <__swrite+0x1e>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd0:	f000 f9b6 	bl	8003f40 <_lseek_r>
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	4632      	mov	r2, r6
 8003be2:	463b      	mov	r3, r7
 8003be4:	4628      	mov	r0, r5
 8003be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bea:	f000 b869 	b.w	8003cc0 <_write_r>

08003bee <__sseek>:
 8003bee:	b510      	push	{r4, lr}
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf6:	f000 f9a3 	bl	8003f40 <_lseek_r>
 8003bfa:	1c43      	adds	r3, r0, #1
 8003bfc:	89a3      	ldrh	r3, [r4, #12]
 8003bfe:	bf15      	itete	ne
 8003c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c0a:	81a3      	strheq	r3, [r4, #12]
 8003c0c:	bf18      	it	ne
 8003c0e:	81a3      	strhne	r3, [r4, #12]
 8003c10:	bd10      	pop	{r4, pc}

08003c12 <__sclose>:
 8003c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c16:	f000 b8d3 	b.w	8003dc0 <_close_r>
	...

08003c1c <__swbuf_r>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	460e      	mov	r6, r1
 8003c20:	4614      	mov	r4, r2
 8003c22:	4605      	mov	r5, r0
 8003c24:	b118      	cbz	r0, 8003c2e <__swbuf_r+0x12>
 8003c26:	6983      	ldr	r3, [r0, #24]
 8003c28:	b90b      	cbnz	r3, 8003c2e <__swbuf_r+0x12>
 8003c2a:	f7ff fbf7 	bl	800341c <__sinit>
 8003c2e:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <__swbuf_r+0x98>)
 8003c30:	429c      	cmp	r4, r3
 8003c32:	d12a      	bne.n	8003c8a <__swbuf_r+0x6e>
 8003c34:	686c      	ldr	r4, [r5, #4]
 8003c36:	69a3      	ldr	r3, [r4, #24]
 8003c38:	60a3      	str	r3, [r4, #8]
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	071a      	lsls	r2, r3, #28
 8003c3e:	d52e      	bpl.n	8003c9e <__swbuf_r+0x82>
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	b363      	cbz	r3, 8003c9e <__swbuf_r+0x82>
 8003c44:	6923      	ldr	r3, [r4, #16]
 8003c46:	6820      	ldr	r0, [r4, #0]
 8003c48:	1ac0      	subs	r0, r0, r3
 8003c4a:	6963      	ldr	r3, [r4, #20]
 8003c4c:	b2f6      	uxtb	r6, r6
 8003c4e:	4283      	cmp	r3, r0
 8003c50:	4637      	mov	r7, r6
 8003c52:	dc04      	bgt.n	8003c5e <__swbuf_r+0x42>
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f948 	bl	8003eec <_fflush_r>
 8003c5c:	bb28      	cbnz	r0, 8003caa <__swbuf_r+0x8e>
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	60a3      	str	r3, [r4, #8]
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	6022      	str	r2, [r4, #0]
 8003c6a:	701e      	strb	r6, [r3, #0]
 8003c6c:	6963      	ldr	r3, [r4, #20]
 8003c6e:	3001      	adds	r0, #1
 8003c70:	4283      	cmp	r3, r0
 8003c72:	d004      	beq.n	8003c7e <__swbuf_r+0x62>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	07db      	lsls	r3, r3, #31
 8003c78:	d519      	bpl.n	8003cae <__swbuf_r+0x92>
 8003c7a:	2e0a      	cmp	r6, #10
 8003c7c:	d117      	bne.n	8003cae <__swbuf_r+0x92>
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 f933 	bl	8003eec <_fflush_r>
 8003c86:	b190      	cbz	r0, 8003cae <__swbuf_r+0x92>
 8003c88:	e00f      	b.n	8003caa <__swbuf_r+0x8e>
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <__swbuf_r+0x9c>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	d101      	bne.n	8003c94 <__swbuf_r+0x78>
 8003c90:	68ac      	ldr	r4, [r5, #8]
 8003c92:	e7d0      	b.n	8003c36 <__swbuf_r+0x1a>
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <__swbuf_r+0xa0>)
 8003c96:	429c      	cmp	r4, r3
 8003c98:	bf08      	it	eq
 8003c9a:	68ec      	ldreq	r4, [r5, #12]
 8003c9c:	e7cb      	b.n	8003c36 <__swbuf_r+0x1a>
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 f81f 	bl	8003ce4 <__swsetup_r>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0cc      	beq.n	8003c44 <__swbuf_r+0x28>
 8003caa:	f04f 37ff 	mov.w	r7, #4294967295
 8003cae:	4638      	mov	r0, r7
 8003cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	08004240 	.word	0x08004240
 8003cb8:	08004260 	.word	0x08004260
 8003cbc:	08004220 	.word	0x08004220

08003cc0 <_write_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4c07      	ldr	r4, [pc, #28]	; (8003ce0 <_write_r+0x20>)
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7ff f829 	bl	8002d26 <_write>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_write_r+0x1e>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_write_r+0x1e>
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20000158 	.word	0x20000158

08003ce4 <__swsetup_r>:
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <__swsetup_r+0xcc>)
 8003ce6:	b570      	push	{r4, r5, r6, lr}
 8003ce8:	681d      	ldr	r5, [r3, #0]
 8003cea:	4606      	mov	r6, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	b125      	cbz	r5, 8003cfa <__swsetup_r+0x16>
 8003cf0:	69ab      	ldr	r3, [r5, #24]
 8003cf2:	b913      	cbnz	r3, 8003cfa <__swsetup_r+0x16>
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f7ff fb91 	bl	800341c <__sinit>
 8003cfa:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <__swsetup_r+0xd0>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	d10f      	bne.n	8003d20 <__swsetup_r+0x3c>
 8003d00:	686c      	ldr	r4, [r5, #4]
 8003d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	0715      	lsls	r5, r2, #28
 8003d0a:	d42c      	bmi.n	8003d66 <__swsetup_r+0x82>
 8003d0c:	06d0      	lsls	r0, r2, #27
 8003d0e:	d411      	bmi.n	8003d34 <__swsetup_r+0x50>
 8003d10:	2209      	movs	r2, #9
 8003d12:	6032      	str	r2, [r6, #0]
 8003d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d18:	81a3      	strh	r3, [r4, #12]
 8003d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1e:	e03e      	b.n	8003d9e <__swsetup_r+0xba>
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <__swsetup_r+0xd4>)
 8003d22:	429c      	cmp	r4, r3
 8003d24:	d101      	bne.n	8003d2a <__swsetup_r+0x46>
 8003d26:	68ac      	ldr	r4, [r5, #8]
 8003d28:	e7eb      	b.n	8003d02 <__swsetup_r+0x1e>
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <__swsetup_r+0xd8>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf08      	it	eq
 8003d30:	68ec      	ldreq	r4, [r5, #12]
 8003d32:	e7e6      	b.n	8003d02 <__swsetup_r+0x1e>
 8003d34:	0751      	lsls	r1, r2, #29
 8003d36:	d512      	bpl.n	8003d5e <__swsetup_r+0x7a>
 8003d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d3a:	b141      	cbz	r1, 8003d4e <__swsetup_r+0x6a>
 8003d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d40:	4299      	cmp	r1, r3
 8003d42:	d002      	beq.n	8003d4a <__swsetup_r+0x66>
 8003d44:	4630      	mov	r0, r6
 8003d46:	f000 f973 	bl	8004030 <_free_r>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d54:	81a3      	strh	r3, [r4, #12]
 8003d56:	2300      	movs	r3, #0
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	6023      	str	r3, [r4, #0]
 8003d5e:	89a3      	ldrh	r3, [r4, #12]
 8003d60:	f043 0308 	orr.w	r3, r3, #8
 8003d64:	81a3      	strh	r3, [r4, #12]
 8003d66:	6923      	ldr	r3, [r4, #16]
 8003d68:	b94b      	cbnz	r3, 8003d7e <__swsetup_r+0x9a>
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d74:	d003      	beq.n	8003d7e <__swsetup_r+0x9a>
 8003d76:	4621      	mov	r1, r4
 8003d78:	4630      	mov	r0, r6
 8003d7a:	f000 f917 	bl	8003fac <__smakebuf_r>
 8003d7e:	89a2      	ldrh	r2, [r4, #12]
 8003d80:	f012 0301 	ands.w	r3, r2, #1
 8003d84:	d00c      	beq.n	8003da0 <__swsetup_r+0xbc>
 8003d86:	2300      	movs	r3, #0
 8003d88:	60a3      	str	r3, [r4, #8]
 8003d8a:	6963      	ldr	r3, [r4, #20]
 8003d8c:	425b      	negs	r3, r3
 8003d8e:	61a3      	str	r3, [r4, #24]
 8003d90:	6923      	ldr	r3, [r4, #16]
 8003d92:	b953      	cbnz	r3, 8003daa <__swsetup_r+0xc6>
 8003d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d98:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d9c:	d1ba      	bne.n	8003d14 <__swsetup_r+0x30>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	0792      	lsls	r2, r2, #30
 8003da2:	bf58      	it	pl
 8003da4:	6963      	ldrpl	r3, [r4, #20]
 8003da6:	60a3      	str	r3, [r4, #8]
 8003da8:	e7f2      	b.n	8003d90 <__swsetup_r+0xac>
 8003daa:	2000      	movs	r0, #0
 8003dac:	e7f7      	b.n	8003d9e <__swsetup_r+0xba>
 8003dae:	bf00      	nop
 8003db0:	2000000c 	.word	0x2000000c
 8003db4:	08004240 	.word	0x08004240
 8003db8:	08004260 	.word	0x08004260
 8003dbc:	08004220 	.word	0x08004220

08003dc0 <_close_r>:
 8003dc0:	b538      	push	{r3, r4, r5, lr}
 8003dc2:	4c06      	ldr	r4, [pc, #24]	; (8003ddc <_close_r+0x1c>)
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	f7fe fff4 	bl	8002db8 <_close>
 8003dd0:	1c43      	adds	r3, r0, #1
 8003dd2:	d102      	bne.n	8003dda <_close_r+0x1a>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	b103      	cbz	r3, 8003dda <_close_r+0x1a>
 8003dd8:	602b      	str	r3, [r5, #0]
 8003dda:	bd38      	pop	{r3, r4, r5, pc}
 8003ddc:	20000158 	.word	0x20000158

08003de0 <__sflush_r>:
 8003de0:	898a      	ldrh	r2, [r1, #12]
 8003de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de6:	4605      	mov	r5, r0
 8003de8:	0710      	lsls	r0, r2, #28
 8003dea:	460c      	mov	r4, r1
 8003dec:	d458      	bmi.n	8003ea0 <__sflush_r+0xc0>
 8003dee:	684b      	ldr	r3, [r1, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	dc05      	bgt.n	8003e00 <__sflush_r+0x20>
 8003df4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	dc02      	bgt.n	8003e00 <__sflush_r+0x20>
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e02:	2e00      	cmp	r6, #0
 8003e04:	d0f9      	beq.n	8003dfa <__sflush_r+0x1a>
 8003e06:	2300      	movs	r3, #0
 8003e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e0c:	682f      	ldr	r7, [r5, #0]
 8003e0e:	6a21      	ldr	r1, [r4, #32]
 8003e10:	602b      	str	r3, [r5, #0]
 8003e12:	d032      	beq.n	8003e7a <__sflush_r+0x9a>
 8003e14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e16:	89a3      	ldrh	r3, [r4, #12]
 8003e18:	075a      	lsls	r2, r3, #29
 8003e1a:	d505      	bpl.n	8003e28 <__sflush_r+0x48>
 8003e1c:	6863      	ldr	r3, [r4, #4]
 8003e1e:	1ac0      	subs	r0, r0, r3
 8003e20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e22:	b10b      	cbz	r3, 8003e28 <__sflush_r+0x48>
 8003e24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e26:	1ac0      	subs	r0, r0, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e2e:	6a21      	ldr	r1, [r4, #32]
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b0      	blx	r6
 8003e34:	1c43      	adds	r3, r0, #1
 8003e36:	89a3      	ldrh	r3, [r4, #12]
 8003e38:	d106      	bne.n	8003e48 <__sflush_r+0x68>
 8003e3a:	6829      	ldr	r1, [r5, #0]
 8003e3c:	291d      	cmp	r1, #29
 8003e3e:	d848      	bhi.n	8003ed2 <__sflush_r+0xf2>
 8003e40:	4a29      	ldr	r2, [pc, #164]	; (8003ee8 <__sflush_r+0x108>)
 8003e42:	40ca      	lsrs	r2, r1
 8003e44:	07d6      	lsls	r6, r2, #31
 8003e46:	d544      	bpl.n	8003ed2 <__sflush_r+0xf2>
 8003e48:	2200      	movs	r2, #0
 8003e4a:	6062      	str	r2, [r4, #4]
 8003e4c:	04d9      	lsls	r1, r3, #19
 8003e4e:	6922      	ldr	r2, [r4, #16]
 8003e50:	6022      	str	r2, [r4, #0]
 8003e52:	d504      	bpl.n	8003e5e <__sflush_r+0x7e>
 8003e54:	1c42      	adds	r2, r0, #1
 8003e56:	d101      	bne.n	8003e5c <__sflush_r+0x7c>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	b903      	cbnz	r3, 8003e5e <__sflush_r+0x7e>
 8003e5c:	6560      	str	r0, [r4, #84]	; 0x54
 8003e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e60:	602f      	str	r7, [r5, #0]
 8003e62:	2900      	cmp	r1, #0
 8003e64:	d0c9      	beq.n	8003dfa <__sflush_r+0x1a>
 8003e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e6a:	4299      	cmp	r1, r3
 8003e6c:	d002      	beq.n	8003e74 <__sflush_r+0x94>
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f8de 	bl	8004030 <_free_r>
 8003e74:	2000      	movs	r0, #0
 8003e76:	6360      	str	r0, [r4, #52]	; 0x34
 8003e78:	e7c0      	b.n	8003dfc <__sflush_r+0x1c>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	47b0      	blx	r6
 8003e80:	1c41      	adds	r1, r0, #1
 8003e82:	d1c8      	bne.n	8003e16 <__sflush_r+0x36>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d0c5      	beq.n	8003e16 <__sflush_r+0x36>
 8003e8a:	2b1d      	cmp	r3, #29
 8003e8c:	d001      	beq.n	8003e92 <__sflush_r+0xb2>
 8003e8e:	2b16      	cmp	r3, #22
 8003e90:	d101      	bne.n	8003e96 <__sflush_r+0xb6>
 8003e92:	602f      	str	r7, [r5, #0]
 8003e94:	e7b1      	b.n	8003dfa <__sflush_r+0x1a>
 8003e96:	89a3      	ldrh	r3, [r4, #12]
 8003e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e9c:	81a3      	strh	r3, [r4, #12]
 8003e9e:	e7ad      	b.n	8003dfc <__sflush_r+0x1c>
 8003ea0:	690f      	ldr	r7, [r1, #16]
 8003ea2:	2f00      	cmp	r7, #0
 8003ea4:	d0a9      	beq.n	8003dfa <__sflush_r+0x1a>
 8003ea6:	0793      	lsls	r3, r2, #30
 8003ea8:	680e      	ldr	r6, [r1, #0]
 8003eaa:	bf08      	it	eq
 8003eac:	694b      	ldreq	r3, [r1, #20]
 8003eae:	600f      	str	r7, [r1, #0]
 8003eb0:	bf18      	it	ne
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	eba6 0807 	sub.w	r8, r6, r7
 8003eb8:	608b      	str	r3, [r1, #8]
 8003eba:	f1b8 0f00 	cmp.w	r8, #0
 8003ebe:	dd9c      	ble.n	8003dfa <__sflush_r+0x1a>
 8003ec0:	4643      	mov	r3, r8
 8003ec2:	463a      	mov	r2, r7
 8003ec4:	6a21      	ldr	r1, [r4, #32]
 8003ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ec8:	4628      	mov	r0, r5
 8003eca:	47b0      	blx	r6
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	dc06      	bgt.n	8003ede <__sflush_r+0xfe>
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8003edc:	e78e      	b.n	8003dfc <__sflush_r+0x1c>
 8003ede:	4407      	add	r7, r0
 8003ee0:	eba8 0800 	sub.w	r8, r8, r0
 8003ee4:	e7e9      	b.n	8003eba <__sflush_r+0xda>
 8003ee6:	bf00      	nop
 8003ee8:	20400001 	.word	0x20400001

08003eec <_fflush_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	b1db      	cbz	r3, 8003f2e <_fflush_r+0x42>
 8003ef6:	b118      	cbz	r0, 8003f00 <_fflush_r+0x14>
 8003ef8:	6983      	ldr	r3, [r0, #24]
 8003efa:	b90b      	cbnz	r3, 8003f00 <_fflush_r+0x14>
 8003efc:	f7ff fa8e 	bl	800341c <__sinit>
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <_fflush_r+0x48>)
 8003f02:	429c      	cmp	r4, r3
 8003f04:	d109      	bne.n	8003f1a <_fflush_r+0x2e>
 8003f06:	686c      	ldr	r4, [r5, #4]
 8003f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f0c:	b17b      	cbz	r3, 8003f2e <_fflush_r+0x42>
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4628      	mov	r0, r5
 8003f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f16:	f7ff bf63 	b.w	8003de0 <__sflush_r>
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <_fflush_r+0x4c>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	d101      	bne.n	8003f24 <_fflush_r+0x38>
 8003f20:	68ac      	ldr	r4, [r5, #8]
 8003f22:	e7f1      	b.n	8003f08 <_fflush_r+0x1c>
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <_fflush_r+0x50>)
 8003f26:	429c      	cmp	r4, r3
 8003f28:	bf08      	it	eq
 8003f2a:	68ec      	ldreq	r4, [r5, #12]
 8003f2c:	e7ec      	b.n	8003f08 <_fflush_r+0x1c>
 8003f2e:	2000      	movs	r0, #0
 8003f30:	bd38      	pop	{r3, r4, r5, pc}
 8003f32:	bf00      	nop
 8003f34:	08004240 	.word	0x08004240
 8003f38:	08004260 	.word	0x08004260
 8003f3c:	08004220 	.word	0x08004220

08003f40 <_lseek_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4c07      	ldr	r4, [pc, #28]	; (8003f60 <_lseek_r+0x20>)
 8003f44:	4605      	mov	r5, r0
 8003f46:	4608      	mov	r0, r1
 8003f48:	4611      	mov	r1, r2
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	6022      	str	r2, [r4, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	f7fe ff59 	bl	8002e06 <_lseek>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_lseek_r+0x1e>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_lseek_r+0x1e>
 8003f5c:	602b      	str	r3, [r5, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000158 	.word	0x20000158

08003f64 <__swhatbuf_r>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	460e      	mov	r6, r1
 8003f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6c:	2900      	cmp	r1, #0
 8003f6e:	b096      	sub	sp, #88	; 0x58
 8003f70:	4614      	mov	r4, r2
 8003f72:	461d      	mov	r5, r3
 8003f74:	da07      	bge.n	8003f86 <__swhatbuf_r+0x22>
 8003f76:	2300      	movs	r3, #0
 8003f78:	602b      	str	r3, [r5, #0]
 8003f7a:	89b3      	ldrh	r3, [r6, #12]
 8003f7c:	061a      	lsls	r2, r3, #24
 8003f7e:	d410      	bmi.n	8003fa2 <__swhatbuf_r+0x3e>
 8003f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f84:	e00e      	b.n	8003fa4 <__swhatbuf_r+0x40>
 8003f86:	466a      	mov	r2, sp
 8003f88:	f000 f8b2 	bl	80040f0 <_fstat_r>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	dbf2      	blt.n	8003f76 <__swhatbuf_r+0x12>
 8003f90:	9a01      	ldr	r2, [sp, #4]
 8003f92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f9a:	425a      	negs	r2, r3
 8003f9c:	415a      	adcs	r2, r3
 8003f9e:	602a      	str	r2, [r5, #0]
 8003fa0:	e7ee      	b.n	8003f80 <__swhatbuf_r+0x1c>
 8003fa2:	2340      	movs	r3, #64	; 0x40
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	6023      	str	r3, [r4, #0]
 8003fa8:	b016      	add	sp, #88	; 0x58
 8003faa:	bd70      	pop	{r4, r5, r6, pc}

08003fac <__smakebuf_r>:
 8003fac:	898b      	ldrh	r3, [r1, #12]
 8003fae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003fb0:	079d      	lsls	r5, r3, #30
 8003fb2:	4606      	mov	r6, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	d507      	bpl.n	8003fc8 <__smakebuf_r+0x1c>
 8003fb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	6123      	str	r3, [r4, #16]
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	6163      	str	r3, [r4, #20]
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	ab01      	add	r3, sp, #4
 8003fca:	466a      	mov	r2, sp
 8003fcc:	f7ff ffca 	bl	8003f64 <__swhatbuf_r>
 8003fd0:	9900      	ldr	r1, [sp, #0]
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f7ff faab 	bl	8003530 <_malloc_r>
 8003fda:	b948      	cbnz	r0, 8003ff0 <__smakebuf_r+0x44>
 8003fdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fe0:	059a      	lsls	r2, r3, #22
 8003fe2:	d4ef      	bmi.n	8003fc4 <__smakebuf_r+0x18>
 8003fe4:	f023 0303 	bic.w	r3, r3, #3
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	e7e3      	b.n	8003fb8 <__smakebuf_r+0xc>
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <__smakebuf_r+0x7c>)
 8003ff2:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	6020      	str	r0, [r4, #0]
 8003ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffc:	81a3      	strh	r3, [r4, #12]
 8003ffe:	9b00      	ldr	r3, [sp, #0]
 8004000:	6163      	str	r3, [r4, #20]
 8004002:	9b01      	ldr	r3, [sp, #4]
 8004004:	6120      	str	r0, [r4, #16]
 8004006:	b15b      	cbz	r3, 8004020 <__smakebuf_r+0x74>
 8004008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400c:	4630      	mov	r0, r6
 800400e:	f000 f881 	bl	8004114 <_isatty_r>
 8004012:	b128      	cbz	r0, 8004020 <__smakebuf_r+0x74>
 8004014:	89a3      	ldrh	r3, [r4, #12]
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	81a3      	strh	r3, [r4, #12]
 8004020:	89a3      	ldrh	r3, [r4, #12]
 8004022:	431d      	orrs	r5, r3
 8004024:	81a5      	strh	r5, [r4, #12]
 8004026:	e7cd      	b.n	8003fc4 <__smakebuf_r+0x18>
 8004028:	080033e5 	.word	0x080033e5

0800402c <__malloc_lock>:
 800402c:	4770      	bx	lr

0800402e <__malloc_unlock>:
 800402e:	4770      	bx	lr

08004030 <_free_r>:
 8004030:	b538      	push	{r3, r4, r5, lr}
 8004032:	4605      	mov	r5, r0
 8004034:	2900      	cmp	r1, #0
 8004036:	d045      	beq.n	80040c4 <_free_r+0x94>
 8004038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800403c:	1f0c      	subs	r4, r1, #4
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfb8      	it	lt
 8004042:	18e4      	addlt	r4, r4, r3
 8004044:	f7ff fff2 	bl	800402c <__malloc_lock>
 8004048:	4a1f      	ldr	r2, [pc, #124]	; (80040c8 <_free_r+0x98>)
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	4610      	mov	r0, r2
 800404e:	b933      	cbnz	r3, 800405e <_free_r+0x2e>
 8004050:	6063      	str	r3, [r4, #4]
 8004052:	6014      	str	r4, [r2, #0]
 8004054:	4628      	mov	r0, r5
 8004056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800405a:	f7ff bfe8 	b.w	800402e <__malloc_unlock>
 800405e:	42a3      	cmp	r3, r4
 8004060:	d90c      	bls.n	800407c <_free_r+0x4c>
 8004062:	6821      	ldr	r1, [r4, #0]
 8004064:	1862      	adds	r2, r4, r1
 8004066:	4293      	cmp	r3, r2
 8004068:	bf04      	itt	eq
 800406a:	681a      	ldreq	r2, [r3, #0]
 800406c:	685b      	ldreq	r3, [r3, #4]
 800406e:	6063      	str	r3, [r4, #4]
 8004070:	bf04      	itt	eq
 8004072:	1852      	addeq	r2, r2, r1
 8004074:	6022      	streq	r2, [r4, #0]
 8004076:	6004      	str	r4, [r0, #0]
 8004078:	e7ec      	b.n	8004054 <_free_r+0x24>
 800407a:	4613      	mov	r3, r2
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	b10a      	cbz	r2, 8004084 <_free_r+0x54>
 8004080:	42a2      	cmp	r2, r4
 8004082:	d9fa      	bls.n	800407a <_free_r+0x4a>
 8004084:	6819      	ldr	r1, [r3, #0]
 8004086:	1858      	adds	r0, r3, r1
 8004088:	42a0      	cmp	r0, r4
 800408a:	d10b      	bne.n	80040a4 <_free_r+0x74>
 800408c:	6820      	ldr	r0, [r4, #0]
 800408e:	4401      	add	r1, r0
 8004090:	1858      	adds	r0, r3, r1
 8004092:	4282      	cmp	r2, r0
 8004094:	6019      	str	r1, [r3, #0]
 8004096:	d1dd      	bne.n	8004054 <_free_r+0x24>
 8004098:	6810      	ldr	r0, [r2, #0]
 800409a:	6852      	ldr	r2, [r2, #4]
 800409c:	605a      	str	r2, [r3, #4]
 800409e:	4401      	add	r1, r0
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	e7d7      	b.n	8004054 <_free_r+0x24>
 80040a4:	d902      	bls.n	80040ac <_free_r+0x7c>
 80040a6:	230c      	movs	r3, #12
 80040a8:	602b      	str	r3, [r5, #0]
 80040aa:	e7d3      	b.n	8004054 <_free_r+0x24>
 80040ac:	6820      	ldr	r0, [r4, #0]
 80040ae:	1821      	adds	r1, r4, r0
 80040b0:	428a      	cmp	r2, r1
 80040b2:	bf04      	itt	eq
 80040b4:	6811      	ldreq	r1, [r2, #0]
 80040b6:	6852      	ldreq	r2, [r2, #4]
 80040b8:	6062      	str	r2, [r4, #4]
 80040ba:	bf04      	itt	eq
 80040bc:	1809      	addeq	r1, r1, r0
 80040be:	6021      	streq	r1, [r4, #0]
 80040c0:	605c      	str	r4, [r3, #4]
 80040c2:	e7c7      	b.n	8004054 <_free_r+0x24>
 80040c4:	bd38      	pop	{r3, r4, r5, pc}
 80040c6:	bf00      	nop
 80040c8:	200000cc 	.word	0x200000cc

080040cc <_read_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4c07      	ldr	r4, [pc, #28]	; (80040ec <_read_r+0x20>)
 80040d0:	4605      	mov	r5, r0
 80040d2:	4608      	mov	r0, r1
 80040d4:	4611      	mov	r1, r2
 80040d6:	2200      	movs	r2, #0
 80040d8:	6022      	str	r2, [r4, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	f7fe fe06 	bl	8002cec <_read>
 80040e0:	1c43      	adds	r3, r0, #1
 80040e2:	d102      	bne.n	80040ea <_read_r+0x1e>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	b103      	cbz	r3, 80040ea <_read_r+0x1e>
 80040e8:	602b      	str	r3, [r5, #0]
 80040ea:	bd38      	pop	{r3, r4, r5, pc}
 80040ec:	20000158 	.word	0x20000158

080040f0 <_fstat_r>:
 80040f0:	b538      	push	{r3, r4, r5, lr}
 80040f2:	4c07      	ldr	r4, [pc, #28]	; (8004110 <_fstat_r+0x20>)
 80040f4:	2300      	movs	r3, #0
 80040f6:	4605      	mov	r5, r0
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	f7fe fe67 	bl	8002dd0 <_fstat>
 8004102:	1c43      	adds	r3, r0, #1
 8004104:	d102      	bne.n	800410c <_fstat_r+0x1c>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	b103      	cbz	r3, 800410c <_fstat_r+0x1c>
 800410a:	602b      	str	r3, [r5, #0]
 800410c:	bd38      	pop	{r3, r4, r5, pc}
 800410e:	bf00      	nop
 8004110:	20000158 	.word	0x20000158

08004114 <_isatty_r>:
 8004114:	b538      	push	{r3, r4, r5, lr}
 8004116:	4c06      	ldr	r4, [pc, #24]	; (8004130 <_isatty_r+0x1c>)
 8004118:	2300      	movs	r3, #0
 800411a:	4605      	mov	r5, r0
 800411c:	4608      	mov	r0, r1
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	f7fe fe66 	bl	8002df0 <_isatty>
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d102      	bne.n	800412e <_isatty_r+0x1a>
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	b103      	cbz	r3, 800412e <_isatty_r+0x1a>
 800412c:	602b      	str	r3, [r5, #0]
 800412e:	bd38      	pop	{r3, r4, r5, pc}
 8004130:	20000158 	.word	0x20000158

08004134 <AHBPrescTable>:
	...
 800413c:	04030201 09080706                       ........

08004144 <APBPrescTable>:
 8004144:	00000000 04030201 2a2a2a2a 45452a2a     ........******EE
 8004154:	20534950 444e4556 20474e49 4843414d     PIS VENDING MACH
 8004164:	2a454e49 2a2a2a2a 0d0a202a 00000000     INE****** ......
 8004174:	2a2a2a2a 2a2a2a2a 414d2a2a 4b4b5553     **********MASUKK
 8004184:	55204e41 2a474e41 2a2a2a2a 2a2a2a2a     AN UANG*********
 8004194:	0a202a2a 0000000d 676e6155 646e4120     ** .....Uang And
 80041a4:	70522061 3030352e 000d0a20 676e6155     a Rp.500 ...Uang
 80041b4:	646e4120 70522061 3030312e 0d0a2030      Anda Rp.1000 ..
 80041c4:	00000000 676e6155 6d654b20 696c6162     ....Uang Kembali
 80041d4:	2e705220 20303035 00000d0a 676e6155      Rp.500 ....Uang
 80041e4:	6c654b20 20726175 00000d0a 676e6155      Keluar ....Uang
 80041f4:	6d654b20 696c6162 2e705220 30303031      Kembali Rp.1000
 8004204:	000d0a20 6d726550 4b206e65 61756c65      ...Permen Kelua
 8004214:	0d0a2072 00000000                       r ......

0800421c <_global_impure_ptr>:
 800421c:	20000010                                ... 

08004220 <__sf_fake_stderr>:
	...

08004240 <__sf_fake_stdin>:
	...

08004260 <__sf_fake_stdout>:
	...
 8004280:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 8004290:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 80042a0:	31300046 35343332 39383736 64636261     F.0123456789abcd
 80042b0:	00006665                                ef..

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
